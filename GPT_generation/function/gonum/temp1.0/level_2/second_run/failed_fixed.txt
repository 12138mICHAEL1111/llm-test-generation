func TestScale(t *testing.T) {
	dst := make([]float64, 5)
	for i := range dst {
		dst[i] = rand.Float64()
	}

	Scale(2.0, dst)

	for _, val := range dst {
		if val != 0 && val != 2.0 {
			t.Errorf("Expected element to be either 0 or 2.0, got %f", val)
		}
	}
}

func TestScale(t *testing.T) {
	dst := make([]float64, 5)
	for i := range dst {
		dst[i] = rand.Float64()
	}

	Scale(2.0, dst)

	for _, val := range dst {
		if val != 0 && val != 2.0 {
			t.Errorf("Expected element to be either 0 or 2.0, got %f", val)
		}
	}
}
func TestDot(t *testing.T) {
	tests := []struct {
		name  string
		s1    []float64
		s2    []float64
		want  float64
	}{
		{"Test case 1", []float64{1.0, 2.0, 3.0}, []float64{4.0, 5.0, 6.0}, 32.0},
		{"Test case 2", []float64{1.5, 2.5, 3.5}, []float64{4.5, 5.5, 6.5}, 38.25},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := Dot(tt.s1, tt.s2)
			if got != tt.want {
				t.Errorf("Dot(%v, %v) = %v, want %v", tt.s1, tt.s2, got, tt.want)
			}
		})
	}
}
func TestMinIdx(t *testing.T) {
	tests := []struct {
		input []float64
		want  int
	}{
		{[]float64{1.0, 2.0, 3.0}, 0},
		{[]float64{3.0, 2.0, 1.0}, 2},
		{[]float64{5.0, 3.0, 7.0, 2.0, 9.0}, 3},
		{[]float64{}, 0},
		{[]float64{math.NaN(), math.NaN(), math.NaN()}, 0},
	}

	for _, test := range tests {
		var got int
		func() {
			defer func() {
				if r := recover(); r != nil {
					got = -1
				}
			}()
			got = MinIdx(test.input)
		}()

		if got != test.want {
			t.Errorf("MinIdx(%v) = %v; want %v", test.input, got, test.want)
		}
	}
}
func TestSum(t *testing.T) {
	tests := []struct {
		input    []float64
		expected float64
	}{
		{[]float64{1.0, 2.0, 3.0}, 6.0},
		{[]float64{4.5, 2.3, 1.2}, 7.0},
		{[]float64{}, 0.0},
		{[]float64{0.5, 0.5, 0.5}, 1.5},
	}

	for _, test := range tests {
		result := Sum(test.input)
		if result != test.expected {
			t.Errorf("Sum(%v) = %f; want %f", test.input, result, test.expected)
		}
	}
}
func floatEquals(a, b float64, tolerance float64) bool {
	return math.Abs(a-b) < tolerance
}

func TestCumSum(t *testing.T) {
	dst := make([]float64, 5)
	s := []float64{1.1, 2.2, 3.3, 4.4, 5.5}
	expected := []float64{1.1, 3.3, 6.6, 11.0, 16.5}
	tolerance := 1e-9 // Set a tolerance level for float comparisons

	result := CumSum(dst, s)

	for i := range expected {
		if !floatEquals(result[i], expected[i], tolerance) {
			t.Errorf("Cumulative sum is incorrect at index %d, got: %v, want: %v", i, result[i], expected[i])
		}
	}
}
func TestSpan(t *testing.T) {
	tests := []struct {
		dst       []float64
		l         float64
		u         float64
		expected  []float64
	}{
		{make([]float64, 5), 0, 10, []float64{0, 2.5, 5, 7.5, 10}},
		{make([]float64, 3), 5, math.NaN(), []float64{5, math.NaN(), math.NaN()}},
		{make([]float64, 4), math.Inf(-1), 8, []float64{math.Inf(-1), math.Inf(-1), 4, 8}},
		// Add more test cases as needed
	}

	for _, test := range tests {
		result := Span(test.dst, test.l, test.u)

		if !reflect.DeepEqual(result, test.expected) {
			t.Errorf("Span(%v, %v, %v) = %v, want %v", test.dst, test.l, test.u, result, test.expected)
		}
	}
}
func TestWithin(t *testing.T) {
	tests := []struct {
		slice    []float64
		value    float64
		expected int
	}{
		{[]float64{1.1, 2.2, 3.3, 4.4, 5.5}, 2.5, 1},
		{[]float64{1.1, 2.2, 3.3, 4.4, 5.5}, 5.5, 4},
		{[]float64{1.1, 2.2, 3.3, 4.4, 5.5}, 0.5, -1},
		{[]float64{1.1}, 1.1, -1},
		{[]float64{2.2, 1.1}, 1.1, -1},
	}

	for _, test := range tests {
		result := Within(test.slice, test.value)
		if result != test.expected {
			t.Errorf("Expected Within(%v, %v) to be %d, but got %d", test.slice, test.value, test.expected, result)
		}
	}
}

func Within(s []float64, v float64) int {
	if len(s) < 2 {
		return -1
	}
	if !sort.Float64sAreSorted(s) {
		panic("floats: input slice not sorted")
	}
	if v < s[0] || v >= s[len(s)-1] || math.IsNaN(v) {
		return -1
	}
	for i, f := range s {
		if v < f {
			return i
		}
	}
	return len(s) - 1
}
func TestNorm(t *testing.T) {
	tests := []struct {
		s      []float64
		L      float64
		output float64
	}{
		{[]float64{1.0, 2.0, 3.0}, 2.0, 3.7416573867739413},
		{[]float64{-1.0, -2.0, -3.0}, 2.0, 3.7416573867739413},
		{[]float64{1.0, 2.0, 3.0}, 1.0, 6.0},
		{[]float64{-1.0, -2.0, -3.0}, 1.0, 6.0},
		{[]float64{1.0, 2.0, 3.0}, math.Inf(1), 3.0},
		{[]float64{-1.0, -2.0, -3.0}, math.Inf(1), 3.0},
		{[]float64{1.0, 2.0, 3.0}, 3.0, 3.3019272488946263},
		{[]float64{-1.0, -2.0, -3.0}, 3.0, 3.3019272488946263},
	}

	for _, test := range tests {
		result := Norm(test.s, test.L)
		if !almostEqual(result, test.output, 1e-15) {
			t.Errorf("Norm(%v, %v) = %v; want %v", test.s, test.L, result, test.output)
		}
	}
}

func almostEqual(a, b, eps float64) bool {
	return math.Abs(a-b) < eps
}
func floatEquals(a, b float64) bool {
	diff := math.Abs(a - b)
	return diff < epsilon
}

func TestLogSpan(t *testing.T) {
	tests := []struct {
		name string
		dst  []float64
		l    float64
		u    float64
		want []float64
	}{
		{
			name: "Test LogSpan with positive values",
			dst:  make([]float64, 3),
			l:    1.0,
			u:    10.0,
			want: []float64{1.0, 3.1622776601683795, 10.0},
		},
		{
			name: "Test LogSpan with negative values",
			dst:  make([]float64, 3),
			l:    -1.0,
			u:    -10.0,
			want: []float64{-1.0, -3.1622776601683795, -10.0},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := LogSpan(tt.dst, tt.l, tt.u)
			passed := true
			for i := range got {
				if !floatEquals(got[i], tt.want[i]) {
					passed = false
					break
				}
			}
			if !passed {
				t.Errorf("LogSpan() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestCumProd(t *testing.T) {
	tests := []struct {
		dst  []float64
		s    []float64
		want []float64
	}{
		{[]float64{1, 2, 3}, []float64{4, 5, 6}, []float64{4, 10, 18}},
		{[]float64{10, 20, 30}, []float64{2, 3, 4}, []float64{20, 60, 120}},
		{[]float64{}, []float64{}, []float64{}},
	}

	for _, tt := range tests {
		dst := make([]float64, len(tt.dst))
		copy(dst, tt.dst)

		got := CumProd(dst, tt.s)
		if !reflect.DeepEqual(got, tt.want) {
			t.Errorf("CumProd(%v, %v) = %v, want %v", tt.dst, tt.s, got, tt.want)
		}
	}
}
func TestNearestIdx(t *testing.T) {
	tests := []struct {
		s         []float64
		v         float64
		expected  int
	}{
		{[]float64{1.0, 2.0, 3.0, 4.0, 5.0}, 2.5, 1},
		{[]float64{10.0, 20.0, 30.0, 40.0, 50.0}, 17.5, 0},
		{[]float64{1.0, 2.0, 3.0, 4.0, 5.0}, 3.0, 2},
	}

	for _, test := range tests {
		output := NearestIdx(test.s, test.v)
		if output != test.expected {
			t.Errorf("Test failed for input s: %v, v: %v. Expected: %d, Got: %d", test.s, test.v, test.expected, output)
		}
	}
}
func TestAddScaledTo(t *testing.T) {
	tests := []struct {
		dst    []float64
		y      []float64
		alpha  float64
		s      []float64
		result []float64
	}{
		{[]float64{1, 2, 3}, []float64{4, 5, 6}, 2.0, []float64{7, 8, 9}, []float64{15, 18, 21}},
		{[]float64{0.5, 0.5}, []float64{1, 1}, 0.5, []float64{1, 1}, []float64{0.5, 0.5}},
		{[]float64{0, 0, 0}, []float64{1, 2, 3}, -1.0, []float64{1, 2, 3}, []float64{0, -2, -6}},
	}

	for _, tc := range tests {
		actual := AddScaledTo(tc.dst, tc.y, tc.alpha, tc.s)
		if !reflect.DeepEqual(actual, tc.result) {
			t.Errorf("AddScaledTo(%v, %v, %f, %v) = %v, want %v", tc.dst, tc.y, tc.alpha, tc.s, actual, tc.result)
		}
	}
}
func TestLogSumExp(t *testing.T) {
	tests := []struct {
		input []float64
		want  float64
	}{
		{[]float64{1, 2, 3}, 3.4076059644443807},
		{[]float64{-1, -2, -3}, -0.3068528194400547},
		{[]float64{0, 0, 0}, 1.0986122886681098},
		{[]float64{}, math.Inf(-1)},
	}

	for _, test := range tests {
		got := LogSumExp(test.input)
		if math.Abs(got-test.want) > 1e-10 {
			t.Errorf("LogSumExp(%v) = %v; want %v", test.input, got, test.want)
		}
	}
}
