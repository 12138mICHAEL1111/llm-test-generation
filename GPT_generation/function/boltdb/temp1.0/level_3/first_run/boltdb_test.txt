func TestIsReadOnly(t *testing.T) {
	db := &bolt.DB{readOnly: true}

	if !db.IsReadOnly() {
		t.Errorf("Expected database to be read-only, but IsReadOnly() returned false")
	}

	db.readOnly = false

	if db.IsReadOnly() {
		t.Errorf("Expected database to not be read-only, but IsReadOnly() returned true")
	}
}

func TestUpdate(t *testing.T) {
	db, err := bolt.Open("test.db", 0600, nil)
	if err != nil {
		t.Fatalf("Error opening database: %v", err)
	}
	defer db.Close()

	err = db.Update(func(tx *bolt.Tx) error {
		// Perform some operations within the transaction
		bucket, err := tx.CreateBucket([]byte("test_bucket"))
		if err != nil {
			return err
		}

		err = bucket.Put([]byte("key"), []byte("value"))
		if err != nil {
			return err
		}

		return nil
	})

	if err != nil {
		t.Fatalf("Error performing update: %v", err)
	}

	// Add more test cases here as needed
}

func TestPath(t *testing.T) {
	// Create a temporary database file for testing
	file, err := os.CreateTemp("", "testdb")
	if err != nil {
		t.Fatalf("Error creating temporary file: %v", err)
	}
	defer os.Remove(file.Name())

	// Open the database with the temporary file
	db, err := bolt.Open(file.Name(), 0600, nil)
	if err != nil {
		t.Fatalf("Error opening database: %v", err)
	}
	defer db.Close()

	// Test the Path function
	expectedPath := file.Name()
	actualPath := db.Path()
	if actualPath != expectedPath {
		t.Errorf("Path() returned %s, expected %s", actualPath, expectedPath)
	}
}

func TestDBString(t *testing.T) {
	db := &bolt.DB{path: "test.db"}
	expected := "DB<" + db.path + ">"
	result := db.String()

	if result != expected {
		t.Errorf("String() returned unexpected result, got: %s, want: %s", result, expected)
	}
}

func TestOpen(t *testing.T) {
	// Create a temporary folder for the test database
	tempDir := t.TempDir()
	dbPath := tempDir + "/test.db"

	// Open the database
	db, err := bolt.Open(dbPath, os.FileMode(0600), nil)
	if err != nil {
		t.Fatalf("Error opening database: %v", err)
	}
	defer func() {
		err := db.Close()
		if err != nil {
			t.Fatalf("Error closing database: %v", err)
		}
	}()

	// Verify that the database was successfully opened
	if !db.IsReadOnly() {
		t.Errorf("Expected database to be read-only")
	}

	// Add additional test cases as needed
}

func TestClose(t *testing.T) {
	// Create a new in-memory Bolt database for testing
	db, err := bolt.Open(":memory:", 0666, nil)
	if err != nil {
		t.Fatalf("error opening database: %v", err)
	}
	defer db.Close()

	// Begin a read-write transaction
	tx, err := db.Begin(true)
	if err != nil {
		t.Fatalf("error beginning transaction: %v", err)
	}

	// Close the transaction before closing the database
	err = tx.Commit()
	if err != nil {
		t.Fatalf("error committing transaction: %v", err)
	}

	// Call the Close function
	err = db.Close()
	if err != nil {
		t.Errorf("error closing database: %v", err)
	}

	// Attempt to begin another transaction after closing the database, should result in an error
	_, err = db.Begin(true)
	if err == nil {
		t.Error("expected error when beginning transaction after closing database")
	}
}

func TestInfo(t *testing.T) {
	db, err := bolt.Open("test.db", 0600, nil)
	if err != nil {
		t.Fatalf("Error opening database: %v", err)
	}
	defer db.Close()

	info := db.Info()

	if info == nil {
		t.Error("Info should not be nil")
	}

	if info.Data == 0 {
		t.Error("Data should not be zero")
	}

	if info.PageSize != db.pageSize {
		t.Errorf("Expected PageSize to be %d, but got %d", db.pageSize, info.PageSize)
	}
}



func TestBegin(t *testing.T) {
	db, err := bolt.Open("test.db", 0600, nil)
	if err != nil {
		t.Fatalf("Error opening database: %s", err)
	}
	defer db.Close()

	// Test read-only transaction
	tx, err := db.Begin(false)
	if err != nil {
		t.Fatalf("Error beginning read-only transaction: %s", err)
	}
	defer tx.Rollback()

	// Test write transaction
	tx, err = db.Begin(true)
	if err != nil {
		t.Fatalf("Error beginning write transaction: %s", err)
	}
	defer tx.Rollback()
}



func TestSync(t *testing.T) {
	db, err := bolt.Open("test.db", 0600, nil)
	if err != nil {
		t.Fatalf("error opening database: %v", err)
	}
	defer db.Close()

	err = db.Sync()
	if err != nil {
		t.Errorf("error syncing database: %v", err)
	}
}

func TestSub(t *testing.T) {
	stats1 := bolt.Stats{
		FreePageN:     10,
		PendingPageN:  5,
		FreeAlloc:     100,
		FreelistInuse: 50,
		TxN:           20,
		OpenTxN:       10,
		TxStats: bolt.TxStats{
			PageCount:   50,
			PageAlloc:   500,
			CursorCount: 5,
			NodeCount:   100,
			NodeDeref:   50,
			Rebalance:   10,
			RebalanceTime: 1000,
			Split:     5,
			Spill:     8,
			SpillTime: 800,
			Write:     15,
			WriteTime: 1500,
		},
	}

	stats2 := bolt.Stats{
		FreePageN:     5,
		PendingPageN:  1,
		FreeAlloc:     50,
		FreelistInuse: 25,
		TxN:           10,
		OpenTxN:       5,
		TxStats: bolt.TxStats{
			PageCount:   20,
			PageAlloc:   200,
			CursorCount: 2,
			NodeCount:   50,
			NodeDeref:   25,
			Rebalance:   5,
			RebalanceTime: 500,
			Split:     2,
			Spill:     3,
			SpillTime: 300,
			Write:     8,
			WriteTime: 800,
		},
	}

	expectedDiff := bolt.Stats{
		FreePageN:     10,
		PendingPageN:  5,
		FreeAlloc:     100,
		FreelistInuse: 50,
		TxN:           10,
		TxStats: bolt.TxStats{
			PageCount:   30,
			PageAlloc:   300,
			CursorCount: 3,
			NodeCount:   50,
			NodeDeref:   25,
			Rebalance:   5,
			RebalanceTime: 500,
			Split:     3,
			Spill:     5,
			SpillTime: 500,
			Write:     7,
			WriteTime: 700,
		},
	}

	diff := stats1.Sub(&stats2)

	if diff != expectedDiff {
		t.Errorf("Sub function returned incorrect difference. Got %v, want %v", diff, expectedDiff)
	}
}

func TestGoString(t *testing.T) {
	db := &bolt.DB{
		path: "/path/to/db",
	}

	expected := "bolt.DB{path:\"/path/to/db\"}"
	result := db.GoString()

	if result != expected {
		t.Errorf("Unexpected string representation of database. Expected: %s, Got: %s", expected, result)
	}
}

func TestStats(t *testing.T) {
	db, err := bolt.Open("test.db", 0666, nil)
	if err != nil {
		t.Fatalf("Error opening database: %v", err)
	}
	defer func() {
		err := db.Close()
		if err != nil {
			t.Fatalf("Error closing database: %v", err)
		}
	}()

	stats := db.Stats()

	// Perform assertions on stats here
}

