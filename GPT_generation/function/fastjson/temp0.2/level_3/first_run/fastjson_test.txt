func TestMarshalTo(t *testing.T) {
	// Add your test cases for MarshalTo function here
}

func TestParse(t *testing.T) {
	// Add your test cases for the Parse function here
}

func TestCache_getValue(t *testing.T) {
	c := &cache{
		vs: make([]Value, 0),
	}

	val := c.getValue()

	if val == nil {
		t.Error("Expected non-nil value, got nil")
	}

	// Add more test cases as needed
}

func TestHasSpecialChars(t *testing.T) {
	tests := []struct {
		input    string
		expected bool
	}{
		{"abc", false},
		{"abc\"", true},
		{"abc\\", true},
		{"\x10", true},
		{"\x20", false},
	}

	for _, test := range tests {
		result := fastjson.hasSpecialChars(test.input)
		if result != test.expected {
			t.Errorf("For input %s, expected %t, but got %t", test.input, test.expected, result)
		}
	}
}

func TestParseValue(t *testing.T) {
	// Add your test cases for the parseValue function here
}

func TestEscapeString(t *testing.T) {
	tests := []struct {
		input    string
		expected string
	}{
		{input: "hello", expected: `"hello"`},
		{input: "special\"chars", expected: `"special\"chars"`},
		{input: "newline\n", expected: `"newline\n"`},
		{input: "tab\t", expected: `"tab\t"`},
	}

	for _, test := range tests {
		output := escapeString([]byte{}, test.input)
		if string(output) != test.expected {
			t.Errorf("Expected %s, but got %s", test.expected, string(output))
		}
	}
}

func TestVisit(t *testing.T) {
	// Define a sample function to pass to Visit
	var visitedItems [][]byte
	f := func(key []byte, v *fastjson.Value) {
		visitedItems = append(visitedItems, key)
	}

	// Create a sample Object with some key-value pairs
	o := &fastjson.Object{
		Kvs: []fastjson.Kv{
			{K: "key1", V: &fastjson.Value{}},
			{K: "key2", V: &fastjson.Value{}},
			{K: "key3", V: &fastjson.Value{}},
		},
		KeysUnescaped: false,
	}

	// Call the Visit function with the sample function
	o.Visit(f)

	// Check if all keys were visited in the correct order
	expectedKeys := [][]byte{[]byte("key1"), []byte("key2"), []byte("key3")}
	for i, key := range visitedItems {
		if string(key) != string(expectedKeys[i]) {
			t.Errorf("Expected key %s, but got %s", expectedKeys[i], key)
		}
	}
}

func TestSkipWSSlow(t *testing.T) {
	tests := []struct {
		input    string
		expected string
	}{
		{input: "   hello", expected: "hello"},
		{input: "\n\nworld", expected: "world"},
		{input: "\t\tfoo", expected: "foo"},
		{input: "\r\rbar", expected: "bar"},
		{input: "foobar", expected: "foobar"},
		{input: "", expected: ""},
	}

	for _, test := range tests {
		result := skipWSSlow(test.input)
		if result != test.expected {
			t.Errorf("skipWSSlow(%s) = %s; want %s", test.input, result, test.expected)
		}
	}
}

func TestGetInt64(t *testing.T) {
	// Write your test cases for GetInt64 function here
}

func TestGetKV(t *testing.T) {
	obj := &Object{
		kvs: make([]kv, 0),
	}

	kv := obj.getKV()

	if kv == nil {
		t.Error("Expected non-nil kv pointer, but got nil")
	}

	if len(obj.kvs) != 1 {
		t.Errorf("Expected length of kvs to be 1, but got %d", len(obj.kvs))
	}

	if obj.kvs[0] != *kv {
		t.Error("Expected kv in kvs slice to be the same as returned kv pointer")
	}
}

func TestParseBytes(t *testing.T) {
	// Test cases for ParseBytes function
	// Add your test cases here
}

func TestString(t *testing.T) {
	tests := []struct {
		input    Type
		expected string
	}{
		{TypeObject, "object"},
		{TypeArray, "array"},
		{TypeString, "string"},
		{TypeNumber, "number"},
		{TypeTrue, "true"},
		{TypeFalse, "false"},
		{TypeNull, "null"},
	}

	for _, test := range tests {
		result := test.input.String()
		if result != test.expected {
			t.Errorf("For Type %d, expected %s but got %s", test.input, test.expected, result)
		}
	}
}

func TestUnescapeStringBestEffort(t *testing.T) {
	tests := []struct {
		input    string
		expected string
	}{
		{input: `Hello, World!`, expected: `Hello, World!`},
		{input: `\"Hello, World!\"`, expected: `"Hello, World!"`},
		{input: `\\Hello, World!\\`, expected: `\\Hello, World!\\`},
		{input: `\nHello, World!\n`, expected: "\nHello, World!\n"},
		{input: `\u0048\u0065\u006c\u006c\u006f`, expected: "Hello"},
		{input: `\u0048\u0065\u006c\u006c\u006f\\u0021`, expected: "Hello\\u0021"},
	}

	for _, test := range tests {
		result := unescapeStringBestEffort(test.input)
		if result != test.expected {
			t.Errorf("Input: %s, Expected: %s, Got: %s", test.input, test.expected, result)
		}
	}
}

func TestParseRawNumber(t *testing.T) {
	tests := []struct {
		input         string
		expectedFirst string
		expectedRest  string
		expectedError error
	}{
		{input: "123.45", expectedFirst: "123.45", expectedRest: "", expectedError: nil},
		{input: "-678.90", expectedFirst: "-678.90", expectedRest: "", expectedError: nil},
		{input: "3.14159E+10", expectedFirst: "3.14159E+10", expectedRest: "", expectedError: nil},
		{input: "NaN", expectedFirst: "NaN", expectedRest: "", expectedError: nil},
		{input: "inf", expectedFirst: "inf", expectedRest: "", expectedError: nil},
		{input: "+123.45", expectedFirst: "+123.45", expectedRest: "", expectedError: nil},
		{input: "abc", expectedFirst: "", expectedRest: "abc", expectedError: fmt.Errorf("unexpected char: %q", "a")},
	}

	for _, test := range tests {
		first, rest, err := parseRawNumber(test.input)
		if first != test.expectedFirst || rest != test.expectedRest || err != test.expectedError {
			t.Errorf("For input %q, expected (%q, %q, %v), but got (%q, %q, %v)", test.input, test.expectedFirst, test.expectedRest, test.expectedError, first, rest, err)
		}
	}
}

func TestFloat64(t *testing.T) {
	// Create a new Value with a JSON number
	v := &Value{s: "123.45", t: TypeNumber}

	// Call the Float64 function
	f, err := v.Float64()

	// Check if there was an error
	if err != nil {
		t.Errorf("Float64 returned an error: %v", err)
	}

	// Check if the returned float64 value is correct
	expected := 123.45
	if f != expected {
		t.Errorf("Float64 returned incorrect value, got: %v, want: %v", f, expected)
	}
}

func TestLen(t *testing.T) {
	obj := &fastjson.Object{
		kvs: []fastjson.kv{
			{k: "key1", v: &fastjson.Value{}},
			{k: "key2", v: &fastjson.Value{}},
			{k: "key3", v: &fastjson.Value{}},
		},
		keysUnescaped: true,
	}

	expectedLen := 3
	actualLen := obj.Len()

	if actualLen != expectedLen {
		t.Errorf("Expected length to be %d, but got %d", expectedLen, actualLen)
	}
}

func TestUnescapeKeys(t *testing.T) {
	// create test data
	obj := Object{
		kvs: []kv{
			{k: "key1", v: &Value{}},
			{k: "key2", v: &Value{}},
		},
		keysUnescaped: false,
	}

	// call unescapeKeys method
	obj.unescapeKeys()

	// check if keys are unescaped
	for _, kv := range obj.kvs {
		if kv.k != "key1" && kv.k != "key2" {
			t.Errorf("Key was not unescaped: %s", kv.k)
		}
	}

	// check if keysUnescaped flag is set to true
	if !obj.keysUnescaped {
		t.Error("keysUnescaped flag was not set to true")
	}
}

func TestSkipWS(t *testing.T) {
	tests := []struct {
		input    string
		expected string
	}{
		{"   hello", "   hello"},
		{"world", "world"},
		{"\n\t 123", "\n\t 123"},
		{"", ""},
		{"\t", "\t"},
	}

	for _, test := range tests {
		result := skipWS(test.input)
		if result != test.expected {
			t.Errorf("skipWS(%s) = %s; want %s", test.input, result, test.expected)
		}
	}
}

func TestParseArray(t *testing.T) {
	// Add your test cases for the parseArray function here
}

func TestParseRawKey(t *testing.T) {
	// Add test cases for parseRawKey function here
}

func TestGetArray(t *testing.T) {
	// Write your test cases for GetArray function here
	// Make sure to test different scenarios including existing keys path, non-existing keys path, and invalid value type
}

func TestExists(t *testing.T) {
	// Test cases for Exists function
	tests := []struct {
		name     string
		keys     []string
		expected bool
	}{
		{
			name:     "Field exists in object",
			keys:     []string{"key1"},
			expected: true,
		},
		{
			name:     "Field does not exist in object",
			keys:     []string{"key2"},
			expected: false,
		},
		{
			name:     "Field exists in nested object",
			keys:     []string{"nested", "key3"},
			expected: true,
		},
		{
			name:     "Field does not exist in nested object",
			keys:     []string{"nested", "key4"},
			expected: false,
		},
		{
			name:     "Field exists in array",
			keys:     []string{"array", "0"},
			expected: true,
		},
		{
			name:     "Field does not exist in array",
			keys:     []string{"array", "1"},
			expected: false,
		},
	}

	// Create a test Value object for testing
	value := &Value{
		o: Object{
			kvs: []kv{
				{k: "key1", v: &Value{}},
				{k: "nested", v: &Value{o: Object{kvs: []kv{{k: "key3", v: &Value{}}}}}},
				{k: "array", v: &Value{a: []*Value{{}, {}}}, t: TypeArray},
			},
		},
	}

	// Run test cases
	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			result := value.Exists(tc.keys...)
			if result != tc.expected {
				t.Errorf("Expected Exists(%v) to be %v, but got %v", tc.keys, tc.expected, result)
			}
		})
	}
}

func TestValue_Type(t *testing.T) {
	// Create a test case
	tests := []struct {
		name     string
		value    *Value
		expected Type
	}{
		{
			name:     "Test Type with TypeNull",
			value:    &Value{t: TypeNull},
			expected: TypeNull,
		},
		{
			name:     "Test Type with TypeObject",
			value:    &Value{t: TypeObject},
			expected: TypeObject,
		},
		// Add more test cases as needed
	}

	// Run the test cases
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			actual := tt.value.Type()
			if actual != tt.expected {
				t.Errorf("Expected type %v, but got %v", tt.expected, actual)
			}
		})
	}
}

func TestGetUint64(t *testing.T) {
	// Add your test cases here
}

func TestGetFloat64(t *testing.T) {
	// Write your test cases for GetFloat64 function here
}

func TestGetInt(t *testing.T) {
	// Test cases for GetInt function
	tests := []struct {
		name     string
		value    *fastjson.Value
		keys     []string
		expected int
	}{
		{
			name:     "Valid key path with int value",
			value:    &fastjson.Value{s: "123", t: fastjson.TypeNumber},
			keys:     []string{},
			expected: 123,
		},
		{
			name:     "Valid key path with decimal index",
			value:    &fastjson.Value{s: "456", t: fastjson.TypeNumber},
			keys:     []string{"1.5"},
			expected: 456,
		},
		{
			name:     "Non-existing key path",
			value:    nil,
			keys:     []string{"key1", "key2"},
			expected: 0,
		},
		{
			name:     "Invalid value type",
			value:    &fastjson.Value{s: "true", t: fastjson.TypeString},
			keys:     []string{},
			expected: 0,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := tt.value.GetInt(tt.keys...)
			if result != tt.expected {
				t.Errorf("Expected: %d, Got: %d", tt.expected, result)
			}
		})
	}
}

func TestGetUint(t *testing.T) {
	// Add your test cases here
}

func TestInt(t *testing.T) {
	// Add test cases for Int function here
}

func TestGetValue(t *testing.T) {
	// Test cases for Get function
	tests := []struct {
		inputValue *Value
		keys       []string
		expected   *Value
	}{
		{
			inputValue: &Value{
				t: TypeObject,
				o: Object{
					kvs: []kv{
						{k: "key1", v: &Value{t: TypeString, s: "value1"}},
						{k: "key2", v: &Value{t: TypeNumber}},
					},
				},
			},
			keys:     []string{"key1"},
			expected: &Value{t: TypeString, s: "value1"},
		},
		{
			inputValue: &Value{
				t: TypeArray,
				a: []*Value{
					{t: TypeString, s: "value1"},
					{t: TypeNumber},
				},
			},
			keys:     []string{"0"},
			expected: &Value{t: TypeString, s: "value1"},
		},
		{
			inputValue: &Value{
				t: TypeObject,
				o: Object{
					kvs: []kv{
						{k: "key1", v: &Value{t: TypeString, s: "value1"}},
						{k: "key2", v: &Value{t: TypeNumber}},
					},
				},
			},
			keys:     []string{"key3"},
			expected: nil,
		},
		{
			inputValue: nil,
			keys:       []string{"key1"},
			expected:   nil,
		},
	}

	for _, test := range tests {
		result := test.inputValue.Get(test.keys...)
		if result != test.expected {
			t.Errorf("For keys %v, expected %v, but got %v", test.keys, test.expected, result)
		}
	}
}

func TestObject_Reset(t *testing.T) {
	// Test cases for reset function
	t.Run("Reset function test case 1", func(t *testing.T) {
		// Test case implementation
	})

	t.Run("Reset function test case 2", func(t *testing.T) {
		// Test case implementation
	})

	// Add more test cases as needed
}

func TestGetObject(t *testing.T) {
	// Add your test cases for GetObject function here
}

func TestParseObject(t *testing.T) {
	// Add your test cases for the parseObject function here
}

func TestGetStringBytes(t *testing.T) {
	// Create a new Value for testing
	v := &Value{
		s: "test",
		t: TypeString,
	}

	// Test case 1: Valid keys path
	result := v.GetStringBytes()
	expected := []byte("test")
	if !reflect.DeepEqual(result, expected) {
		t.Errorf("Expected %v, but got %v", expected, result)
	}

	// Test case 2: Non-existing keys path
	result = v.GetStringBytes("invalid")
	if result != nil {
		t.Errorf("Expected nil, but got %v", result)
	}

	// Test case 3: Invalid value type
	v.t = TypeNumber
	result = v.GetStringBytes()
	if result != nil {
		t.Errorf("Expected nil, but got %v", result)
	}
}

func TestParseRawString(t *testing.T) {
	// Add your test cases for parseRawString function here
}

func TestUint(t *testing.T) {
	// Add your test cases here
}

func TestGetBool(t *testing.T) {
	// Test cases for GetBool function
	tests := []struct {
		name     string
		value    *fastjson.Value
		keys     []string
		expected bool
	}{
		{
			name:     "Existing key with true value",
			value:    &fastjson.Value{t: fastjson.TypeTrue},
			keys:     []string{},
			expected: true,
		},
		{
			name:     "Existing key with false value",
			value:    &fastjson.Value{t: fastjson.TypeFalse},
			keys:     []string{},
			expected: false,
		},
		{
			name:     "Non-existing key",
			value:    nil,
			keys:     []string{"key1", "key2"},
			expected: false,
		},
		{
			name:     "Invalid value type",
			value:    &fastjson.Value{t: fastjson.TypeString},
			keys:     []string{},
			expected: false,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := tt.value.GetBool(tt.keys...)
			if result != tt.expected {
				t.Errorf("Expected %v, but got %v", tt.expected, result)
			}
		})
	}
}

func TestUint64(t *testing.T) {
	// Add test cases here
}

func TestArray(t *testing.T) {
	v := &Value{
		t: TypeArray,
		a: []*Value{
			{t: TypeString, s: "value1"},
			{t: TypeNumber, s: "42"},
		},
	}

	arr, err := v.Array()
	if err != nil {
		t.Errorf("Unexpected error: %v", err)
	}

	expected := []*Value{
		{t: TypeString, s: "value1"},
		{t: TypeNumber, s: "42"},
	}

	if !reflect.DeepEqual(arr, expected) {
		t.Errorf("Arrays do not match. Expected: %v, Got: %v", expected, arr)
	}
}

func TestBool(t *testing.T) {
	// Test cases for Bool function
	// Add your test cases here
}

func TestStringBytes(t *testing.T) {
	v := &Value{s: "test string", t: TypeString}

	result, err := v.StringBytes()

	if err != nil {
		t.Errorf("Unexpected error: %v", err)
	}

	expected := []byte("test string")
	if !reflect.DeepEqual(result, expected) {
		t.Errorf("StringBytes() returned %v, expected %v", result, expected)
	}
}

func TestInt64(t *testing.T) {
	// Test cases for Int64 function
	// Add your test cases here
}

func TestValue_Object(t *testing.T) {
	v := &Value{
		t: TypeObject,
		o: Object{
			kvs: []kv{
				{k: "key1", v: &Value{t: TypeString, s: "value1"}},
				{k: "key2", v: &Value{t: TypeNumber, s: "42"}},
			},
			keysUnescaped: false,
		},
	}

	obj, err := v.Object()
	if err != nil {
		t.Errorf("Unexpected error: %v", err)
	}

	expected := &Object{
		kvs: []kv{
			{k: "key1", v: &Value{t: TypeString, s: "value1"}},
			{k: "key2", v: &Value{t: TypeNumber, s: "42"}},
		},
		keysUnescaped: false,
	}

	if !reflect.DeepEqual(obj, expected) {
		t.Errorf("Object values do not match. Expected: %v, Got: %v", expected, obj)
	}
}

