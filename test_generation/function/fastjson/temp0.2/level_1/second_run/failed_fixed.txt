func TestExists(t *testing.T) {
	// Create a sample value for testing
	value := &Value{
		"key1": "value1",
		"key3": map[string]interface{}{
			"key4": "value4",
		},
	}

	// Test when key exists
	exists := value.Exists("key1")
	if !exists {
		t.Errorf("Expected key1 to exist, but it does not")
	}

	// Test when key does not exist
	exists = value.Exists("key2")
	if exists {
		t.Errorf("Expected key2 to not exist, but it does")
	}
}
func TestValue_Float64(t *testing.T) {
	tests := []struct {
		name     string
		value    string
		expected float64
		err      bool
	}{
		{"Valid number", "10.5", 10.5, false},
		{"Invalid number", "abc", 0, true},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			v := &Value{s: tt.value}
			result, err := v.Float64()

			if tt.err && err == nil {
				t.Errorf("Expected an error but got nil")
			}

			if !tt.err && result != tt.expected {
				t.Errorf("Expected %f but got %f", tt.expected, result)
			}
		})
	}
}
func TestInt64(t *testing.T) {
	tests := []struct {
		input       string
		expected    int64
		expectedErr bool
	}{
		{input: "123", expected: 123, expectedErr: false},
		{input: "abc", expected: 0, expectedErr: true},
		{input: "9223372036854775807", expected: 9223372036854775807, expectedErr: false},
	}

	for _, test := range tests {
		v := &Value{s: test.input}
		result, err := v.Int64()
		if test.expectedErr && err == nil {
			t.Errorf("Expected error for input: %s", test.input)
		} else if !test.expectedErr && err != nil {
			t.Errorf("Unexpected error for input: %s - %v", test.input, err)
		} else if result != test.expected {
			t.Errorf("Expected %d for input: %s, but got %d", test.expected, test.input, result)
		}
	}
}
func TestMarshalTo(t *testing.T) {
	testCases := []struct {
		name     string
		value    *Value
		expected []byte
	}{
		{
			name:     "String value",
			value:    &Value{t: TypeString, s: "hello"},
			expected: []byte(`"hello"`),
		},
		{
			name:     "Object value",
			value:    &Value{t: TypeObject, o: &Object{}},
			expected: []byte(`{}`),
		},
		{
			name:     "Array value",
			value:    &Value{t: TypeArray, a: []*Value{&Value{t: TypeString, s: "a"}, &Value{t: TypeString, s: "b"}}},
			expected: []byte(`["a","b"]`),
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			result := tc.value.MarshalTo([]byte{})
			if !reflect.DeepEqual(result, tc.expected) {
				t.Errorf("Expected %s, but got %s", string(tc.expected), string(result))
			}
		})
	}
}
func TestParseRawString(t *testing.T) {
	tests := []struct {
		input         string
		expectedPart1 string
		expectedPart2 string
		expectedErr   error
	}{
		{`"Hello, World"`, "Hello, World", "", nil},
		{`"escape\"char"`, "escape\\", "char", nil},
		{`"unclosed`, "", "", fmt.Errorf(`missing closing '"'`)},
		{`"part1\\"part2"`, "part1\\", "part2", nil},
	}

	for _, test := range tests {
		part1, part2, err := parseRawString(test.input)
		if part1 != test.expectedPart1 || part2 != test.expectedPart2 || err.Error() != test.expectedErr.Error() {
			t.Errorf("parseRawString(%q) = (%q, %q, %v), expected (%q, %q, %v)", test.input, part1, part2, err, test.expectedPart1, test.expectedPart2, test.expectedErr)
		}
	}
}
func TestValue_GetUint(t *testing.T) {
	// Create a new Value instance for testing
	value := &Value{
		s: "123",
	}

	// Test the GetUint function with valid input
	result := value.GetUint()
	expected := uint(123)
	if result != expected {
		t.Errorf("GetUint() returned %d, expected %d", result, expected)
	}

	// Test the GetUint function with invalid input
	value = &Value{
		s: "not a number",
	}
	result = value.GetUint()
	expected = uint(0)
	if result != expected {
		t.Errorf("GetUint() returned %d, expected %d", result, expected)
	}
}
func TestUnescapeStringBestEffort(t *testing.T) {
	testCases := []struct {
		input    string
		expected string
	}{
		{`"Hello, World!"`, "Hello, World!"},
		{`"\u003cscript\u003e"`, "<script>"},
		{`"\\\"test\\\""`, "\"test\""},
		{`"\\\nh\ne\nl\nl\no\\\n"`, "hello"},
		{`"\\u2716\\u5421\\u8798\\u2B07"`, "✖唡螘⬇"},
		{`"\/n"`, "/n"},
	}

	for _, tc := range testCases {
		result := unescapeStringBestEffort(tc.input)
		if result != tc.expected {
			t.Errorf("Unexpected result. Input: %s, Expected: %s, Got: %s", tc.input, tc.expected, result)
		}
	}
}
