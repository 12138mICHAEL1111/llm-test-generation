func TestUpdate(t *testing.T) {
	db, err := bolt.Open("test.db", 0600, nil)
	if err != nil {
		t.Fatalf("error opening database: %v", err)
	}
	defer db.Close()

	err = db.Update(func(tx *bolt.Tx) error {
		bucket := tx.Bucket([]byte("test"))
		if bucket == nil {
			bucket, err := tx.CreateBucket([]byte("test"))
			if err != nil {
				return err
			}
		}

		err = bucket.Put([]byte("key"), []byte("value"))
		if err != nil {
			return err
		}

		return nil
	})

	if err != nil {
		t.Errorf("error updating database: %v", err)
	}
}
func TestStats_Sub(t *testing.T) {
	s := bolt.Stats{
		FreePageN:     10,
		PendingPageN:  5,
		FreeAlloc:     100,
		FreelistInuse: 50,
		TxN:           20,
		OpenTxN:       10,
		TxStats: bolt.TxStats{
			PageCount:    50,
			PageAlloc:    100,
			CursorCount:  5,
			NodeCount:    200,
			NodeDeref:    100,
			Rebalance:    10,
			RebalanceTime: 100,
			Split:        5,
			Spill:        3,
			SpillTime:    50,
			Write:        15,
			WriteTime:    80,
		},
	}

	other := &bolt.Stats{
		FreePageN:     5,
		PendingPageN:  2,
		FreeAlloc:     50,
		FreelistInuse: 25,
		TxN:           10,
		OpenTxN:       5,
		TxStats: bolt.TxStats{
			PageCount:    25,
			PageAlloc:    50,
			CursorCount:  2,
			NodeCount:    100,
			NodeDeref:    50,
			Rebalance:    5,
			RebalanceTime: 50,
			Split:        2,
			Spill:        1,
			SpillTime:    25,
			Write:        7,
			WriteTime:    40,
		},
	}

	expected := bolt.Stats{
		FreePageN:     10,
		PendingPageN:  5,
		FreeAlloc:     100,
		FreelistInuse: 50,
		TxN:           10,
		OpenTxN:       5,
		TxStats: bolt.TxStats{
			PageCount:    25,
			PageAlloc:    50,
			CursorCount:  3,
			NodeCount:    100,
			NodeDeref:    50,
			Rebalance:    5,
			RebalanceTime: 50,
			Split:        3,
			Spill:        2,
			SpillTime:    25,
			Write:        8,
			WriteTime:    40,
		},
	}

	result := s.Sub(other)

	if result != expected {
		t.Errorf("Subtracting stats did not produce the expected result. Got: %+v, Expected: %+v", result, expected)
	}
}
