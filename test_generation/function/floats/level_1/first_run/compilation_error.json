{
    "TestAddTo":"For code t := []float64{7.0, 8.0, 9.0}, no new variables on left side of := and cannot use []float64{…} (value of type []float64) as *testing.T value in assignment. For code result := AddTo(dst, s, t), cannot use t (variable of type *testing.T) as []float64 value in argument to AddTo",
    "TestArgsort_Len":"For code {argsort{[]int{1, 2, 3, 4, 5}}, 5},\n{argsort{[]int{}}, 0},\n{argsort{[]int{1}}, 1}, too few values in struct literal of type argsort and cannot use []int{…} (value of type []int) as []float64 value in struct literal",
    "TestArgsortLess": "For code a := argsort{s: []int{3, 1, 5, 2, 4}}, cannot use []int{…} (value of type []int) as []float64 value in struct literal. For code if a.s[i] != expected[i] ,invalid operation: a.s[i] != expected[i] (mismatched types float64 and int)",
    "TestArgsort_Swap": "For code a := argsort{\ns:    []int{1, 2, 3, 4, 5},\ninds: []int{0, 1, 2, 3, 4},\n}, cannot use []int{…} (value of type []int) as []float64 value in struct literal",
    "TestDivTo":"For code t := []float64{1, 2, 3}, no new variables on left side of := and cannot use []float64{…} (value of type []float64) as *testing.T value in assignment. For code result := DivTo(dst, s, t), cannot use t (variable of type *testing.T) as []float64 value in argument to DivTo",
    "TestSame": "For code {[]float64{NaN, 2.0, NaN}, []float64{NaN, 2.0, NaN}, true}, undefined: NaN",
    "TestSubTo": "For code t := []float64{4, 5, 6}, no new variables on left side of := and cannot use []float64{…} (value of type []float64) as *testing.T value in assignment. For code result := SubTo(dst, s, t), cannot use t (variable of type *testing.T) as []float64 value in argument to SubTo. For code t := []float64{4, 5, 6}, no new variables on left side of := and cannot use []float64{…} (value of type []float64) as *testing.T value in assignment. For code SubTo(dst, s, t), cannot use t (variable of type *testing.T) as []float64 value in argument to SubTo",
    "TestFind": "For code !reflect.DeepEqual(err, test.err), avoid using reflect.DeepEqual with errors. For code (*testing.common).Errorf format %v arg test.f is a func value, not called"
}