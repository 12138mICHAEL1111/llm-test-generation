func TestLogSpan(t *testing.T) {
	tests := []struct {
		dst    []float64
		l      float64
		u      float64
		result []float64
	}{
		{[]float64{1, 3.1622776601683795, 10.000000000000002}, 1, 10, []float64{1, 2, 3}},
		{[]float64{0.5, 0.8660254037844386, 1.4999999999999998}, 0.5, 1.5, []float64{1.6487212707001282, 2.718281828459045, 4.481689070338065}},
		{[]float64{0, 0, 0}, 0, 0, []float64{1, 1, 1}},
	}

	for _, test := range tests {
		result := LogSpan(test.dst, test.l, test.u)

		if !reflect.DeepEqual(result, test.result) {
			t.Errorf("LogSpan(%v, %v, %v) = %v, want %v", test.dst, test.l, test.u, result, test.result)
		}
	}
}

func testEqual(a, b, eps float64) bool {
	return math.Abs(a-b) < eps
}

func TestLogSumExp(t *testing.T) {
	tests := []struct {
		input []float64
		want  float64
	}{
		{[]float64{0, 0, 0}, 0},
		{[]float64{1, 2, 3}, 3.40760596444438},
		{[]float64{-1, -2, -3}, -0.619566848691337},
	}

	for _, tt := range tests {
		got := LogSumExp(tt.input)
		if !testEqual(got, tt.want, 1e-10) {
			t.Errorf("LogSumExp(%v) = %v; want %v", tt.input, got, tt.want)
		}
	}
}

func TestMaxIdx(t *testing.T) {
	tests := []struct {
		name string
		input         []float64
		expectedIndex int
	}{
		{"Test case 1", []float64{1, 2, 3, 4, 5, 6, 7}, 6},
		{"Test case 2", []float64{6, 5, 4, 3, 2, 1}, 0},
		{"Test case 3", []float64{-1, -2, -3, -4, -5, -6}, 0},
		{"Test case 4", []float64{}, 0},
		{"Test case 5", []float64{2.5, 5.5, 3.5, 4.5, math.NaN()}, 1},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				if r := recover(); r != nil {
					if tt.expectedIndex != 0 {
						t.Errorf("Expected index %v but panic occurred: %v", tt.expectedIndex, r)
					}
				}
			}()
			result := MaxIdx(tt.input)
			if result != tt.expectedIndex {
				t.Errorf("Expected index %v but got %v for input: %v", tt.expectedIndex, result, tt.input)
			}
		})
	}
}

func TestNearestIdx(t *testing.T) {
	tests := []struct {
		name  string
		slice []float64
		value float64
		want  int
	}{
		{
			name:  "empty slice",
			slice: []float64{},
			value: 5.0,
			want:  0,
		},
		{
			name:  "NaN value",
			slice: []float64{1.0, 2.0, 3.0},
			value: math.NaN(),
			want:  0,
		},
		{
			name:  "positive infinity value",
			slice: []float64{1.0, 2.0, 3.0},
			value: math.Inf(1),
			want:  2,
		},
		{
			name:  "negative infinity value",
			slice: []float64{1.0, 2.0, 3.0},
			value: math.Inf(-1),
			want:  0,
		},
		{
			name:  "normal values",
			slice: []float64{1.0, 2.0, 3.0, 4.0, 5.0},
			value: 3.7,
			want:  3,
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			defer func() {
				if r := recover(); r != nil {
					if r != zeroLength {
						t.Errorf("unexpected panic: %v", r)
					}
				}
			}()
			got := NearestIdx(test.slice, test.value)
			if got != test.want {
				t.Errorf("NearestIdx(%v, %f) = %d; want %d", test.slice, test.value, got, test.want)
			}
		})
	}
}

func MaxIdx(s []float64) int {
	maxIdx := 0
	for i, val := range s {
		if val > s[maxIdx] {
			maxIdx = i
		}
	}
	return maxIdx
}

func MinIdx(s []float64) int {
	minIdx := 0
	for i, val := range s {
		if val < s[minIdx] {
			minIdx = i
		}
	}
	return minIdx
}

func TestNorm(t *testing.T) {
	tests := []struct {
		s    []float64
		L    float64
		want float64
	}{
		{[]float64{1, 2, 3}, 2, 3.7416573867739413},
		{[]float64{-1, -2, -3}, 1, 6},
		{[]float64{5, -3, 10}, math.Inf(1), 10},
		{[]float64{2, 3, 4}, 3, 4.497941445275415},
		{[]float64{0, 0, 0}, 2, 0},
		{[]float64{}, 2, 0},
		{[]float64{4}, 1, 4},
		{[]float64{5, 5, 5, 5, 5, 5, 5, 5}, math.Inf(-1), 5},
	}

	for _, tt := range tests {
		got := Norm(tt.s, tt.L)
		if math.Abs(got-tt.want) > 1e-10 {
			t.Errorf("Norm(%v, %v) = %v; want %v", tt.s, tt.L, got, tt.want)
		}
	}
}

func TestWithin(t *testing.T) {
	tests := []struct {
		slice    []float64
		value    float64
		expected int
	}{
		{[]float64{1.0, 2.0, 3.0, 4.0, 5.0}, 2.5, 1},
		{[]float64{1.0, 2.5, 3.0, 4.0, 5.0}, 2.5, 2},
		{[]float64{1.0, 2.5}, 2.5, -1},
		{[]float64{1.0, 2.0, 3.0, 4.0, 5.0}, 0.5, -1},
		{[]float64{1.0, 2.0}, 2.0, -1},
	}

	for _, test := range tests {
		result := Within(test.slice, test.value)
		if result != test.expected {
			t.Errorf("Expected %d, but got %d for Within(%v, %f)", test.expected, result, test.slice, test.value)
		}

	}
}

func Within(s []float64, v float64) int {
	if len(s) < 2 {
		return -1
	}
	if !sort.Float64sAreSorted(s) {
		panic("floats: input slice not sorted")
	}
	if v < s[0] || v >= s[len(s)-1] || math.IsNaN(v) {
		return -1
	}
	for i, f := range s {
		if v < f {
			return i
		}
	}
	return -1
}

import (
	"testing"
)

func TestMul(t *testing.T) {
	type args struct {
		dst []float64
		s   []float64
	}
	tests := []struct {
		name string
		args args
	}{
		{
			name: "Multiplying two slices with 2 elements each",
			args: args{
				dst: []float64{1.0, 2.0},
				s:   []float64{3.0, 4.0},
			},
		},
		{
			name: "Multiplying two slices with different number of elements",
			args: args{
				dst: []float64{1.0, 2.0},
				s:   []float64{3.0},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				if r := recover(); r == nil {
					t.Errorf("Mul() did not panic")
				}
			}()
			Mul(tt.args.dst, tt.args.s)
		})
	}
}

func TestAddTo(t *testing.T) {
	dst := []float64{1.0, 2.0, 3.0}
	s := []float64{4.0, 5.0, 6.0}
	tArray := []float64{7.0, 8.0, 9.0}

	result := AddTo(dst, s, tArray)

	expected := []float64{11.0, 13.0, 15.0} // Update the expected result based on the correct calculation

	assert.Equal(t, expected, result, "The result of AddTo did not match the expected result")
}

func TestArgsortStable(t *testing.T) {
	dst := []float64{3.5, 1.2, 6.7, 0.9, 5.4}
	inds := make([]int, len(dst))
	ArgsortStable(dst, inds)

	expectedIndices := []int{3, 1, 0, 4, 2}
	for i, index := range inds {
		if index != expectedIndices[i] {
			t.Errorf("Expected index %d at position %d, but got %d", expectedIndices[i], i, index)
		}
	}

	// Verify that indices are sorted correctly
	isSorted := true
	for i := 1; i < len(inds); i++ {
		if dst[inds[i-1]] > dst[inds[i]] {
			isSorted = false
			break
		}
	}
	if !isSorted {
		t.Error("Indices are not sorted correctly")
	}
}

func TestCount(t *testing.T) {
	tests := []struct {
		name     string
		function func(float64) bool
		values   []float64
		expected int
	}{
		{
			name:     "Count even numbers",
			function: func(x float64) bool { return int(x)%2 == 0 },
			values:   []float64{2, 3, 4, 5, 6},
			expected: 2,
		},
		{
			name:     "Count positive numbers",
			function: func(x float64) bool { return x > 0 },
			values:   []float64{-2, -1, 0, 1, 2},
			expected: 2,
		},
		{
			name:     "Count numbers greater than 10",
			function: func(x float64) bool { return x > 10 },
			values:   []float64{5, 10, 15, 20},
			expected: 2,
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := Count(test.function, test.values)
			if result != test.expected {
				t.Errorf("Count() returned %d, expected %d", result, test.expected)
			}
		})
	}
}

func TestCumProd(t *testing.T) {
	tests := []struct {
		dst      []float64
		s        []float64
		expected []float64
	}{
		{[]float64{1, 2, 3}, []float64{4, 5, 6}, []float64{4, 10, 18}},
		{[]float64{1, 2, 3}, []float64{0, 0, 0}, []float64{0, 0, 0}},
		{[]float64{1, 2}, []float64{3, 4}, []float64{3, 8}},
	}

	for _, test := range tests {
		result := CumProd(test.dst, test.s)
		if !reflect.DeepEqual(result, test.expected) {
			t.Errorf("CumProd(%v, %v) = %v, want %v", test.dst, test.s, result, test.expected)
		}
	}
}

func CumProd(dst, s []float64) []float64 {
	if len(dst) != len(s) {
		panic(badDstLength)
	}
	if len(dst) == 0 {
		return dst
	}
	return floats.CumProd(dst, s)
}

func TestCumSum(t *testing.T) {
	tests := []struct {
		dst      []float64
		s        []float64
		expected []float64
	}{
		{[]float64{1, 2, 3}, []float64{4, 5, 6}, []float64{5, 7, 9}},
		{[]float64{0, 0, 0}, []float64{1, 2, 3}, []float64{1, 2, 3}},
		{[]float64{10}, []float64{10}, []float64{20}},
		{[]float64{}, []float64{}, []float64{}},
	}

	for _, test := range tests {
		result := CumSum(test.dst, test.s)
		if !slicesAreEqual(result, test.expected) {
			t.Errorf("CumSum(%v, %v) = %v; want %v", test.dst, test.s, result, test.expected)
		}
	}
}

func slicesAreEqual(a, b []float64) bool {
	if len(a) != len(b) {
		return false
	}
	for i := range a {
		if a[i] != b[i] {
			return false
		}
	}
	return true
}

func TestFind(t *testing.T) {
	tests := []struct {
		inds     []int
		f        func(float64) bool
		s        []float64
		k        int
		expected []int
		err      error
	}{
		{[]int{}, func(v float64) bool { return v > 2 }, []float64{1.5, 2.5, 3.5, 4.5}, 2, []int{2, 3}, nil},
		{[]int{}, func(v float64) bool { return v < 0 }, []float64{1.5, 2.5, 3.5, 4.5}, -1, []int{0}, nil},
		{[]int{}, func(v float64) bool { return v > 5 }, []float64{1.5, 2.5, 3.5, 4.5}, 1, []int{}, errors.New("floats: insufficient elements found")},
	}

	for _, test := range tests {
		actual, err := Find(test.inds, test.f, test.s, test.k)
		if !reflect.DeepEqual(actual, test.expected) || !reflect.DeepEqual(err, test.err) {
			t.Errorf("Find(%v, %v, %v, %d) = %v, %v; expected %v, %v", test.inds, test.f, test.s, test.k, actual, err, test.expected, test.err)
		}
	}
}

func TestMinIdx(t *testing.T) {
	tests := []struct {
		input []float64
		want  int
	}{
		{[]float64{1.0, 2.0, 3.0, 4.0, 5.0}, 0},
		{[]float64{5.0, 4.0, 3.0, 2.0, 1.0}, 4},
		{[]float64{3.0, 1.0, 4.0, 5.0, 2.0}, 1},
		{[]float64{math.NaN(), 1.0, 2.0, 3.0}, 1},
		{[]float64{}, -1},
	}

	for _, tc := range tests {
		defer func() {
			if recover() == zeroLength {
				if tc.want != -1 {
					t.Errorf("MinIdx(%v) expected to panic, but got %v", tc.input, tc.want)
				}
			}
		}()

		got := MinIdx(tc.input)

		if got != tc.want {
			t.Errorf("MinIdx(%v) = %v; want %v", tc.input, got, tc.want)
		}
	}
}

func TestNearestIdxForSpan(t *testing.T) {
	tests := []struct {
		n       int
		l       float64
		u       float64
		v       float64
		expected int
	}{
		{5, 1.0, 3.0, 2.0, 2},
		{5, 1.0, math.Inf(1), 4.0, 4},
		{8, math.Inf(-1), 5.0, 5.0, 0},
		{8, math.Inf(-1), 5.0, math.Inf(-1), 0},
		{10, 5.0, math.Inf(1), 8.0, 7},
		// Add more test cases as needed
	}

	for _, test := range tests {
		result := NearestIdxForSpan(test.n, test.l, test.u, test.v)
		if result != test.expected {
			t.Errorf("For n: %d, l: %f, u: %f, v: %f - expected: %d, got: %d", test.n, test.l, test.u, test.v, test.expected, result)
		}
	}
}

func TestSpan(t *testing.T) {
	tests := []struct {
		name string
		dst  []float64
		l    float64
		u    float64
		want []float64
	}{
		{
			name: "Normal case",
			dst:  make([]float64, 5),
			l:    0,
			u:    4,
			want: []float64{0, 1, 2, 3, 4},
		},
		{
			name: "NaN values",
			dst:  make([]float64, 3),
			l:    math.NaN(),
			u:    2,
			want: []float64{math.NaN(), math.NaN(), 2},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := Span(tt.dst, tt.l, tt.u)

			// Check if expected and actual values are both NaN
			var allNan = true
			for i := range got {
				if !math.IsNaN(got[i]) {
					allNan = false
					break
				}
			}

			var allNanExpected = true
			for i := range tt.want {
				if !math.IsNaN(tt.want[i]) {
					allNanExpected = false
					break
				}
			}

			if allNan && allNanExpected {
				t.Logf("Both expected and got values are NaN")
			} else {
				if !reflect.DeepEqual(got, tt.want) {
					t.Errorf("Span() = %v, want %v", got, tt.want)
				}
			}
		})
	}
}

func TestArgsortLess(t *testing.T) {
	a := argsort{s: []float64{3, 1, 5, 2, 4}}
	if a.Less(1, 0) {
		t.Errorf("Expected a.Less(1, 0) to be false")
	}

	if !a.Less(3, 2) {
		t.Errorf("Expected a.Less(3, 2) to be true")
	}

	sort.Sort(a) // Sorting the slice to test the Less function
	expected := []float64{1, 2, 3, 4, 5}
	for i := 0; i < len(a.s); i++ {
		if a.s[i] != expected[i] {
			t.Errorf("Unexpected result after sorting")
		}
	}
}

func TestAddScaledTo(t *testing.T) {
	t.Run("Same length vectors", func(t *testing.T) {
		dst := []float64{1, 2, 3}
		y := []float64{4, 5, 6}
		alpha := 2.0
		s := []float64{7, 8, 9}

		result := AddScaledTo(dst, y, alpha, s)

		expected := []float64{15, 18, 21}
		assert.Equal(t, expected, result)
	})

	t.Run("Different length vectors", func(t *testing.T) {
		dst := []float64{1, 2, 3}
		y := []float64{4, 5}
		alpha := 2.0
		s := []float64{7, 8, 9}

		assert.PanicsWithValue(t, badLength, func() { AddScaledTo(dst, y, alpha, s) })
	})

	t.Run("Different length destination vector", func(t *testing.T) {
		dst := []float64{1, 2}
		y := []float64{4, 5, 6}
		alpha := 2.0
		s := []float64{7, 8, 9}

		assert.PanicsWithValue(t, badDstLength, func() { AddScaledTo(dst, y, alpha, s) })
	})
}

func TestMulTo(t *testing.T) {
	tests := []struct {
		dst  []float64
		s    []float64
		t    []float64
		want []float64
	}{
		{[]float64{0, 0, 0}, []float64{1, 2, 3}, []float64{4, 5, 6}, []float64{4, 10, 18}},
		{[]float64{0, 0, 0}, []float64{2.5, 3.5, 4.5}, []float64{2, 3, 4}, []float64{5, 10.5, 18}},
		{[]float64{0, 0, 0}, []float64{0, 0, 0}, []float64{1, 2, 3}, []float64{0, 0, 0}},
	}

	for _, test := range tests {
		got := make([]float64, len(test.s))
		if len(test.dst) != len(test.s) {
			test.dst = make([]float64, len(test.s))
		}
		got = MulTo(test.dst, test.s, test.t)
		if !reflect.DeepEqual(got, test.want) {
			t.Errorf("MulTo(%v, %v, %v) = %v; want %v", test.dst, test.s, test.t, got, test.want)
		}
	}
}

