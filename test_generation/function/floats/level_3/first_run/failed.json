{
    "TestArgsort":" Sorting incorrect for input dst: [1 2 3 4], expected inds: [0 0 0 0], got: [2 1 3 0], Sorting incorrect for input dst: [1 3 5 8 10], expected inds: [0 0 0 0 0], got: [4 3 1 2 0], Sorting incorrect for input dst: [5 10 25 50 75 100], expected inds: [0 0 0 0 0 0], got: [5 4 2 1 3 0]",
    "TestCumProd":"Test case Arrays_with_different_lengths fails.  panic: floats: destination slice length does not match input",
    "TestCumSum": "Test case Empty_arrays and Equal_length_arrays fails.  Expected panic due to badDstLength, but it didn't occur",
    "TestDiv":"Test_Case_2 fails.  () got = [+Inf 10 10], want [0 10 10]. Test_Case_3 fails.  Div() got = [5 +Inf 10], want []",
    "TestLogSpan":" LogSpan() = [1 1.7320508075688772 2.9999999999999996], want [1 2 3]",
    "TestLogSumExp":"Test_Case_1 fails.   LogSumExp() = 4.440189698561196, want 4.440189698215903. Test_Case_2 fails.  LogSumExp() = 1.651250513728494, want 1.0516618204973902. Test_Case_3 fails.  LogSumExp() = -0.5923940355556196, want -0.6931471805599453",
    "TestMaxIdx":" panic: floats: zero length slice",
    "TestMul":"Test_case_3 fails.  panic: floats: slice lengths do not match",
    "TestNearestIdx":"  NearestIdx([5 3 1], 2.5) = 1; want 2",
    "TestNearestIdxForSpan":" NearestIdxForSpan(4, -Inf, 4.000000, 5.000000) = 3; want 0",
    "TestNorm": " Norm([1 2 3], 2) = 3.741657386773941; want 3.74165738677",
    "TestSpan":" For input dst=[NaN NaN NaN 10], l=NaN, u=10, expected [NaN NaN NaN 10] but got [NaN NaN NaN 10]. For input dst=[+Inf +Inf +Inf +Inf +Inf 10], l=+Inf, u=10, expected [+Inf +Inf +Inf 10 +Inf +Inf] but got [+Inf +Inf +Inf +Inf +Inf 10]",
    "TestWithin":" {[1 2 3 4 5] 5 3}, expected 3, but got -1 and panic: floats: slice length less than 2",
    "TestSumCompensated":" Test_case_3 fails,  Expected 0.1, got 0"
}