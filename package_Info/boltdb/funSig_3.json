{
    "Batch": "func (db *DB) Batch(fn func(*Tx) error) errorBatch calls fn as part of a batch. It behaves similar to Update,\nexcept:\n\n1. concurrent Batch calls can be combined into a single Bolt\ntransaction.\n\n2. the function passed to Batch may be called multiple times,\nregardless of whether it returns error or not.\n\nThis means that Batch function side effects must be idempotent and\ntake permanent effect only after a successful return is seen in\ncaller.\n\nThe maximum batch size and delay can be adjusted with DB.MaxBatchSize\nand DB.MaxBatchDelay, respectively.\n\nBatch is only useful when there are multiple goroutines calling it.\n",
    "Begin": "func (db *DB) Begin(writable bool) (*Tx, error)Begin starts a new transaction.\nMultiple read-only transactions can be used concurrently but only one\nwrite transaction can be used at a time. Starting multiple write transactions\nwill cause the calls to block and be serialized until the current write\ntransaction finishes.\n\nTransactions should not be dependent on one another. Opening a read\ntransaction and a write transaction in the same goroutine can cause the\nwriter to deadlock because the database periodically needs to re-mmap itself\nas it grows and it cannot do that while a read transaction is open.\n\nIf a long running read transaction (for example, a snapshot transaction) is\nneeded, you might want to set DB.InitialMmapSize to a large enough value\nto avoid potential blocking of write transaction.\n\nIMPORTANT: You must close read-only transactions after you are finished or\nelse the database will not reclaim old pages.\n",
    "Close": "func (db *DB) Close() errorClose releases all database resources.\nAll transactions must be closed before closing the database.\n",
    "GoString": "func (db *DB) GoString() stringGoString returns the Go string representation of the database.\n",
    "Info": "func (db *DB) Info() *InfoThis is for internal access to the raw data bytes from the C cursor, use\ncarefully, or not at all.\n",
    "IsReadOnly": "func (db *DB) IsReadOnly() bool",
    "Open": "func Open(path string, mode os.FileMode, options *Options) (*DB, error)Open creates and opens a database at the given path.\nIf the file does not exist then it will be created automatically.\nPassing in nil options will cause Bolt to open the database with the default options.\n",
    "Path": "func (db *DB) Path() stringPath returns the path to currently open database file.\n",
    "Stats": "func (db *DB) Stats() Stats Stats retrieves ongoing performance stats for the database.\nThis is only updated when a transaction closes.\n",
    "String": "func (db *DB) String() stringString returns the string representation of the database.\n",
    "Sub": "func (s *Stats) Sub(other *Stats) StatsSub calculates and returns the difference between two sets of database stats.\nThis is useful when obtaining stats at two different points and time and\nyou need the performance counters that occurred within that time span.\n",
    "Sync": "func (db *DB) Sync() error { return fdatasync(db) }Sync executes fdatasync() against the database file handle.\n\nThis is not necessary under normal operation, however, if you use NoSync\nthen it allows you to force the database file to sync against the disk.\n",
    "Update": "func (db *DB) Update(fn func(*Tx) error) errorUpdate executes a function within the context of a read-write managed transaction.\nIf no error is returned from the function then the transaction is committed.\nIf an error is returned then the entire transaction is rolled back.\nAny error that is returned from the function or returned from the commit is\nreturned from the Update() method.\n\nAttempting to manually commit or rollback within the function will cause a panic.\n",
    "View": "func (db *DB) View(fn func(*Tx) error) errorView executes a function within the context of a managed read-only transaction.\nAny error that is returned from the function is returned from the View() method.\n\nAttempting to manually rollback within the function will cause a panic.\n"
}