{
    "Array": "func (v *Value) Array() ([]*Value, error) Array returns the underlying JSON array for the v.\n\nThe returned array is valid until Parse is called on the Parser returned v.\n\nUse GetArray if you don't need error handling.\n",
    "Bool": "func (v *Value) Bool() (bool, error) Bool returns the underlying JSON bool for the v.\n\nUse GetBool if you don't need error handling.\n",
    "Exists": "func (v *Value) Exists(keys ...string) bool Exists returns true if the field exists for the given keys path.\n\nArray indexes may be represented as decimal numbers in keys.\n",
    "Float64": "func (v *Value) Float64() (float64, error) Float64 returns the underlying JSON number for the v.\n\nUse GetFloat64 if you don't need error handling.\n",
    "Get": "func (v *Value) Get(keys ...string) *Value Get returns the value for the given key in the o.\n\nReturns nil if the value for the given key isn't found.\n\nThe returned value is valid until Parse is called on the Parser returned o.\nGet returns value by the given keys path.\n\nArray indexes may be represented as decimal numbers in keys.\n\nnil is returned for non-existing keys path.\n\nThe returned value is valid until Parse is called on the Parser returned v.\n",
    "GetArray": "func (v *Value) GetArray(keys ...string) []*Value GetArray returns array value by the given keys path.\n\nArray indexes may be represented as decimal numbers in keys.\n\nnil is returned for non-existing keys path or for invalid value type.\n\nThe returned array is valid until Parse is called on the Parser returned v.\n",
    "GetBool": "func (v *Value) GetBool(keys ...string) bool GetBool returns bool value by the given keys path.\n\nArray indexes may be represented as decimal numbers in keys.\n\nfalse is returned for non-existing keys path or for invalid value type.\n",
    "GetFloat64": "func (v *Value) GetFloat64(keys ...string) float64 GetFloat64 returns float64 value by the given keys path.\n\nArray indexes may be represented as decimal numbers in keys.\n\n0 is returned for non-existing keys path or for invalid value type.\n",
    "GetInt": "func (v *Value) GetInt(keys ...string) int GetInt returns int value by the given keys path.\n\nArray indexes may be represented as decimal numbers in keys.\n\n0 is returned for non-existing keys path or for invalid value type.\n",
    "GetInt64": "func (v *Value) GetInt64(keys ...string) int64 GetInt64 returns int64 value by the given keys path.\n\nArray indexes may be represented as decimal numbers in keys.\n\n0 is returned for non-existing keys path or for invalid value type.\n",
    "GetObject": "func (v *Value) GetObject(keys ...string) *Object GetObject returns object value by the given keys path.\n\nArray indexes may be represented as decimal numbers in keys.\n\nnil is returned for non-existing keys path or for invalid value type.\n\nThe returned object is valid until Parse is called on the Parser returned v.\n",
    "GetStringBytes": "func (v *Value) GetStringBytes(keys ...string) []byte GetStringBytes returns string value by the given keys path.\n\nArray indexes may be represented as decimal numbers in keys.\n\nnil is returned for non-existing keys path or for invalid value type.\n\nThe returned string is valid until Parse is called on the Parser returned v.\n",
    "GetUint": "func (v *Value) GetUint(keys ...string) uint GetUint returns uint value by the given keys path.\n\nArray indexes may be represented as decimal numbers in keys.\n\n0 is returned for non-existing keys path or for invalid value type.\n",
    "GetUint64": "func (v *Value) GetUint64(keys ...string) uint64 GetUint64 returns uint64 value by the given keys path.\n\nArray indexes may be represented as decimal numbers in keys.\n\n0 is returned for non-existing keys path or for invalid value type.\n",
    "Int": "func (v *Value) Int() (int, error) Int returns the underlying JSON int for the v.\n\nUse GetInt if you don't need error handling.\n",
    "Int64": "func (v *Value) Int64() (int64, error) Int64 returns the underlying JSON int64 for the v.\n\nUse GetInt64 if you don't need error handling.\n",
    "Len": "func (o *Object) Len() int Len returns the number of items in the o.\n",
    "MarshalTo": "func (v *Value) MarshalTo(dst []byte) []byte MarshalTo appends marshaled o to dst and returns the result.\nMarshalTo appends marshaled v to dst and returns the result.\n",
    "Object": "func (v *Value) Object() (*Object, error) Object returns the underlying JSON object for the v.\n\nThe returned object is valid until Parse is called on the Parser returned v.\n\nUse GetObject if you don't need error handling.\n",
    "Parse": "func (p *Parser) Parse(s string) (*Value, error) Parse parses s containing JSON.\n\nThe returned value is valid until the next call to Parse*.\n\nUse Scanner if a stream of JSON values must be parsed.\n",
    "ParseBytes": "func (p *Parser) ParseBytes(b []byte) (*Value, error) ParseBytes parses b containing JSON.\n\nThe returned Value is valid until the next call to Parse*.\n\nUse Scanner if a stream of JSON values must be parsed.\n",
    "String": "func (t Type) String() string String returns string representation for the o.\n\nThis function is for debugging purposes only. It isn't optimized for speed.\nSee MarshalTo instead.\nString returns string representation of the v.\n\nThe function is for debugging purposes only. It isn't optimized for speed.\nSee MarshalTo instead.\n\nDon't confuse this function with StringBytes, which must be called\nfor obtaining the underlying JSON string for the v.\nString returns string representation of t.\n",
    "StringBytes": "func (v *Value) StringBytes() ([]byte, error) StringBytes returns the underlying JSON string for the v.\n\nThe returned string is valid until Parse is called on the Parser returned v.\n\nUse GetStringBytes if you don't need error handling.\n",
    "Type": "func (v *Value) Type() Type Type returns the type of the v.\n",
    "Uint": "func (v *Value) Uint() (uint, error) Uint returns the underlying JSON uint for the v.\n\nUse GetInt if you don't need error handling.\n",
    "Uint64": "func (v *Value) Uint64() (uint64, error) Uint64 returns the underlying JSON uint64 for the v.\n\nUse GetInt64 if you don't need error handling.\n",
    "Visit": "func (o *Object) Visit(f func(key []byte, v *Value)) Visit calls f for each item in the o in the original order\nof the parsed JSON.\n\nf cannot hold key and/or v after returning.\n",
    "escapeString": "func escapeString(dst []byte, s string) []byte ",
    "getKV": "func (o *Object) getKV() *kv ",
    "getValue": "func (c *cache) getValue() *Value ",
    "hasSpecialChars": "func hasSpecialChars(s string) bool ",
    "parseArray": "func parseArray(s string, c *cache, depth int) (*Value, string, error) ",
    "parseObject": "func parseObject(s string, c *cache, depth int) (*Value, string, error) ",
    "parseRawKey": "func parseRawKey(s string) (string, string, error) parseRawKey is similar to parseRawString, but is optimized\nfor small-sized keys without escape sequences.\n",
    "parseRawNumber": "func parseRawNumber(s string) (string, string, error) ",
    "parseRawString": "func parseRawString(s string) (string, string, error) ",
    "parseValue": "func parseValue(s string, c *cache, depth int) (*Value, string, error) ",
    "reset": "func (o *Object) reset() ",
    "skipWS": "func skipWS(s string) string ",
    "skipWSSlow": "func skipWSSlow(s string) string ",
    "unescapeKeys": "func (o *Object) unescapeKeys() ",
    "unescapeStringBestEffort": "func unescapeStringBestEffort(s string) string "
}