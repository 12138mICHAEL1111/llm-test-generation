{
    "Add": "func Add(dst, s []float64) Add adds, element-wise, the elements of s and dst, and stores the result in dst.\nIt panics if the argument lengths do not match.\n",
    "AddConst": "func AddConst(c float64, dst []float64) AddConst adds the scalar c to all of the values in dst.\n",
    "AddScaled": "func AddScaled(dst []float64, alpha float64, s []float64) AddScaled performs dst = dst + alpha * s.\nIt panics if the slice argument lengths do not match.\n",
    "AddScaledTo": "func AddScaledTo(dst, y []float64, alpha float64, s []float64) []float64 AddScaledTo performs dst = y + alpha * s, where alpha is a scalar,\nand dst, y and s are all slices.\nIt panics if the slice argument lengths do not match.\n\nAt the return of the function, dst[i] = y[i] + alpha * s[i]\n",
    "AddTo": "func AddTo(dst, s, t []float64) []float64 AddTo adds, element-wise, the elements of s and t and\nstores the result in dst.\nIt panics if the argument lengths do not match.\n",
    "Argsort": "func Argsort(dst []float64, inds []int) Argsort sorts the elements of dst while tracking their original order.\nAt the conclusion of Argsort, dst will contain the original elements of dst\nbut sorted in increasing order, and inds will contain the original position\nof the elements in the slice such that dst[i] = origDst[inds[i]].\nIt panics if the argument lengths do not match.\n",
    "ArgsortStable": "func ArgsortStable(dst []float64, inds []int) ArgsortStable sorts the elements of dst while tracking their original order and\nkeeping the original order of equal elements. At the conclusion of ArgsortStable,\ndst will contain the original elements of dst but sorted in increasing order,\nand inds will contain the original position of the elements in the slice such\nthat dst[i] = origDst[inds[i]].\nIt panics if the argument lengths do not match.\n",
    "Count": "func Count(f func(float64) bool, s []float64) int Count applies the function f to every element of s and returns the number\nof times the function returned true.\n",
    "CumProd": "func CumProd(dst, s []float64) []float64 CumProd finds the cumulative product of the first i elements in\ns and puts them in place into the ith element of the\ndestination dst.\nIt panics if the argument lengths do not match.\n\nAt the return of the function, dst[i] = s[i] * s[i-1] * s[i-2] * ...\n",
    "CumSum": "func CumSum(dst, s []float64) []float64 CumSum finds the cumulative sum of the first i elements in\ns and puts them in place into the ith element of the\ndestination dst.\nIt panics if the argument lengths do not match.\n\nAt the return of the function, dst[i] = s[i] + s[i-1] + s[i-2] + ...\n",
    "Distance": "func Distance(s, t []float64, L float64) float64 Distance computes the L-norm of s - t. See Norm for special cases.\nIt panics if the slice argument lengths do not match.\n",
    "Div": "func Div(dst, s []float64) Div performs element-wise division dst / s\nand stores the value in dst.\nIt panics if the argument lengths do not match.\n",
    "DivTo": "func DivTo(dst, s, t []float64) []float64 DivTo performs element-wise division s / t\nand stores the value in dst.\nIt panics if the argument lengths do not match.\n",
    "Dot": "func Dot(s1, s2 []float64) float64 Dot computes the dot product of s1 and s2, i.e.\nsum_{i = 1}^N s1[i]*s2[i].\nIt panics if the argument lengths do not match.\n",
    "Equal": "func Equal(s1, s2 []float64) bool Equal returns true when the slices have equal lengths and\nall elements are numerically identical.\n",
    "EqualApprox": "func EqualApprox(s1, s2 []float64, tol float64) bool EqualApprox returns true when the slices have equal lengths and\nall element pairs have an absolute tolerance less than tol or a\nrelative tolerance less than tol.\n",
    "EqualFunc": "func EqualFunc(s1, s2 []float64, f func(float64, float64) bool) bool EqualFunc returns true when the slices have the same lengths\nand the function returns true for all element pairs.\n",
    "EqualLengths": "func EqualLengths(slices ...[]float64) bool EqualLengths returns true when all of the slices have equal length,\nand false otherwise. It also returns true when there are no input slices.\n",
    "Find": "func Find(inds []int, f func(float64) bool, s []float64, k int) ([]int, error) Find applies f to every element of s and returns the indices of the first\nk elements for which the f returns true, or all such elements\nif k \u003c 0.\nFind will reslice inds to have 0 length, and will append\nfound indices to inds.\nIf k \u003e 0 and there are fewer than k elements in s satisfying f,\nall of the found elements will be returned along with an error.\nAt the return of the function, the input inds will be in an undetermined state.\n",
    "HasNaN": "func HasNaN(s []float64) bool HasNaN returns true when the slice s has any values that are NaN and false\notherwise.\n",
    "Len": "func (a argsort) Len() int ",
    "Less": "func (a argsort) Less(i, j int) bool ",
    "LogSpan": "func LogSpan(dst []float64, l, u float64) []float64 LogSpan returns a set of n equally spaced points in log space between,\nl and u where N is equal to len(dst). The first element of the\nresulting dst will be l and the final element of dst will be u.\nIt panics if the length of dst is less than 2.\nNote that this call will return NaNs if either l or u are negative, and\nwill return all zeros if l or u is zero.\nAlso returns the mutated slice dst, so that it can be used in range, like:\n\n\tfor i, x := range LogSpan(dst, l, u) { ... }\n",
    "LogSumExp": "func LogSumExp(s []float64) float64 LogSumExp returns the log of the sum of the exponentials of the values in s.\nPanics if s is an empty slice.\n",
    "Max": "func Max(s []float64) float64 Max returns the maximum value in the input slice. If the slice is empty, Max will panic.\n",
    "MaxIdx": "func MaxIdx(s []float64) int MaxIdx returns the index of the maximum value in the input slice. If several\nentries have the maximum value, the first such index is returned.\nIt panics if s is zero length.\n",
    "Min": "func Min(s []float64) float64 Min returns the minimum value in the input slice.\nIt panics if s is zero length.\n",
    "MinIdx": "func MinIdx(s []float64) int MinIdx returns the index of the minimum value in the input slice. If several\nentries have the minimum value, the first such index is returned.\nIt panics if s is zero length.\n",
    "Mul": "func Mul(dst, s []float64) Mul performs element-wise multiplication between dst\nand s and stores the value in dst.\nIt panics if the argument lengths do not match.\n",
    "MulTo": "func MulTo(dst, s, t []float64) []float64 MulTo performs element-wise multiplication between s\nand t and stores the value in dst.\nIt panics if the argument lengths do not match.\n",
    "NearestIdx": "func NearestIdx(s []float64, v float64) int NearestIdx returns the index of the element in s\nwhose value is nearest to v. If several such\nelements exist, the lowest index is returned.\nIt panics if s is zero length.\n",
    "NearestIdxForSpan": "func NearestIdxForSpan(n int, l, u float64, v float64) int NearestIdxForSpan return the index of a hypothetical vector created\nby Span with length n and bounds l and u whose value is closest\nto v. That is, NearestIdxForSpan(n, l, u, v) is equivalent to\nNearest(Span(make([]float64, n),l,u),v) without an allocation.\nIt panics if n is less than two.\n",
    "Norm": "func Norm(s []float64, L float64) float64 Norm returns the L norm of the slice S, defined as\n(sum_{i=1}^N s[i]^L)^{1/L}\nSpecial cases:\nL = math.Inf(1) gives the maximum absolute value.\nDoes not correctly compute the zero norm (use Count).\n",
    "Prod": "func Prod(s []float64) float64 Prod returns the product of the elements of the slice.\nReturns 1 if len(s) = 0.\n",
    "Reverse": "func Reverse(s []float64) Reverse reverses the order of elements in the slice.\n\nDeprecated: This function simply calls [slices.Reverse].\n",
    "Same": "func Same(s, t []float64) bool Same returns true when the input slices have the same length and all\nelements have the same value with NaN treated as the same.\n",
    "Scale": "func Scale(c float64, dst []float64) Scale multiplies every element in dst by the scalar c.\n",
    "ScaleTo": "func ScaleTo(dst []float64, c float64, s []float64) []float64 ScaleTo multiplies the elements in s by c and stores the result in dst.\nIt panics if the slice argument lengths do not match.\n",
    "Span": "func Span(dst []float64, l, u float64) []float64 Span returns a set of N equally spaced points between l and u, where N\nis equal to the length of the destination. The first element of the destination\nis l, the final element of the destination is u.\nIt panics if the length of dst is less than 2.\n\nSpan also returns the mutated slice dst, so that it can be used in range expressions,\nlike:\n\n\tfor i, x := range Span(dst, l, u) { ... }\n",
    "Sub": "func Sub(dst, s []float64) Sub subtracts, element-wise, the elements of s from dst.\nIt panics if the argument lengths do not match.\n",
    "SubTo": "func SubTo(dst, s, t []float64) []float64 SubTo subtracts, element-wise, the elements of t from s and\nstores the result in dst.\nIt panics if the argument lengths do not match.\n",
    "Sum": "func Sum(s []float64) float64 Sum returns the sum of the elements of the slice.\n",
    "SumCompensated": "func SumCompensated(s []float64) float64 SumCompensated returns the sum of the elements of the slice calculated with greater\naccuracy than Sum at the expense of additional computation.\n",
    "Swap": "func (a argsort) Swap(i, j int) ",
    "Within": "func Within(s []float64, v float64) int Within returns the first index i where s[i] \u003c= v \u003c s[i+1]. Within panics if:\n  - len(s) \u003c 2\n  - s is not sorted\n"
}