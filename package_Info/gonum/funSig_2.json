{
    "Add": "func Add(dst, s []float64) ",
    "AddTo": "func AddTo(dst, s, t []float64) []float64 ",
    "AddConst": "func AddConst(c float64, dst []float64) ",
    "AddScaled": "func AddScaled(dst []float64, alpha float64, s []float64) ",
    "AddScaledTo": "func AddScaledTo(dst, y []float64, alpha float64, s []float64) []float64 ",
    "Len": "func (a argsort) Len() int ",
    "Less": "func (a argsort) Less(i, j int) bool ",
    "Swap": "func (a argsort) Swap(i, j int) ",
    "Argsort": "func Argsort(dst []float64, inds []int) ",
    "ArgsortStable": "func ArgsortStable(dst []float64, inds []int) ",
    "Count": "func Count(f func(float64) bool, s []float64) int ",
    "CumProd": "func CumProd(dst, s []float64) []float64 ",
    "CumSum": "func CumSum(dst, s []float64) []float64 ",
    "Distance": "func Distance(s, t []float64, L float64) float64 ",
    "Div": "func Div(dst, s []float64) ",
    "DivTo": "func DivTo(dst, s, t []float64) []float64 ",
    "Dot": "func Dot(s1, s2 []float64) float64 ",
    "Equal": "func Equal(s1, s2 []float64) bool ",
    "EqualApprox": "func EqualApprox(s1, s2 []float64, tol float64) bool ",
    "EqualFunc": "func EqualFunc(s1, s2 []float64, f func(float64, float64) bool) bool ",
    "EqualLengths": "func EqualLengths(slices ...[]float64) bool ",
    "Find": "func Find(inds []int, f func(float64) bool, s []float64, k int) ([]int, error) ",
    "HasNaN": "func HasNaN(s []float64) bool ",
    "LogSpan": "func LogSpan(dst []float64, l, u float64) []float64 ",
    "LogSumExp": "func LogSumExp(s []float64) float64 ",
    "Max": "func Max(s []float64) float64 ",
    "MaxIdx": "func MaxIdx(s []float64) int ",
    "Min": "func Min(s []float64) float64 ",
    "MinIdx": "func MinIdx(s []float64) int ",
    "Mul": "func Mul(dst, s []float64) ",
    "MulTo": "func MulTo(dst, s, t []float64) []float64 ",
    "NearestIdx": "func NearestIdx(s []float64, v float64) int ",
    "NearestIdxForSpan": "func NearestIdxForSpan(n int, l, u float64, v float64) int ",
    "Norm": "func Norm(s []float64, L float64) float64 ",
    "Prod": "func Prod(s []float64) float64 ",
    "Reverse": "func Reverse(s []float64) ",
    "Same": "func Same(s, t []float64) bool ",
    "Scale": "func Scale(c float64, dst []float64) ",
    "ScaleTo": "func ScaleTo(dst []float64, c float64, s []float64) []float64 ",
    "Span": "func Span(dst []float64, l, u float64) []float64 ",
    "Sub": "func Sub(dst, s []float64) ",
    "SubTo": "func SubTo(dst, s, t []float64) []float64 ",
    "Sum": "func Sum(s []float64) float64 ",
    "Within": "func Within(s []float64, v float64) int ",
    "SumCompensated": "func SumCompensated(s []float64) float64 "
}