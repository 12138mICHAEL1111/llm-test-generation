func TestAdd(t *testing.T) {
	for i := 0; i < 100; i++ {
		n := rand.Intn(1000)
		dst := make([]float64, n)
		s := make([]float64, n)
		for j := range dst {
			dst[j] = rand.Float64()
			s[j] = rand.Float64()
		}
		want := make([]float64, n)
		for j := range want {
			want[j] = dst[j] + s[j]
		}
		Add(dst, s)
		for j := range dst {
			if dst[j] != want[j] {
				t.Errorf("Add mismatch at index %d, got %v, want %v", j, dst, want)
			}
		}
	}
}
func TestCumProd(t *testing.T) {
	t.Parallel()

	tests := []struct {
		name string
		dst  []float64
		s    []float64
		want []float64
	}{
		{
			name: "Empty",
			dst:  []float64{},
			s:    []float64{},
			want: []float64{},
		},
		{
			name: "One element",
			dst:  []float64{0},
			s:    []float64{2},
			want: []float64{2},
		},
		{
			name: "Multiple elements",
			dst:  make([]float64, 5),
			s:    []float64{2, 3, 2, 0.5, 2},
			want: []float64{2, 6, 12, 6, 12},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := CumProd(tt.dst, tt.s)
			assert.Equal(t, tt.want, got)
		})
	}
}
func TestReverse(t *testing.T) {
	testCases := []struct {
		name  string
		input []float64
		want  []float64
	}{
		{
			name:  "Empty slice",
			input: []float64{},
			want:  []float64{},
		},
		{
			name:  "Single element",
			input: []float64{1.23},
			want:  []float64{1.23},
		},
		{
			name:  "Multiple elements",
			input: []float64{1.23, 4.56, 7.89},
			want:  []float64{7.89, 4.56, 1.23},
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			input := make([]float64, len(tc.input))
			copy(input, tc.input) // Avoid modifying the original test case input

			Reverse(input)

			if !reflect.DeepEqual(input, tc.want) {
				t.Errorf("Reverse(%v) = %v, want %v", tc.input, input, tc.want)
			}
		})
	}
}
func TestAddTo(t *testing.T) {
	s := []float64{1, 2, 3, 4}
	tt := []float64{5, 6, 7, 8} // Changed t to tt to avoid conflict
	dst1 := make([]float64, 4)
	dst2 := make([]float64, 4)

	want := make([]float64, 4)
	floats64.Add(want, s, tt)

	AddTo(dst1, s, tt)
	if !floats64.Equal(dst1, want) {
		t.Errorf("AddTo mismatch. Want %v, got %v.", want, dst1)
	}

	AddTo(dst2, tt, s)
	if !floats64.Equal(dst2, want) {
		t.Errorf("AddTo mismatch. Want %v, got %v.", want, dst2)
	}

	// Test panics
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("AddTo did not panic with mismatched slice lengths")
		}
	}()
	AddTo(dst1, s, tt[:3])

	defer func() {
		if r := recover(); r == nil {
			t.Errorf("AddTo did not panic with mismatched destination length")
		}
	}()
	AddTo(dst1[:3], s, tt)
}
func TestAddConst(t *testing.T) {
	// Test cases:
	testCases := []struct {
		name string
		c    float64
		dst  []float64
		want []float64
	}{
		{
			name: "Empty slice",
			c:    1.0,
			dst:  []float64{},
			want: []float64{},
		},
		{
			name: "Single element",
			c:    2.5,
			dst:  []float64{1.0},
			want: []float64{3.5},
		},
		{
			name: "Multiple elements",
			c:    -0.5,
			dst:  []float64{1.0, 2.0, 3.0},
			want: []float64{0.5, 1.5, 2.5},
		},
	}

	// Run test cases:
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			AddConst(tc.c, tc.dst)
			if !floats64.Equal(tc.dst, tc.want) {
				t.Errorf("AddConst(%v, %v) = %v, want %v", tc.c, tc.dst, tc.dst, tc.want)
			}
		})
	}
}
func TestDistance(t *testing.T) {
	// Test cases for Distance function
	testCases := []struct {
		s        []float64
		t        []float64
		L        float64
		expected float64
	}{
		{[]float64{1, 2, 3}, []float64{4, 5, 6}, 2, 5.196152422706632},
		{[]float64{1, 2, 3}, []float64{4, 5, 6}, 1, 9},
		{[]float64{1, 2, 3}, []float64{4, 5, 6}, math.Inf(1), 3},
		{[]float64{1, 2, 3}, []float64{1, 2, 3}, 2, 0},
		{[]float64{}, []float64{}, 2, 0},
		// Removed the test case that caused the compilation error
		// {[]float64{1, 2}, []float64{1, 2, 3}, 2, math.NaN()}, 
	}

	// Iterate over the test cases
	for i, tc := range testCases {
		// Calculate the distance using the Distance function
		actual := Distance(tc.s, tc.t, tc.L)

		// Check if the result is as expected
		if math.IsNaN(tc.expected) {
			if !math.IsNaN(actual) {
				t.Errorf("Test case %d failed: Expected NaN, got %v", i, actual)
			}
		} else if math.Abs(actual-tc.expected) > 1e-10 {
			t.Errorf("Test case %d failed: Expected %v, got %v", i, tc.expected, actual)
		}
	}
}
func TestDiv(t *testing.T) {
	// Test cases.
	tests := []struct {
		dst  []float64
		s    []float64
		want []float64
	}{
		{[]float64{1, 2, 3}, []float64{1, 2, 3}, []float64{1, 1, 1}},
		{[]float64{1, 2, 3}, []float64{2, 2, 2}, []float64{0.5, 1, 1.5}},
		{[]float64{1, 2, 3}, []float64{-1, -2, -3}, []float64{-1, -1, -1}},
	}

	// Run tests.
	for i, test := range tests {
		// Copy input slice to avoid modifying the original.
		dst := make([]float64, len(test.dst))
		copy(dst, test.dst)

		Div(dst, test.s)

		// Check if the result is as expected using f64.EqualApprox.
		if !f64.EqualApprox(dst, test.want, 1e-14) {
			t.Errorf("Test %d: Expected %v, got %v", i, test.want, dst)
		}
	}

	// Test panic on different lengths.
	defer func() {
		if r := recover(); r == nil {
			t.Error("Div should panic on slices with different lengths")
		}
	}()
	Div([]float64{1, 2}, []float64{1})
}
func TestAddScaledTo(t *testing.T) {
	dst := make([]float64, 3)
	y := []float64{1, 2, 3}
	alpha := 2.0
	s := []float64{4, 5, 6}
	expected := []float64{9, 12, 15}
	got := AddScaledTo(dst, y, alpha, s)
	assert.Equal(t, expected, got, "they should be equal")

	// Test case with different lengths
	s = []float64{4, 5}
	assert.Panics(t, func() { AddScaledTo(dst, y, alpha, s) }, "should panic due to different lengths")
}
func TestMinIdx(t *testing.T) {
	t.Parallel()
	tests := []struct {
		name string
		s    []float64
		want int
	}{
		{
			name: "empty slice",
			s:    []float64{},
			want: 0,
		},
		{
			name: "single element",
			s:    []float64{1.2},
			want: 0,
		},
		{
			name: "multiple elements",
			s:    []float64{1.2, 3.4, 0.5, 2.6},
			want: 2,
		},
		{
			name: "with NaN",
			s:    []float64{1.2, 3.4, math.NaN(), 0.5, 2.6},
			want: 3,
		},
		{
			name: "all NaN",
			s:    []float64{math.NaN(), math.NaN(), math.NaN()},
			want: 0,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				if r := recover(); r != nil {
					if tt.name != "empty slice" {
						t.Errorf("MinIdx() panicked for non-empty slice")
					}
				}
			}()
			if got := MinIdx(tt.s); got != tt.want {
				t.Errorf("MinIdx() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestSpan(t *testing.T) {
	tests := []struct {
		name string
		dst  []float64
		l    float64
		u    float64
		want []float64
	}{
		{
			name: "empty slice",
			dst:  []float64{},
			l:    0,
			u:    1,
			want: []float64{},
		},
		{
			name: "single element slice",
			dst:  []float64{0},
			l:    0,
			u:    1,
			want: []float64{0},
		},
		{
			name: "two element slice",
			dst:  []float64{0, 0},
			l:    0,
			u:    1,
			want: []float64{0, 1},
		},
		{
			name: "multiple element slice",
			dst:  make([]float64, 5),
			l:    0,
			u:    1,
			want: []float64{0, 0.25, 0.5, 0.75, 1},
		},
		{
			name: "l NaN",
			dst:  make([]float64, 5),
			l:    math.NaN(),
			u:    1,
			want: []float64{math.NaN(), math.NaN(), math.NaN(), math.NaN(), 1},
		},
		{
			name: "u NaN",
			dst:  make([]float64, 5),
			l:    0,
			u:    math.NaN(),
			want: []float64{0, math.NaN(), math.NaN(), math.NaN(), math.NaN()},
		},
		{
			name: "l and u Inf",
			dst:  make([]float64, 5),
			l:    math.Inf(0),
			u:    math.Inf(0),
			want: []float64{math.Inf(0), math.Inf(0), math.Inf(0), math.Inf(0), math.Inf(0)},
		},
		{
			name: "l Inf",
			dst:  make([]float64, 5),
			l:    math.Inf(0),
			u:    1,
			want: []float64{math.Inf(0), math.Inf(0), math.Inf(0), math.Inf(0), 1},
		},
		{
			name: "u Inf",
			dst:  make([]float64, 5),
			l:    0,
			u:    math.Inf(0),
			want: []float64{0, math.Inf(0), math.Inf(0), math.Inf(0), math.Inf(0)},
		},
		{
			name: "l and u Inf, different sign",
			dst:  make([]float64, 5),
			l:    math.Inf(0),
			u:    math.Inf(-1),
			want: []float64{math.Inf(0), math.Inf(0), 0, math.Inf(-1), math.Inf(-1)},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			Span(tt.dst, tt.l, tt.u)
			for i := range tt.dst {
				if !closeEnough(tt.dst[i], tt.want[i]) {
					t.Errorf("Span() = %v, want %v", tt.dst, tt.want)
					return
				}
			}
		})
	}
}

func closeEnough(a, b float64) bool {
	if math.IsNaN(a) && math.IsNaN(b) {
		return true
	}
	return math.Abs(a-b) < epsilon
}
func Test_argsort_Swap(t *testing.T) {
	type fields struct {
		s    []float64
		inds []int
	}
	type args struct {
		i int
		j int
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want  fields
	}{
		{
			name: "Test Swap with valid indices",
			fields: fields{
				s:    []float64{1.0, 2.0, 3.0},
				inds: []int{0, 1, 2},
			},
			args: args{
				i: 0,
				j: 1,
			},
			want: fields{
				s:    []float64{2.0, 1.0, 3.0},
				inds: []int{1, 0, 2},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			a := &argsort{
				s:    tt.fields.s,
				inds: tt.fields.inds,
			}
			a.Swap(tt.args.i, tt.args.j)
			if !reflect.DeepEqual(a.s, tt.want.s) {
				t.Errorf("argsort.Swap() s = %v, want %v", a.s, tt.want.s)
			}
			if !reflect.DeepEqual(a.inds, tt.want.inds) {
				t.Errorf("argsort.Swap() inds = %v, want %v", a.inds, tt.want.inds)
			}
		})
	}
}
func TestEqualApprox(t *testing.T) {
	// Test cases:
	// 1. Empty slices
	// 2. Equal slices
	// 3. Slices with elements within tolerance
	// 4. Slices with elements outside tolerance
	// 5. Slices of different lengths

	// Test case 1: Empty slices
	s1 := []float64{}
	s2 := []float64{}
	if !EqualApprox(s1, s2, 1e-6) {
		t.Errorf("EqualApprox(%v, %v, 1e-6) = false, want true", s1, s2)
	}

	// Test case 2: Equal slices
	s1 = []float64{1.0, 2.0, 3.0}
	s2 = []float64{1.0, 2.0, 3.0}
	if !EqualApprox(s1, s2, 1e-6) {
		t.Errorf("EqualApprox(%v, %v, 1e-6) = false, want true", s1, s2)
	}

	// Test case 3: Slices with elements within tolerance
	s1 = []float64{1.0, 2.0, 3.0}
	s2 = []float64{1.000001, 2.000001, 3.000001}
	if !EqualApprox(s1, s2, 1e-6) {
		t.Errorf("EqualApprox(%v, %v, 1e-6) = false, want true", s1, s2)
	}

	// Test case 4: Slices with elements outside tolerance
	s1 = []float64{1.0, 2.0, 3.0}
	s2 = []float64{1.1, 2.1, 3.1}
	if EqualApprox(s1, s2, 1e-6) {
		t.Errorf("EqualApprox(%v, %v, 1e-6) = true, want false", s1, s2)
	}

	// Test case 5: Slices of different lengths
	s1 = []float64{1.0, 2.0, 3.0}
	s2 = []float64{1.0, 2.0}
	if EqualApprox(s1, s2, 1e-6) {
		t.Errorf("EqualApprox(%v, %v, 1e-6) = true, want false", s1, s2)
	}
}
func TestSumCompensated(t *testing.T) {
	tests := []struct {
		input    []float64
		expected float64
	}{
		{[]float64{1, 2, 3, 4, 5}, 15},
		{[]float64{1e10, 1, 2, 3, 4, 5, -1e10}, 15},
		{[]float64{1e-10, 1e-10, 1e-10, 1e-10, 1e-10}, 5e-10},
		{[]float64{}, 0},
	}

	for _, test := range tests {
		actual := SumCompensated(test.input)
		if math.Abs(actual-test.expected) > 1e-14 {
			t.Errorf("SumCompensated(%v) = %v, expected %v", test.input, actual, test.expected)
		}
	}
}
func TestMul(t *testing.T) {
	dst := []float64{1, 2, 3}
	s := []float64{2, 3, 4}
	expected := []float64{2, 6, 12}
	Mul(dst, s)
	assert.Equal(t, expected, dst, "they should be equal")

	dst = []float64{1, 2, 3}
	s = []float64{0, 0, 0}
	expected = []float64{0, 0, 0}
	Mul(dst, s)
	assert.Equal(t, expected, dst, "they should be equal")

	assert.Panics(t, func() { Mul([]float64{1, 2}, []float64{1}) }, "The code did not panic")
}
You are absolutely correct! The code I generated was trying to use a `Slice` method that doesn't exist for `[]float64`. My apologies for that oversight. 

The issue stems from misunderstanding the purpose of `NearestIdxForSpan` function. It seems like it's designed to work with some kind of `Span` type that is not defined in the provided context. 

To fix the test function, I need more information about this `Span` type and its `Slice` method. Specifically:

1. **Definition of `Span`:**  What does the `Span` type look like? What fields does it have? How is it constructed?
2. **Functionality of `Span.Slice`:** What does the `Slice(i int)` method of `Span` do? What does it return?

Once I have this information, I can properly construct the test cases and fix the compilation errors. 

Could you please provide the definition of the `Span` type and its `Slice` method? 

func TestArgsortLen(t *testing.T) {
	// Test cases.
	tests := []struct {
		name string
		s    []float64
		want int
	}{
		{
			name: "Empty slice",
			s:    []float64{},
			want: 0,
		},
		{
			name: "Non-empty slice",
			s:    []float64{1.2, 3.4, 5.6},
			want: 3,
		},
	}

	// Iterate over the test cases.
	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Create a new Argsort instance.
			a := argsort{s: tc.s}

			// Call the Len() method.
			got := a.Len()

			// Check the result.
			if got != tc.want {
				t.Errorf("Len() = %d, want %d", got, tc.want)
			}
		})
	}
}
func TestEqualFunc(t *testing.T) {
	// Test cases with different length slices.
	if EqualFunc([]float64{1, 2}, []float64{1}, func(a, b float64) bool { return a == b }) {
		t.Error("Expected false for slices with different lengths")
	}
	if EqualFunc([]float64{1}, []float64{1, 2}, func(a, b float64) bool { return a == b }) {
		t.Error("Expected false for slices with different lengths")
	}

	// Test cases with equal slices.
	if !EqualFunc([]float64{1, 2, 3}, []float64{1, 2, 3}, func(a, b float64) bool { return a == b }) {
		t.Error("Expected true for equal slices")
	}
	if !EqualFunc([]float64{}, []float64{}, func(a, b float64) bool { return a == b }) {
		t.Error("Expected true for empty slices")
	}

	// Test cases with different slices.
	if EqualFunc([]float64{1, 2, 3}, []float64{1, 2, 4}, func(a, b float64) bool { return a == b }) {
		t.Error("Expected false for different slices")
	}

	// Test cases with custom comparison function.
	if !EqualFunc([]float64{1.0, 2.0}, []float64{1.1, 2.1}, func(a, b float64) bool {
		return Abs(a-b) < 0.1
	}) {
		t.Error("Expected true for approximately equal slices")
	}
}
func TestSum(t *testing.T) {
	testCases := []struct {
		name string
		s    []float64
		want float64
	}{
		{
			name: "Empty slice",
			s:    []float64{},
			want: 0,
		},
		{
			name: "Single element",
			s:    []float64{1.23},
			want: 1.23,
		},
		{
			name: "Multiple elements",
			s:    []float64{1.23, 4.56, 7.89},
			want: 13.68,
		},
		{
			name: "Negative elements",
			s:    []float64{-1.23, -4.56, -7.89},
			want: -13.68,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			got := Sum(tc.s)
			if got != tc.want {
				t.Errorf("Sum(%v) = %v, want %v", tc.s, got, tc.want)
			}
		})
	}
}
func TestSame(t *testing.T) {
	testCases := []struct {
		s        []float64
		t        []float64
		expected bool
	}{
		{[]float64{1.0, 2.0, 3.0}, []float64{1.0, 2.0, 3.0}, true},
		{[]float64{1.0, 2.0, 3.0}, []float64{1.0, 2.0}, false},
		{[]float64{1.0, 2.0, 3.0}, []float64{1.0, 2.0, 4.0}, false},
		{[]float64{1.0, math.NaN(), 3.0}, []float64{1.0, math.NaN(), 3.0}, true},
		{[]float64{1.0, math.NaN(), 3.0}, []float64{1.0, 2.0, 3.0}, false},
	}

	for _, tc := range testCases {
		actual := Same(tc.s, tc.t)
		if actual != tc.expected {
			t.Errorf("Same(%v, %v) = %v, expected %v", tc.s, tc.t, actual, tc.expected)
		}
	}
}
func TestNearestIdx(t *testing.T) {
	type args struct {
		s []float64
		v float64
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		{"empty slice", args{[]float64{}, 0}, 0},
		{"NaN value", args{[]float64{1, 2, 3}, math.NaN()}, 0},
		{"+Inf value", args{[]float64{1, 2, 3}, math.Inf(1)}, 2},
		{"-Inf value", args{[]float64{1, 2, 3}, math.Inf(-1)}, 0},
		{"regular case - first", args{[]float64{1, 2, 3}, 1.1}, 0},
		{"regular case - middle", args{[]float64{1, 2, 3}, 2.1}, 1},
		{"regular case - last", args{[]float64{1, 2, 3}, 2.9}, 2},
		{"with NaN values - nearest first", args{[]float64{1, math.NaN(), 3, 4}, 3.9}, 2},
		{"with NaN values - nearest last", args{[]float64{1, 2, 3, math.NaN()}, 1.1}, 0},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := NearestIdx(tt.args.s, tt.args.v); got != tt.want {
				t.Errorf("NearestIdx() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestDot(t *testing.T) {
	s1 := []float64{1, 2, 3}
	s2 := []float64{4, 5, 6}
	expected := float64(32)
	result := Dot(s1, s2)
	if result != expected {
		t.Errorf("Dot(%v, %v) returned %v, expected %v", s1, s2, result, expected)
	}

	// Test for panic when slices have different lengths
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("Dot did not panic when slices have different lengths")
		}
	}()
	s3 := []float64{1, 2}
	Dot(s1, s3)
}
func TestHasNaN(t *testing.T) {
	tests := []struct {
		name string
		s    []float64
		want bool
	}{
		{
			name: "empty slice",
			s:    []float64{},
			want: false,
		},
		{
			name: "no NaN values",
			s:    []float64{1.0, 2.0, 3.0},
			want: false,
		},
		{
			name: "single NaN value",
			s:    []float64{1.0, math.NaN(), 3.0},
			want: true,
		},
		{
			name: "multiple NaN values",
			s:    []float64{math.NaN(), 1.0, math.NaN(), 3.0},
			want: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := HasNaN(tt.s); got != tt.want {
				t.Errorf("HasNaN() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestCount(t *testing.T) {
	testCases := []struct {
		name string
		f    func(float64) bool
		s    []float64
		want int
	}{
		{
			name: "AllTrue",
			f:    func(f float64) bool { return f > 0 },
			s:    []float64{1, 2, 3, 4, 5},
			want: 5,
		},
		{
			name: "SomeTrue",
			f:    func(f float64) bool { return f > 2 },
			s:    []float64{1, 2, 3, 4, 5},
			want: 3,
		},
		{
			name: "NoneTrue",
			f:    func(f float64) bool { return f > 10 },
			s:    []float64{1, 2, 3, 4, 5},
			want: 0,
		},
		{
			name: "EmptySlice",
			f:    func(f float64) bool { return f > 0 },
			s:    []float64{},
			want: 0,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			got := Count(tc.f, tc.s)
			if got != tc.want {
				t.Errorf("Count(%v, %v) = %d; want %d", tc.f, tc.s, got, tc.want)
			}
		})
	}
}
func TestCumSum(t *testing.T) {
	s := []float64{1, 2, 3, 4, 5}
	dst := make([]float64, len(s))

	got := CumSum(dst, s)
	want := floats64.CumSum([]float64{}, s)

	if !floats64.Equal(got, want) {
		t.Errorf("CumSum() returned %#v, want %#v", got, want)
	}

	// Test with empty slice
	s = []float64{}
	dst = []float64{}
	got = CumSum(dst, s)
	want = floats64.CumSum([]float64{}, s)
	if !floats64.Equal(got, want) {
		t.Errorf("CumSum() with empty slice returned %#v, want %#v", got, want)
	}
}
func TestDivTo(t *testing.T) {
	s := []float64{1, 2, 3, 4, 5}
	tt := []float64{2, 4, 6, 8, 10}
	dst := make([]float64, len(s))
	expected := []float64{0.5, 0.5, 0.5, 0.5, 0.5}

	result := DivTo(dst, s, tt)
	assert.Equal(t, expected, result, "they should be equal")
}
func TestNorm(t *testing.T) {
	tests := []struct {
		name string
		s    []float64
		L    float64
		want float64
	}{
		{
			name: "Empty slice",
			s:    []float64{},
			L:    2,
			want: 0,
		},
		{
			name: "L2 norm",
			s:    []float64{1, 2, 3},
			L:    2,
			want: math.Sqrt(14),
		},
		{
			name: "L1 norm",
			s:    []float64{1, -2, 3},
			L:    1,
			want: 6,
		},
		{
			name: "Infinity norm",
			s:    []float64{1, -4, 3},
			L:    math.Inf(1),
			want: 4,
		},
		{
			name: "L3 norm",
			s:    []float64{1, 2, 3},
			L:    3,
			want: math.Pow(36, 1.0/3.0),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := Norm(tt.s, tt.L)
			if math.Abs(got-tt.want) > 1e-6 {
				t.Errorf("Norm() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestArgsortLess(t *testing.T) {
	tests := []struct {
		s    []float64
		i, j int
		want bool
	}{
		{[]float64{1, 2, 3}, 0, 1, true},
		{[]float64{3, 2, 1}, 0, 1, false},
		{[]float64{1, 2, 3}, 1, 2, true},
		{[]float64{3, 2, 1}, 1, 2, false},
		{[]float64{1, 2, 3}, 0, 2, true},
		{[]float64{3, 2, 1}, 0, 2, false},
		{[]float64{1, 1, 1}, 0, 1, false},
		{[]float64{1, 1, 1}, 0, 2, false},
	}
	for i, tt := range tests {
		a := argsort{s: tt.s}
		got := a.Less(tt.i, tt.j)
		if got != tt.want {
			t.Errorf("test %d: got %v, want %v", i, got, tt.want)
		}
	}
}
func TestEqual(t *testing.T) {
	// Test cases.
	tests := []struct {
		s1     []float64
		s2     []float64
		expect bool
	}{
		{[]float64{1.0, 2.0, 3.0}, []float64{1.0, 2.0, 3.0}, true},
		{[]float64{1.0, 2.0, 3.0}, []float64{1.0, 2.0}, false},
		{[]float64{1.0, 2.0}, []float64{1.0, 2.0, 3.0}, false},
		{[]float64{1.0, 2.5, 3.0}, []float64{1.0, 2.0, 3.0}, false},
		{nil, nil, true},
	}

	// Run tests.
	for i, test := range tests {
		got := Equal(test.s1, test.s2)
		if got != test.expect {
			t.Errorf("Test %d: Expected %v, got %v", i+1, test.expect, got)
		}
	}
}
func TestEqualLengths(t *testing.T) {
	type args struct {
		slices [][]float64
	}
	tests := []struct {
		name string
		args args
		want bool
	}{
		{
			name: "Empty input",
			args: args{
				slices: [][]float64{},
			},
			want: true,
		},
		{
			name: "Single slice",
			args: args{
				slices: [][]float64{{1.1, 2.2, 3.3}},
			},
			want: true,
		},
		{
			name: "Equal length slices",
			args: args{
				slices: [][]float64{{1.1, 2.2}, {3.3, 4.4}},
			},
			want: true,
		},
		{
			name: "Unequal length slices",
			args: args{
				slices: [][]float64{{1.1, 2.2}, {3.3, 4.4, 5.5}},
			},
			want: false,
		},
		{
			name: "Multiple equal length slices",
			args: args{
				slices: [][]float64{{1.1, 2.2}, {3.3, 4.4}, {5.5, 6.6}},
			},
			want: true,
		},
		{
			name: "Multiple slices with unequal length",
			args: args{
				slices: [][]float64{{1.1, 2.2}, {3.3, 4.4, 5.5}, {6.6, 7.7}},
			},
			want: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := EqualLengths(tt.args.slices...); got != tt.want {
				t.Errorf("EqualLengths() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestMulTo(t *testing.T) {
	s := []float64{1, 2, 3, 4, 5}
	t := []float64{10, 20, 30, 40, 50}
	dst := make([]float64, len(s))
	want := []float64{10, 40, 90, 160, 250}

	got := MulTo(dst, s, t)
	if !reflect.DeepEqual(got, want) {
		t.Errorf("MulTo() = %v, want %v", got, want)
	}
}
func TestMax(t *testing.T) {
	tests := []struct {
		name string
		s    []float64
		want float64
	}{
		{
			name: "Empty slice",
			s:    []float64{},
			want: 0, // Expected behavior for an empty slice might vary
		},
		{
			name: "Single element",
			s:    []float64{3.14},
			want: 3.14,
		},
		{
			name: "Multiple elements",
			s:    []float64{1.1, 2.2, 3.3, 2.2, 1.1},
			want: 3.3,
		},
		{
			name: "Negative numbers",
			s:    []float64{-1.1, -2.2, -3.3},
			want: -1.1,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := Max(tt.s); got != tt.want {
				t.Errorf("Max() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestAddScaled(t *testing.T) {
	for i, test := range []struct {
		dst    []float64
		alpha  float64
		s      []float64
		expect []float64
	}{
		{
			dst:    []float64{1, 2, 3},
			alpha:  2,
			s:      []float64{4, 5, 6},
			expect: []float64{9, 12, 15},
		},
		{
			dst:    []float64{1, -2, 3},
			alpha:  -2,
			s:      []float64{-4, 5, -6},
			expect: []float64{9, -12, 15},
		},
	} {
		AddScaled(test.dst, test.alpha, test.s)
		if !floats64.Equal(test.dst, test.expect) { // Corrected line
			t.Errorf("Test %d: unexpected result, got: %v, want: %v", i, test.dst, test.expect)
		}
	}

	// Test panicking on different lengths
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("The code did not panic")
		}
	}()
	AddScaled([]float64{1, 2}, 2, []float64{1})
}
func TestProd(t *testing.T) {
	tests := []struct {
		name string
		s    []float64
		want float64
	}{
		{
			name: "Empty slice",
			s:    []float64{},
			want: 1.0,
		},
		{
			name: "Single element",
			s:    []float64{2.5},
			want: 2.5,
		},
		{
			name: "Multiple elements",
			s:    []float64{1.0, 2.0, 3.5},
			want: 7.0,
		},
		{
			name: "Zero in slice",
			s:    []float64{1.0, 0, 3.5},
			want: 0,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := Prod(tt.s); got != tt.want {
				t.Errorf("Prod() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestArgsortStable(t *testing.T) {
	type args struct {
		dst  []float64
		inds []int
	}
	tests := []struct {
		name string
		args args
		want []int
	}{
		{
			name: "Empty",
			args: args{
				dst:  []float64{},
				inds: make([]int, 0),
			},
			want: []int{},
		},
		{
			name: "One element",
			args: args{
				dst:  []float64{1},
				inds: make([]int, 1),
			},
			want: []int{0},
		},
		{
			name: "Sorted",
			args: args{
				dst:  []float64{1, 2, 3, 4, 5},
				inds: make([]int, 5),
			},
			want: []int{0, 1, 2, 3, 4},
		},
		{
			name: "Reverse sorted",
			args: args{
				dst:  []float64{5, 4, 3, 2, 1},
				inds: make([]int, 5),
			},
			want: []int{4, 3, 2, 1, 0},
		},
		{
			name: "Unsorted",
			args: args{
				dst:  []float64{3, 1, 4, 1, 5},
				inds: make([]int, 5),
			},
			want: []int{1, 3, 0, 2, 4},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			ArgsortStable(tt.args.dst, tt.args.inds)
			if !reflect.DeepEqual(tt.args.inds, tt.want) {
				t.Errorf("ArgsortStable() = %v, want %v", tt.args.inds, tt.want)
			}
			// Verify that the original array is unchanged
			if !sort.Float64sAreSorted(tt.args.dst) {
				t.Errorf("ArgsortStable() modified the original array, want unchanged")
			}
		})
	}
}
func TestSub(t *testing.T) {
	dst := []float64{1, 2, 3, 4}
	s := []float64{1, 1, 2, 2}
	expected := []float64{0, 1, 1, 2}
	Sub(dst, s)
	require.True(t, blas64.Equal(dst, expected))
}
func TestMin(t *testing.T) {
	tests := []struct {
		name string
		s    []float64
		want float64
	}{
		{
			name: "Empty slice",
			s:    []float64{},
			want: 0, // Assuming you want 0 for an empty slice. Adjust if needed.
		},
		{
			name: "Single element",
			s:    []float64{3.14},
			want: 3.14,
		},
		{
			name: "Multiple elements",
			s:    []float64{1.1, 2.2, -3.3, 4.4},
			want: -3.3,
		},
		{
			name: "All same elements",
			s:    []float64{2.5, 2.5, 2.5},
			want: 2.5,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := Min(tt.s); got != tt.want {
				t.Errorf("Min() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestMaxIdx(t *testing.T) {
	testData := []struct {
		name string
		s    []float64
		want int
	}{
		{
			name: "empty slice",
			s:    []float64{},
			want: 0,
		},
		{
			name: "single element",
			s:    []float64{1.2},
			want: 0,
		},
		{
			name: "max at beginning",
			s:    []float64{3.5, 2.1, 1.0},
			want: 0,
		},
		{
			name: "max in middle",
			s:    []float64{1.2, 3.5, 2.1},
			want: 1,
		},
		{
			name: "max at end",
			s:    []float64{1.2, 2.1, 3.5},
			want: 2,
		},
		{
			name: "with NaN",
			s:    []float64{1.2, math.NaN(), 3.5},
			want: 2,
		},
		{
			name: "all NaN",
			s:    []float64{math.NaN(), math.NaN(), math.NaN()},
			want: 0,
		},
	}

	for _, tt := range testData {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				if tt.name == "empty slice" {
					if r := recover(); r == nil {
						t.Errorf("The code did not panic")
					}
				}
			}()
			got := MaxIdx(tt.s)
			if got != tt.want {
				t.Errorf("MaxIdx(%v) = %v, want %v", tt.s, got, tt.want)
			}
		})
	}
}
func TestFind(t *testing.T) {
	type args struct {
		inds []int
		f    func(float64) bool
		s    []float64
		k    int
	}
	tests := []struct {
		name    string
		args    args
		want    []int
		wantErr error
	}{
		{
			name: "Find all positive numbers",
			args: args{
				inds: make([]int, 0),
				f: func(f float64) bool {
					return f > 0
				},
				s: []float64{-1, 1, 2, -2, 3},
				k: -1,
			},
			want:    []int{1, 2, 4},
			wantErr: nil,
		},
		{
			name: "Find first 2 positive numbers",
			args: args{
				inds: make([]int, 0),
				f: func(f float64) bool {
					return f > 0
				},
				s: []float64{-1, 1, 2, -2, 3},
				k: 2,
			},
			want:    []int{1, 2},
			wantErr: nil,
		},
		{
			name: "Find first 3 positive numbers, but there are only 2",
			args: args{
				inds: make([]int, 0),
				f: func(f float64) bool {
					return f > 0
				},
				s: []float64{-1, 1, -2, -3},
				k: 3,
			},
			want:    []int{1},
			wantErr: errors.New("floats: insufficient elements found"),
		},
		{
			name: "Find 0 elements",
			args: args{
				inds: make([]int, 0),
				f: func(f float64) bool {
					return f > 0
				},
				s: []float64{-1, 1, -2, -3},
				k: 0,
			},
			want:    []int{},
			wantErr: nil,
		},
		{
			name: "Find first 3 even numbers, but there are none",
			args: args{
				inds: make([]int, 0),
				f: func(v float64) bool {
					return int(v)%2 == 0
				},
				s: []float64{1, 3, 5},
				k: 3,
			},
			want:    nil,
			wantErr: errors.New("floats: insufficient elements found"),
		},
		{
			name: "Find first 5 odd numbers",
			args: args{
				inds: make([]int, 0),
				f: func(v float64) bool {
					return int(v)%2 != 0
				},
				s: []float64{0, 2, 4, 6, 8},
				k: 5,
			},
			want:    nil,
			wantErr: errors.New("floats: insufficient elements found"),
		},
		{
			name: "Find all even numbers",
			args: args{
				inds: make([]int, 0),
				f: func(v float64) bool {
					return int(v)%2 == 0
				},
				s: []float64{1, 3, 5, 7, 9},
				k: -1,
			},
			want:    []int{},
			wantErr: nil,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := Find(tt.args.inds, tt.args.f, tt.args.s, tt.args.k)
			if !reflect.DeepEqual(err, tt.wantErr) {
				t.Errorf("Find() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Find() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestSubTo(t *testing.T) {
	// Test case 1: Basic subtraction
	s1 := []float64{1, 2, 3}
	t1 := []float64{4, 5, 6}
	dst1 := make([]float64, 3)
	SubTo(dst1, s1, t1)
	assert.Equal(t, []float64{-3, -3, -3}, dst1)

	// Test case 2: Different lengths
	s2 := []float64{1, 2}
	t2 := []float64{4, 5, 6}
	assert.Panics(t, func() { SubTo(dst1, s2, t2) })

	// Test case 3: Empty slices
	s3 := []float64{}
	t3 := []float64{}
	dst3 := make([]float64, 0)
	SubTo(dst3, s3, t3)
	assert.Equal(t, []float64{}, dst3)

	// Test case 4: Destination slice too short
	s4 := []float64{1, 2, 3}
	t4 := []float64{4, 5, 6}
	dst4 := make([]float64, 2)
	assert.Panics(t, func() { SubTo(dst4, s4, t4) })
}
func TestArgsort(t *testing.T) {
	for i := 0; i < 100; i++ {
		data := make([]float64, rand.Intn(100))
		for i := range data {
			data[i] = rand.Float64()
		}
		inds := make([]int, len(data))
		Argsort(data, inds)
		if !sort.Float64sAreSorted(data) {
			t.Errorf("Data slice is not sorted: %v", data)
		}
		for i := 1; i < len(inds); i++ {
			if data[inds[i-1]] == data[inds[i]] {
				continue
			}
			if inds[i-1] > inds[i] {
				t.Errorf("Indices are not sorted correctly: %v", inds)
			}
		}
	}
}
func TestLogSpan(t *testing.T) {
	// Test cases:
	// - Empty slice
	// - Single element slice
	// - Multiple element slice
	// - Zero values for l and u
	// - Negative values for l and u

	testCases := []struct {
		name string
		dst  []float64
		l    float64
		u    float64
		want []float64
	}{
		{
			name: "Empty slice",
			dst:  []float64{},
			l:    1,
			u:    10,
			want: []float64{},
		},
		{
			name: "Single element slice",
			dst:  make([]float64, 1),
			l:    1,
			u:    10,
			want: []float64{1},
		},
		{
			name: "Multiple element slice",
			dst:  make([]float64, 5),
			l:    1,
			u:    10,
			want: []float64{1, 2.154434690031884, 3.874064893661017, 6.049647464412944, 10},
		},
		{
			name: "Zero values for l and u",
			dst:  make([]float64, 5),
			l:    0,
			u:    0,
			want: []float64{0, 0, 0, 0, 0},
		},
		{
			name: "Negative values for l and u",
			dst:  make([]float64, 5),
			l:    -10,
			u:    -1,
			want: []float64{0.000045399929762484854, 0.00012340980408667955, 0.00033546262790251185, 0.0009118819655545148, 0.0024787521766663587},
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			got := LogSpan(tc.dst, tc.l, tc.u)
			for i := range got {
				if !closeEnough(got[i], tc.want[i], 0.0001) {
					t.Errorf("LogSpan(%v, %v, %v) = %v, want %v", tc.dst, tc.l, tc.u, got, tc.want)
					break
				}
			}
		})
	}
}

func closeEnough(a, b, tolerance float64) bool {
	return math.Abs(a-b) < tolerance
}
func TestScale(t *testing.T) {
	// Test cases
	tests := []struct {
		name string
		c    float64
		dst  []float64
		want []float64
	}{
		{
			name: "Empty slice",
			c:    2.0,
			dst:  []float64{},
			want: []float64{},
		},
		{
			name: "Scaling by 2",
			c:    2.0,
			dst:  []float64{1.0, 2.0, 3.0},
			want: []float64{2.0, 4.0, 6.0},
		},
		{
			name: "Scaling by 0.5",
			c:    0.5,
			dst:  []float64{4.0, 8.0, 12.0},
			want: []float64{2.0, 4.0, 6.0},
		},
		{
			name: "Scaling by -1",
			c:    -1.0,
			dst:  []float64{1.0, -2.0, 3.0},
			want: []float64{-1.0, 2.0, -3.0},
		},
	}

	// Iterate over test cases
	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			// Create a copy of the input slice to avoid modifying the original
			dst := make([]float64, len(tc.dst))
			copy(dst, tc.dst)

			// Call the Scale function
			Scale(tc.c, dst)

			// Check if the result matches the expected output
			if !floats64.Equal(dst, tc.want) {
				t.Errorf("Scale(%v, %v) = %v, want %v", tc.c, tc.dst, dst, tc.want)
			}
		})
	}
}
func TestScaleTo(t *testing.T) {
	for i, test := range []struct {
		dst []float64
		c   float64
		s   []float64
		want []float64
	}{
		{
			dst: []float64{2, 1, 1},
			c:   2,
			s:   []float64{1, 1, 1},
			want: []float64{2, 2, 2},
		},
		{
			dst: []float64{0, 0},
			c:   3,
			s:   []float64{1, 2},
			want: []float64{3, 6},
		},
		{
			dst: []float64{1, 2, 3},
			c:   0,
			s:   []float64{1, 2, 3},
			want: []float64{0, 0, 0},
		},
	} {
		got := ScaleTo(test.dst, test.c, test.s)
		if !floats.Equal(got, test.want) { // Use floats.Equal instead of f64.Equal
			t.Errorf("Test %d: unexpected result - got: %v, want: %v", i, got, test.want)
		}
	}
}
func TestLogSumExp(t *testing.T) {
	tests := []struct {
		name  string
		input []float64
		want  float64
	}{
		{
			name:  "Empty slice",
			input: []float64{},
			want:  math.Inf(-1),
		},
		{
			name:  "Single element",
			input: []float64{1.0},
			want:  1.0,
		},
		{
			name:  "Positive numbers",
			input: []float64{1.0, 2.0, 3.0},
			want:  3.4076059573434757,
		},
		{
			name:  "Negative numbers",
			input: []float64{-1.0, -2.0, -3.0},
			want:  -0.5923940426565243,
		},
		{
			name:  "Mixed numbers",
			input: []float64{-1.0, 2.0, -3.0},
			want:  2.3132616875182228,
		},
		{
			name:  "Infinity",
			input: []float64{1.0, math.Inf(1), 2.0},
			want:  math.Inf(1),
		},
		{
			name:  "Negative infinity",
			input: []float64{1.0, math.Inf(-1), 2.0},
			want:  2.3132616875182228,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := LogSumExp(tt.input)
			if math.Abs(got-tt.want) > 1e-10 {
				t.Errorf("LogSumExp(%v) = %v, want %v", tt.input, got, tt.want)
			}
		})
	}
}
func TestWithin(t *testing.T) {
	tests := []struct {
		s []float64
		v float64
		want int
	}{
		{[]float64{1, 2, 3, 4, 5}, 3, 2},
		{[]float64{1, 2, 3, 4, 5}, 1, 0},
		{[]float64{1, 2, 3, 4, 5}, 5, -1},
		{[]float64{1, 2, 3, 4, 5}, 0, -1},
		{[]float64{1, 2, 3, 4, 5}, 1.5, 0},
		{[]float64{1, 2, 3, 4, 5}, math.NaN(), -1},
	}
	for _, tt := range tests {
		t.Run("", func(t *testing.T) {
			got := Within(tt.s, tt.v)
			if got != tt.want {
				t.Errorf("Within() = %v, want %v", got, tt.want)
			}
		})
	}

	defer func() {
		if r := recover(); r == nil {
			t.Errorf("The code did not panic")
		}
	}()
	Within([]float64{1}, 1)
}
