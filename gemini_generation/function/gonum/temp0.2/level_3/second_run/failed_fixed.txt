func TestNearestIdx(t *testing.T) {
	s := []float64{1, 2, 3, 4, 5, 4, 3, 2, 1}
	type args struct {
		s []float64
		v float64
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		{"first", args{s, -1}, 0},
		{"last", args{s, 10}, 8},
		{"exact", args{s, 3}, 2},
		{"firstNear", args{s, 2.1}, 1},
		{"secondNear", args{s, 3.9}, 3},
		{"NaN", args{s, math.NaN()}, 0},
		{"Inf", args{s, math.Inf(1)}, 4},
		{"NInf", args{s, math.Inf(-1)}, 0},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := NearestIdx(tt.args.s, tt.args.v)
			if got != tt.want {
				t.Errorf("NearestIdx() = %v, want %v", got, tt.want)
			}
		})
	}
	// test that it panics when s is zero length
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("The code did not panic")
		}
	}()
	NearestIdx([]float64{}, 0)
}
func TestMaxIdx(t *testing.T) {
	t.Parallel()
	for _, c := range []struct {
		s        []float64
		wantIdx  int
		wantPanic bool
	}{
		{[]float64{1, 2, 3, 4}, 3, false},
		{[]float64{4, 3, 2, 1}, 0, false},
		{[]float64{1, 4, 3, 2}, 1, false},
		{[]float64{1, 2, 4, 3}, 2, false},
		{[]float64{1, 2, 2, 1}, 1, false},
		{[]float64{-1, -2, -3, -4}, 0, false},
		{[]float64{-4, -3, -2, -1}, 3, false},
		{[]float64{0, math.Inf(1), math.Inf(-1)}, 1, false},
		{[]float64{math.Inf(-1), math.Inf(1), 0}, 1, false},
		{[]float64{math.NaN(), math.NaN(), math.NaN()}, 0, false},
		{[]float64{1, math.NaN(), 2}, 0, false},
		{[]float64{math.NaN(), 1, 2}, 1, false},
		{[]float64{}, 0, true},
	} {
		panicked := false
		func() {
			defer func() {
				if r := recover(); r != nil {
					panicked = true
				}
			}()
			got := MaxIdx(c.s)
			if panicked != c.wantPanic {
				t.Errorf("MaxIdx(%v) panicked: got %v, want %v", c.s, panicked, c.wantPanic)
			}
			if !panicked && got != c.wantIdx {
				t.Errorf("MaxIdx(%v) = %v, want %v", c.s, got, c.wantIdx)
			}
		}()
	}
}
func TestArgsort(t *testing.T) {
	for i := 0; i < 100; i++ {
		n := rand.Intn(100)
		dst := make([]float64, n)
		for j := range dst {
			dst[j] = rand.Float64()
		}
		origDst := make([]float64, n)
		copy(origDst, dst)
		inds := make([]int, n)
		Argsort(dst, inds)
		if !sort.Float64sAreSorted(dst) {
			t.Errorf("Slice is not sorted: %v", dst)
		}
		for j := 0; j < n; j++ {
			if dst[j] != origDst[inds[j]] {
				t.Errorf("Index does not match: %v", inds)
			}
		}
	}

	// Test that it panics when the argument lengths do not match
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("The code did not panic")
		}
	}()
	dst := make([]float64, 10)
	inds := make([]int, 5)
	Argsort(dst, inds)
}
func TestSpan(t *testing.T) {
	// Test cases for various inputs.
	testCases := []struct {
		name string
		dst  []float64
		l    float64
		u    float64
		want []float64
	}{
		{
			name: "BasicCase",
			dst:  make([]float64, 5),
			l:    0.0,
			u:    1.0,
			want: []float64{0.0, 0.25, 0.5, 0.75, 1.0},
		},
		{
			name: "NegativeBounds",
			dst:  make([]float64, 4),
			l:    -1.0,
			u:    0.0,
			want: []float64{-1.0, -0.6666666666666667, -0.3333333333333333, 0.0},
		},
		{
			name: "ZeroLength",
			dst:  make([]float64, 0),
			l:    0.0,
			u:    1.0,
			want: nil, // Should panic
		},
		{
			name: "InfL",
			dst:  make([]float64, 4),
			l:    math.Inf(1),
			u:    0.0,
			want: []float64{math.Inf(1), math.Inf(1), math.Inf(1), 0.0},
		},
		{
			name: "InfU",
			dst:  make([]float64, 4),
			l:    0.0,
			u:    math.Inf(1),
			want: []float64{0.0, math.Inf(1), math.Inf(1), math.Inf(1)},
		},
		{
			name: "BothInfSameSign",
			dst:  make([]float64, 4),
			l:    math.Inf(1),
			u:    math.Inf(1),
			want: []float64{math.Inf(1), math.Inf(1), math.Inf(1), math.Inf(1)},
		},
		{
			name: "BothInfDifferentSign",
			dst:  make([]float64, 4),
			l:    math.Inf(-1),
			u:    math.Inf(1),
			want: []float64{math.Inf(-1), math.Inf(-1), math.Inf(1), math.Inf(1)},
		},
		{
			name: "NaNU",
			dst:  make([]float64, 4),
			l:    0.0,
			u:    math.NaN(),
			want: []float64{0.0, math.NaN(), math.NaN(), math.NaN()},
		},
		{
			name: "NaNL",
			dst:  make([]float64, 4),
			l:    math.NaN(),
			u:    1.0,
			want: []float64{math.NaN(), math.NaN(), math.NaN(), 1.0},
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			defer func() {
				if tc.name == "ZeroLength" {
					if r := recover(); r == nil {
						t.Errorf("The code did not panic")
					}
					return
				}

				if r := recover(); r != nil {
					t.Errorf("The code panicked, error %v", r)
				}
			}()

			got := Span(tc.dst, tc.l, tc.u)

			if tc.name == "ZeroLength" {
				return
			}

			if len(got) != len(tc.want) {
				t.Errorf("Got %v, want %v", got, tc.want)
			}
			for i := range got {
				if math.IsNaN(tc.want[i]) {
					if !math.IsNaN(got[i]) {
						t.Errorf("Got %v, want %v", got, tc.want)
					}
				} else if got[i] != tc.want[i] {
					t.Errorf("Got %v, want %v", got, tc.want)
				}
			}
		})
	}
}
func TestDistance(t *testing.T) {
	for i, c := range []struct {
		s []float64
		t []float64
		L float64
		e float64
	}{
		{[]float64{1, 2, 3}, []float64{1, 2, 3}, 2, 0},
		{[]float64{1, 2, 3}, []float64{4, 5, 6}, 1, 9},
		{[]float64{1, 2, 3}, []float64{4, 5, 6}, 2, math.Sqrt(27)},
		{[]float64{1, 2, 3}, []float64{4, 5, 6}, 3, math.Cbrt(27)}, // Use math.Cbrt for cube root
		{[]float64{1, 2, 3}, []float64{4, 5, 6}, math.Inf(1), 3},
	} {
		var got float64 = Distance(c.s, c.t, c.L)
		if !panics(t, "Distance", func() { Distance([]float64{1, 2}, []float64{1}, 2) }) {
			t.Errorf("Did not panic with unequal lengths")
		}
		if got != c.e {
			t.Errorf("Test %d: Expected %v but got %v", i, c.e, got)
		}
	}
}

func TestDistanceRandom(t *testing.T) {
	// This test compares Distance output to a slower version
	// of the same computation. This version is not as optimized
	// as the main implementation, but is used here to ensure
	// correctness.
	prng := rand.New(rand.NewSource(42))
	for i := 0; i < 10; i++ {
		s := make([]float64, prng.Intn(100))
		t := make([]float64, len(s))
		for i := range s {
			s[i] = prng.Float64()
			t[i] = prng.Float64()
		}
		for _, L := range []float64{1, 2, 3, 4, math.Inf(1)} {
			got := Distance(s, t, L)
			want := distanceSlow(s, t, L)
			if !closeEnough(got, want) {
				t.Errorf("L = %v: Values do not match: Got %v, want %v", L, got, want)
			}
		}
	}
}

func distanceSlow(s, t []float64, L float64) float64 {
	if len(s) != len(t) {
		panic(badLength)
	}
	if len(s) == 0 {
		return 0
	}
	var norm float64
	if L == 1 {
		for i, v := range s {
			norm += math.Abs(t[i] - v)
		}
		return norm
	}
	if math.IsInf(L, 1) {
		for i, v := range s {
			absDiff := math.Abs(t[i] - v)
			if absDiff > norm {
				norm = absDiff
			}
		}
		return norm
	}
	for i, v := range s {
		norm += math.Pow(math.Abs(t[i]-v), L)
	}
	return math.Pow(norm, 1/L)
}

func closeEnough(a, b float64) bool {
	tol := 1e-12
	return math.Abs(a-b) < tol
}

func panics(t *testing.T, name string, f func()) (b bool) {
	defer func() {
		err := recover()
		if err != nil {
			b = true
		}
	}()
	f()
	return
}
func TestNearestIdxForSpan(t *testing.T) {
	// Test cases: n, l, u, v, expected index
	testCases := []struct {
		n           int
		l, u, v     float64
		expectedIdx int
	}{
		// Basic cases
		{2, 0, 1, 0.5, 1},
		{3, 0, 1, 0.3, 1},
		{4, 0, 1, 0.8, 3},

		// Edge cases
		{2, 0, 1, 0, 0},
		{2, 0, 1, 1, 1},
		{3, 0, 1, -1, 0},
		{3, 0, 1, 2, 2},

		// Cases with NaN and Inf
		{2, math.NaN(), 1, 0.5, 1}, // u is valid, so closest to end
		{2, 0, math.NaN(), 0.5, 0}, // l is valid, so closest to beginning
		{2, math.Inf(1), 1, 0.5, 1},
		{2, 0, math.Inf(1), 0.5, 0},
		{2, math.Inf(-1), 1, 0.5, 1},
		{2, 0, math.Inf(-1), 0.5, 0},
		{2, math.Inf(1), math.Inf(1), 0.5, 0},
		{3, math.Inf(1), math.Inf(-1), 0.5, 1},
		{3, math.Inf(1), math.Inf(-1), math.Inf(1), 0},
		{3, math.Inf(1), math.Inf(-1), math.Inf(-1), 2},

		// Cases with l > u
		{2, 1, 0, 0.5, 1}, // Inverted range, closest to end
		{3, 1, 0, 0.7, 0}, // Inverted range, closest to beginning
		{3, 1, 0, 0.3, 2}, // Inverted range, closest to end

		// Cases with large n
		{100, 0, 1, 0.25, 25},
		{100, 0, 1, 0.75, 75},
	}

	for i, tc := range testCases {
		idx := NearestIdxForSpan(tc.n, tc.l, tc.u, tc.v)
		if idx != tc.expectedIdx {
			t.Errorf("Test case %d failed: expected index %d, got %d for n=%d, l=%v, u=%v, v=%v", i+1, tc.expectedIdx, idx, tc.n, tc.l, tc.u, tc.v)
		}
	}
}
func TestFind(t *testing.T) {
	type testCase struct {
		f      func(float64) bool
		s      []float64
		k      int
		wantIs []int
		wantErr error
	}
	testCases := []testCase{
		// k < 0
		{
			f:      func(v float64) bool { return v > 0 },
			s:      []float64{-1, 1, 2, -2, 3},
			k:      -1,
			wantIs: []int{1, 2, 4},
		},
		// k == 0
		{
			f:      func(v float64) bool { return v > 0 },
			s:      []float64{-1, 1, 2, -2, 3},
			k:      0,
			wantIs: []int{},
		},
		// k > 0, sufficient elements
		{
			f:      func(v float64) bool { return v > 0 },
			s:      []float64{-1, 1, 2, -2, 3},
			k:      2,
			wantIs: []int{1, 2},
		},
		// k > 0 to few elements
		{
			f:      func(v float64) bool { return v > 0 },
			s:      []float64{-1, 1, 2, -2, 3},
			k:      10,
			wantErr: errors.New("floats: insufficient elements found"), // Create a single error instance
		},
	}

    // Create the error instance once outside the loop
    errInsufficientElements := errors.New("floats: insufficient elements found")

	for i, tc := range testCases {
		gotIs, gotErr := Find(nil, tc.f, tc.s, tc.k)
		if tc.wantErr != nil {
            // Compare error messages instead of using errors.Is
			if gotErr == nil || gotErr.Error() != errInsufficientElements.Error() {
				t.Errorf("TestFind(%v): Error mismatch: want %v, got %v", i, tc.wantErr, gotErr)
			}
			continue
		}
		if len(gotIs) != len(tc.wantIs) {
			t.Errorf("TestFind(%v): Slice length mismatch: want %v, got %v", i, len(tc.wantIs), len(gotIs))
			continue
		}
		for j := 0; j < len(tc.wantIs); j++ {
			if gotIs[j] != tc.wantIs[j] {
				t.Errorf("TestFind(%v): Index mismatch at element %v: want %v, got %v", i, j, tc.wantIs[j], gotIs[j])
			}
		}
	}
}
