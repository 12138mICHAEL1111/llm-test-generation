func TestSubTo(t *testing.T) {
	tests := []struct {
		dst []float64
		s   []float64
		t   []float64
		want []float64
	}{
		{[]float64{1, 2, 3}, []float64{4, 5, 6}, []float64{1, 2, 3}, []float64{3, 3, 3}},
		{[]float64{1, 2, 3}, []float64{4, 5, 6}, []float64{4, 5, 6}, []float64{-3, -3, -3}},
		{[]float64{1, 2, 3}, []float64{4, 5, 6}, []float64{7, 8, 9}, []float64{-6, -6, -6}},
	}

	for _, tt := range tests {
		got := SubTo(tt.dst, tt.s, tt.t)
		if !reflect.DeepEqual(got, tt.want) {
			t.Errorf("SubTo(%v, %v, %v) = %v; want %v", tt.dst, tt.s, tt.t, got, tt.want)
		}
	}
}
func TestAdd(t *testing.T) {
	// Test case 1: Equal length slices
	dst1 := []float64{1.0, 2.0, 3.0}
	s1 := []float64{4.0, 5.0, 6.0}
	expected1 := []float64{5.0, 7.0, 9.0}
	Add(dst1, s1)
	for i := range dst1 {
		if dst1[i] != expected1[i] {
			t.Errorf("Test case 1 failed: Expected %f, got %f", expected1[i], dst1[i])
		}
	}

	// Test case 2: Unequal length slices
	dst2 := []float64{1.0, 2.0, 3.0}
	s2 := []float64{4.0, 5.0}
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("Test case 2 failed: Expected panic due to unequal length slices")
		}
	}()
	Add(dst2, s2)
}
func TestAddConst(t *testing.T) {
	dst := []float64{1.0, 2.0, 3.0, 4.0}
	c := 5.0
	expected := []float64{6.0, 7.0, 8.0, 9.0}

	AddConst(c, dst)

	assert.Equal(t, expected, dst, "Expected values to be incremented by c")
}
func TestLess(t *testing.T) {
	tests := []struct {
		name string
		args argsort
		i    int
		j    int
		want bool
	}{
		// Add test cases here
		{
			name: "Test case 1",
			args: argsort{s: []float64{1.0, 2.0, 3.0, 4.0, 5.0}},
			i:    0,
			j:    1,
			want: true,
		},
		{
			name: "Test case 2",
			args: argsort{s: []float64{5.0, 4.0, 3.0, 2.0, 1.0}},
			i:    3,
			j:    4,
			want: false,
		},
		// Add more test cases as needed
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			a := argsort(tt.args)
			if got := a.Less(tt.i, tt.j); got != tt.want {
				t.Errorf("Less() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestEqualFunc(t *testing.T) {
	// Test cases
	tests := []struct {
		slice1 []float64
		slice2 []float64
		expected bool
	}{
		{[]float64{1.1, 2.2, 3.3}, []float64{1.1, 2.2, 3.3}, true},
		{[]float64{1.1, 2.2, 3.3}, []float64{1.1, 2.2}, false},
		{[]float64{1.1, 2.2, 3.3}, []float64{1.1, 2.2, 4.4}, false},
	}

	// Test each case
	for _, test := range tests {
		result := EqualFunc(test.slice1, test.slice2, func(a, b float64) bool {
			return a == b
		})
		if result != test.expected {
			t.Errorf("Expected %v but got %v for slices %v and %v", test.expected, result, test.slice1, test.slice2)
		}
	}
}
func TestScale(t *testing.T) {
	dst := []float64{1.0, 2.0, 3.0}
	c := 2.0
	expected := []float64{2.0, 4.0, 6.0}

	Scale(c, dst)

	assert.Equal(t, expected, dst, "Expected dst to be scaled by c")
}
func TestSumCompensated(t *testing.T) {
	tests := []struct {
		name     string
		input    []float64
		expected float64
	}{
		{
			name:     "Test case 1",
			input:    []float64{1.0, 2.0, 3.0},
			expected: 6.0,
		},
		{
			name:     "Test case 2",
			input:    []float64{0.1, 0.2, 0.3},
			expected: 0.6,
		},
		{
			name:     "Test case 3",
			input:    []float64{0.01, 0.02, 0.03},
			expected: 0.06,
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := SumCompensated(test.input)
			if math.Abs(result-test.expected) > 1e-10 {
				t.Errorf("Expected %f, but got %f", test.expected, result)
			}
		})
	}
}
func TestArgsort(t *testing.T) {
	dst := []float64{3.5, 1.2, 4.7, 2.1}
	inds := make([]int, len(dst))
	Argsort(dst, inds)

	// Check if dst is sorted in increasing order
	for i := 0; i < len(dst)-1; i++ {
		if dst[i] > dst[i+1] {
			t.Errorf("dst is not sorted in increasing order")
		}
	}

	// Check if inds contains the original positions of elements in dst
	for i := 0; i < len(inds); i++ {
		if dst[i] != dst[inds[i]] {
			t.Errorf("inds does not contain original positions")
		}
	}
}
func TestCumProd(t *testing.T) {
	// Test cases
	tests := []struct {
		dst      []float64
		s        []float64
		expected []float64
	}{
		{[]float64{1, 2, 3, 4}, []float64{1, 2, 3, 4}, []float64{1, 2, 6, 24}},
		{[]float64{1, 2, 3, 4}, []float64{2, 3, 4, 5}, []float64{2, 6, 24, 120}},
		{[]float64{1, 2, 3, 4}, []float64{0, 0, 0, 0}, []float64{0, 0, 0, 0}},
	}

	for _, test := range tests {
		result := CumProd(test.dst, test.s)
		for i := range result {
			if result[i] != test.expected[i] {
				t.Errorf("Expected %v at index %d, but got %v", test.expected[i], i, result[i])
			}
		}
	}
}
func TestCumSum(t *testing.T) {
	// Test cases
	tests := []struct {
		dst []float64
		s   []float64
		want []float64
	}{
		{[]float64{0, 0, 0}, []float64{1, 2, 3}, []float64{1, 3, 6}},
		{[]float64{0, 0, 0, 0}, []float64{1, 2, 3, 4}, []float64{1, 3, 6, 10}},
		{[]float64{0, 0, 0, 0, 0}, []float64{1, 2, 3, 4, 5}, []float64{1, 3, 6, 10, 15}},
	}

	for _, test := range tests {
		result := CumSum(test.dst, test.s)
		for i := range result {
			if result[i] != test.want[i] {
				t.Errorf("CumSum(%v, %v) = %v, want %v", test.dst, test.s, result, test.want)
				break
			}
		}
	}
}
func TestEqual(t *testing.T) {
	tests := []struct {
		slice1 []float64
		slice2 []float64
		expected bool
	}{
		{[]float64{1.0, 2.0, 3.0}, []float64{1.0, 2.0, 3.0}, true},
		{[]float64{1.0, 2.0, 3.0}, []float64{1.0, 2.0, 4.0}, false},
		{[]float64{1.0, 2.0, 3.0}, []float64{1.0, 2.0}, false},
		{[]float64{1.0, 2.0}, []float64{1.0, 2.0, 3.0}, false},
	}

	for _, test := range tests {
		result := Equal(test.slice1, test.slice2)
		if result != test.expected {
			t.Errorf("Expected Equal(%v, %v) to be %v, but got %v", test.slice1, test.slice2, test.expected, result)
		}
	}
}
func TestNorm(t *testing.T) {
	tests := []struct {
		name     string
		slice    []float64
		L        float64
		expected float64
	}{
		{
			name:     "Test L2 norm",
			slice:    []float64{1, 2, 3},
			L:        2,
			expected: math.Sqrt(14),
		},
		{
			name:     "Test L1 norm",
			slice:    []float64{1, 2, 3},
			L:        1,
			expected: 6,
		},
		{
			name:     "Test Inf norm",
			slice:    []float64{1, -5, 3},
			L:        math.Inf(1),
			expected: 5,
		},
		{
			name:     "Test zero slice",
			slice:    []float64{},
			L:        2,
			expected: 0,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := Norm(tt.slice, tt.L)
			if result != tt.expected {
				t.Errorf("Expected %f, but got %f", tt.expected, result)
			}
		})
	}
}
func TestSpan(t *testing.T) {
	tests := []struct {
		dst []float64
		l   float64
		u   float64
		want []float64
	}{
		// Add test cases here
	}

	for _, tt := range tests {
		t.Run("", func(t *testing.T) {
			if got := Span(tt.dst, tt.l, tt.u); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Span() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestWithin(t *testing.T) {
	tests := []struct {
		name     string
		s        []float64
		v        float64
		expected int
	}{
		{
			name:     "Value within range",
			s:        []float64{1.0, 2.0, 3.0, 4.0, 5.0},
			v:        3.5,
			expected: 2,
		},
		{
			name:     "Value at beginning of range",
			s:        []float64{1.0, 2.0, 3.0, 4.0, 5.0},
			v:        1.0,
			expected: 0,
		},
		{
			name:     "Value at end of range",
			s:        []float64{1.0, 2.0, 3.0, 4.0, 5.0},
			v:        5.0,
			expected: 3,
		},
		{
			name:     "Value less than minimum",
			s:        []float64{1.0, 2.0, 3.0, 4.0, 5.0},
			v:        0.5,
			expected: -1,
		},
		{
			name:     "Value greater than maximum",
			s:        []float64{1.0, 2.0, 3.0, 4.0, 5.0},
			v:        6.0,
			expected: -1,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := Within(tt.s, tt.v)
			if result != tt.expected {
				t.Errorf("Expected index %d, but got %d", tt.expected, result)
			}
		})
	}
}
func TestAddScaledTo(t *testing.T) {
	// Test cases
	tests := []struct {
		dst    []float64
		y      []float64
		alpha  float64
		s      []float64
		result []float64
	}{
		{
			dst:    []float64{1.0, 2.0, 3.0},
			y:      []float64{4.0, 5.0, 6.0},
			alpha:  2.0,
			s:      []float64{7.0, 8.0, 9.0},
			result: []float64{15.0, 18.0, 21.0},
		},
		// Add more test cases as needed
	}

	for _, test := range tests {
		result := AddScaledTo(test.dst, test.y, test.alpha, test.s)
		for i := 0; i < len(result); i++ {
			if result[i] != test.result[i] {
				t.Errorf("Expected %f at index %d, but got %f", test.result[i], i, result[i])
			}
		}
	}
}
func TestArgsort_Len(t *testing.T) {
	s := []float64{3.14, 2.71, 1.618}
	a := argsort{s: s}
	expectedLen := len(s)

	result := a.Len()

	if result != expectedLen {
		t.Errorf("Expected length to be %d, but got %d", expectedLen, result)
	}
}
func TestArgsortStable(t *testing.T) {
	dst := []float64{3.5, 1.2, 4.7, 2.1}
	inds := make([]int, len(dst))
	ArgsortStable(dst, inds)

	// Check if dst is sorted in increasing order
	for i := 1; i < len(dst); i++ {
		if dst[i-1] > dst[i] {
			t.Errorf("dst is not sorted in increasing order")
		}
	}

	// Check if inds contains the original position of elements
	for i := range dst {
		if dst[i] != dst[inds[i]] {
			t.Errorf("inds does not contain the original position of elements")
		}
	}
}
func TestMax(t *testing.T) {
	tests := []struct {
		input    []float64
		expected float64
	}{
		{[]float64{1.0, 2.0, 3.0}, 3.0},
		{[]float64{-1.0, -2.0, -3.0}, -1.0},
		{[]float64{5.5, 2.2, 3.3, 4.4}, 5.5},
		{[]float64{}, 0.0}, // Expected to panic
	}

	for _, test := range tests {
		func() {
			defer func() {
				if r := recover(); r == nil {
					t.Errorf("Expected Max to panic for input %v", test.input)
				}
			}()

			result := Max(test.input)
			if result != test.expected {
				t.Errorf("For input %v, expected %f but got %f", test.input, test.expected, result)
			}
		}()
	}
}
func TestReverse(t *testing.T) {
	tests := []struct {
		name     string
		input    []float64
		expected []float64
	}{
		{"Test1", []float64{1.1, 2.2, 3.3, 4.4, 5.5}, []float64{5.5, 4.4, 3.3, 2.2, 1.1}},
		{"Test2", []float64{9.9, 8.8, 7.7, 6.6}, []float64{6.6, 7.7, 8.8, 9.9}},
		{"Test3", []float64{0.5, 1.5, 2.5}, []float64{2.5, 1.5, 0.5}},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			Reverse(tt.input)
			if !reflect.DeepEqual(tt.input, tt.expected) {
				t.Errorf("Expected %v, but got %v", tt.expected, tt.input)
			}
		})
	}
}
func TestSub(t *testing.T) {
	// Test case 1: Equal length slices
	dst1 := []float64{1.0, 2.0, 3.0}
	s1 := []float64{0.5, 1.0, 1.5}
	expected1 := []float64{0.5, 1.0, 1.5}
	Sub(dst1, s1)
	for i := 0; i < len(dst1); i++ {
		if dst1[i] != expected1[i] {
			t.Errorf("Test case 1 failed: Expected %f, got %f", expected1[i], dst1[i])
		}
	}

	// Test case 2: Unequal length slices (should panic)
	dst2 := []float64{1.0, 2.0, 3.0}
	s2 := []float64{0.5, 1.0}
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("Test case 2 failed: Expected panic, but no panic occurred")
		}
	}()
	Sub(dst2, s2)
}
func TestAddScaled(t *testing.T) {
	// Test cases
	tests := []struct {
		dst    []float64
		alpha  float64
		s      []float64
		result []float64
	}{
		{[]float64{1.0, 2.0, 3.0}, 2.0, []float64{4.0, 5.0, 6.0}, []float64{9.0, 12.0, 15.0}},
		{[]float64{1.0, 2.0, 3.0}, 0.5, []float64{4.0, 5.0, 6.0}, []float64{3.0, 4.5, 6.0}},
		{[]float64{1.0, 2.0, 3.0}, -1.0, []float64{4.0, 5.0, 6.0}, []float64{3.0, 1.0, -3.0}},
	}

	for _, test := range tests {
		// Copy the original destination slice for comparison
		originalDst := make([]float64, len(test.dst))
		copy(originalDst, test.dst)

		// Call the function
		AddScaled(test.dst, test.alpha, test.s)

		// Check if the result matches the expected result
		for i := 0; i < len(test.dst); i++ {
			if test.dst[i] != test.result[i] {
				t.Errorf("Expected %f at index %d, but got %f", test.result[i], i, test.dst[i])
			}
		}

		// Check if the original destination slice remains unchanged
		for i := 0; i < len(test.dst); i++ {
			if test.dst[i] != originalDst[i] {
				t.Errorf("Original destination slice was modified unexpectedly at index %d", i)
			}
		}
	}
}
func TestDot(t *testing.T) {
	// Test case 1: same length slices
	s1 := []float64{1.0, 2.0, 3.0}
	s2 := []float64{4.0, 5.0, 6.0}
	expected := 1.0*4.0 + 2.0*5.0 + 3.0*6.0
	result := Dot(s1, s2)
	if result != expected {
		t.Errorf("Expected %f but got %f", expected, result)
	}

	// Test case 2: different length slices
	s3 := []float64{1.0, 2.0}
	s4 := []float64{4.0, 5.0, 6.0}
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("The code did not panic")
		}
	}()
	Dot(s3, s4)
}
func TestLogSumExp(t *testing.T) {
	tests := []struct {
		name string
		s    []float64
		want float64
	}{
		{
			name: "Test case 1",
			s:    []float64{1, 2, 3},
			want: 3.4076059644443805,
		},
		{
			name: "Test case 2",
			s:    []float64{0, 0, 0},
			want: 0.6931471805599453,
		},
		{
			name: "Test case 3",
			s:    []float64{-1, -2, -3},
			want: -0.3068528194400547,
		},
		{
			name: "Test case 4",
			s:    []float64{math.Inf(-1), math.Inf(1)},
			want: math.Inf(1),
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := LogSumExp(tt.s)
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("LogSumExp() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestDistance(t *testing.T) {
	tests := []struct {
		s      []float64
		t      []float64
		L      float64
		result float64
	}{
		// Add test cases here
	}

	for _, tt := range tests {
		dist := Distance(tt.s, tt.t, tt.L)
		if dist != tt.result {
			t.Errorf("Distance(%v, %v, %v) = %v; want %v", tt.s, tt.t, tt.L, dist, tt.result)
		}
	}
}
func TestHasNaN(t *testing.T) {
	tests := []struct {
		name     string
		input    []float64
		expected bool
	}{
		{name: "No NaN values", input: []float64{1.0, 2.0, 3.0}, expected: false},
		{name: "One NaN value", input: []float64{1.0, math.NaN(), 3.0}, expected: true},
		{name: "Multiple NaN values", input: []float64{math.NaN(), math.NaN(), math.NaN()}, expected: true},
		{name: "Empty slice", input: []float64{}, expected: false},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := HasNaN(tt.input)
			if result != tt.expected {
				t.Errorf("Expected HasNaN(%v) to be %v, but got %v", tt.input, tt.expected, result)
			}
		})
	}
}
func TestLogSpan(t *testing.T) {
	tests := []struct {
		dst  []float64
		l    float64
		u    float64
		want []float64
	}{
		{[]float64{0, 0, 0}, 1, 10, []float64{1, 10, 100}},
		{[]float64{0, 0, 0, 0}, 1, 100, []float64{1, 10, 100, 1000}},
		{[]float64{0, 0}, 0, 10, []float64{0, 10}},
		{[]float64{0, 0}, -1, 10, []float64{math.NaN(), math.NaN()}},
	}

	for _, tt := range tests {
		t.Run("", func(t *testing.T) {
			got := LogSpan(tt.dst, tt.l, tt.u)
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("LogSpan() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestProd(t *testing.T) {
	tests := []struct {
		input    []float64
		expected float64
	}{
		{[]float64{1.0, 2.0, 3.0}, 6.0},
		{[]float64{0.5, 0.5, 0.5}, 0.125},
		{[]float64{2.0, 2.0, 2.0}, 8.0},
		{[]float64{}, 1.0},
	}

	for _, test := range tests {
		result := Prod(test.input)
		if result != test.expected {
			t.Errorf("Prod(%v) = %f; want %f", test.input, result, test.expected)
		}
	}
}
func TestMaxIdx(t *testing.T) {
	tests := []struct {
		name     string
		input    []float64
		expected int
	}{
		{"Test case 1", []float64{1.0, 2.0, 3.0, 2.0, 1.0}, 2},
		{"Test case 2", []float64{3.0, 2.0, 1.0, 2.0, 3.0}, 0},
		{"Test case 3", []float64{1.0, 1.0, 1.0, 1.0, 1.0}, 0},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				if r := recover(); r != nil {
					t.Errorf("Panic: %v", r)
				}
			}()
			result := MaxIdx(tt.input)
			if result != tt.expected {
				t.Errorf("Expected index %d, but got %d", tt.expected, result)
			}
		})
	}
}
func TestMin(t *testing.T) {
	tests := []struct {
		name string
		s    []float64
		want float64
	}{
		{"Test1", []float64{1.0, 2.0, 3.0}, 1.0},
		{"Test2", []float64{5.0, 3.0, 7.0}, 3.0},
		{"Test3", []float64{10.0, 10.0, 10.0}, 10.0},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := Min(tt.s)
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Min() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestMinIdx(t *testing.T) {
	tests := []struct {
		name     string
		input    []float64
		expected int
	}{
		{"Test case 1", []float64{3.5, 2.0, 5.1, 1.2}, 3},
		{"Test case 2", []float64{10.5, 8.0, 12.3, 9.2}, 1},
		{"Test case 3", []float64{5.0, 5.0, 5.0, 5.0}, 0},
		{"Test case 4", []float64{5, 4, 3, 2, math.NaN()}, 0},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := MinIdx(tt.input)
			if result != tt.expected {
				t.Errorf("Expected index %d, but got %d", tt.expected, result)
			}
		})
	}
}
func TestScaleTo(t *testing.T) {
	// Test cases
	tests := []struct {
		dst []float64
		c   float64
		s   []float64
	}{
		{[]float64{1.0, 2.0, 3.0}, 2.0, []float64{4.0, 5.0, 6.0}},
		{[]float64{0.5, 0.5, 0.5}, 3.0, []float64{0.1, 0.2, 0.3}},
		{[]float64{1.0, 2.0, 3.0}, 0.0, []float64{4.0, 5.0, 6.0}},
	}

	for _, test := range tests {
		result := ScaleTo(test.dst, test.c, test.s)

		// Check if the length of the result matches the length of the destination slice
		if len(result) != len(test.dst) {
			t.Errorf("Expected result length %d, but got %d", len(test.dst), len(result))
		}

		// Check if each element in the result is correctly scaled
		for i := 0; i < len(result); i++ {
			expected := test.c * test.s[i]
			if result[i] != expected {
				t.Errorf("Expected %f, but got %f", expected, result[i])
			}
		}
	}
}
func TestSwap(t *testing.T) {
	// Create a sample argsort struct
	a := argsort{
		s:    []float64{1.0, 2.0, 3.0, 4.0, 5.0},
		inds: []int{0, 1, 2, 3, 4},
	}

	// Perform the Swap operation
	a.Swap(1, 3)

	// Check if the Swap operation was performed correctly
	expectedS := []float64{1.0, 4.0, 3.0, 2.0, 5.0}
	expectedInds := []int{0, 3, 2, 1, 4}

	for i := 0; i < len(a.s); i++ {
		if a.s[i] != expectedS[i] {
			t.Errorf("Expected s[%d] to be %f, but got %f", i, expectedS[i], a.s[i])
		}
		if a.inds[i] != expectedInds[i] {
			t.Errorf("Expected inds[%d] to be %d, but got %d", i, expectedInds[i], a.inds[i])
		}
	}
}
func TestCount(t *testing.T) {
	// Test cases
	tests := []struct {
		name     string
		f        func(float64) bool
		s        []float64
		expected int
	}{
		{
			name:     "count_numbers_greater_than_0",
			f:        func(x float64) bool { return x > 0 },
			s:        []float64{1.0, -2.0, 3.0, -4.0, 5.0},
			expected: 3,
		},
		{
			name:     "count_numbers_less_than_0",
			f:        func(x float64) bool { return x < 0 },
			s:        []float64{1.0, -2.0, 3.0, -4.0, 5.0},
			expected: 2,
		},
		{
			name:     "count_numbers_equal_to_0",
			f:        func(x float64) bool { return x == 0 },
			s:        []float64{0.0, 0.0, 0.0, 0.0, 0.0},
			expected: 5,
		},
	}

	// Run tests
	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := Count(test.f, test.s)
			if result != test.expected {
				t.Errorf("Expected %d, but got %d", test.expected, result)
			}
		})
	}
}
func TestDivTo(t *testing.T) {
	dst := make([]float64, 3)
	s := []float64{1.0, 2.0, 3.0}
	t := []float64{0.5, 1.0, 1.5}

	expected := []float64{2.0, 2.0, 2.0}
	result := DivTo(dst, s, t)

	if !reflect.DeepEqual(result, expected) {
		t.Errorf("DivTo did not perform element-wise division correctly. Expected: %v, Got: %v", expected, result)
	}
}

func TestDivTo_Panic(t *testing.T) {
	dst := make([]float64, 2)
	s := []float64{1.0, 2.0, 3.0}
	t := []float64{0.5, 1.0, 1.5}

	defer func() {
		if r := recover(); r == nil {
			t.Errorf("DivTo did not panic when argument lengths did not match")
		}
	}()

	DivTo(dst, s, t)
}
func TestMulTo(t *testing.T) {
	tests := []struct {
		dst []float64
		s   []float64
		t   []float64
		want []float64
	}{
		{[]float64{0, 0, 0}, []float64{1, 2, 3}, []float64{4, 5, 6}, []float64{4, 10, 18}},
		{[]float64{0, 0, 0}, []float64{0.5, 1.5, 2.5}, []float64{2, 3, 4}, []float64{1, 4.5, 10}},
		{[]float64{0, 0, 0}, []float64{0, 0, 0}, []float64{1, 2, 3}, []float64{0, 0, 0}},
	}

	for _, tt := range tests {
		t.Run("", func(t *testing.T) {
			if got := MulTo(tt.dst, tt.s, tt.t); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MulTo() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestNearestIdx(t *testing.T) {
	tests := []struct {
		s        []float64
		v        float64
		expected int
	}{
		{[]float64{1.0, 2.0, 3.0, 4.0, 5.0}, 3.5, 2},
		{[]float64{1.0, 2.0, 3.0, 4.0, 5.0}, 2.7, 2},
		{[]float64{1.0, 2.0, 3.0, 4.0, 5.0}, 0.5, 0},
		{[]float64{1.0, 2.0, 3.0, 4.0, 5.0}, 5.5, 4},
		{[]float64{1.0, 2.0, 3.0, 4.0, 5.0}, 2.0, 1},
	}

	for _, test := range tests {
		result := NearestIdx(test.s, test.v)
		if result != test.expected {
			t.Errorf("For s=%v and v=%f, expected %d but got %d", test.s, test.v, test.expected, result)
		}
	}
}
func TestEqualApprox(t *testing.T) {
	tests := []struct {
		slice1 []float64
		slice2 []float64
		tol    float64
		expected bool
	}{
		{[]float64{1.0, 2.0, 3.0}, []float64{1.0, 2.0, 3.0}, 0.1, true},
		{[]float64{1.0, 2.0, 3.0}, []float64{1.1, 2.1, 3.1}, 0.1, true},
		{[]float64{1.0, 2.0, 3.0}, []float64{1.2, 2.2, 3.2}, 0.1, false},
		{[]float64{1.0, 2.0, 3.0}, []float64{1.0, 2.0}, 0.1, false},
	}

	for _, test := range tests {
		result := EqualApprox(test.slice1, test.slice2, test.tol)
		if result != test.expected {
			t.Errorf("Expected EqualApprox(%v, %v, %f) to be %t, but got %t", test.slice1, test.slice2, test.tol, test.expected, result)
		}
	}
}
func TestSum(t *testing.T) {
	tests := []struct {
		name     string
		input    []float64
		expected float64
	}{
		{name: "Empty slice", input: []float64{}, expected: 0},
		{name: "Single element", input: []float64{5.5}, expected: 5.5},
		{name: "Multiple elements", input: []float64{1.1, 2.2, 3.3, 4.4}, expected: 11.0},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := Sum(tt.input)
			if result != tt.expected {
				t.Errorf("Sum(%v) = %f; want %f", tt.input, result, tt.expected)
			}
		})
	}
}
func TestDiv(t *testing.T) {
	// Test case 1: division of two slices of equal length
	dst1 := []float64{10.0, 20.0, 30.0}
	s1 := []float64{2.0, 4.0, 6.0}
	expected1 := []float64{5.0, 5.0, 5.0}
	Div(dst1, s1)
	for i := 0; i < len(dst1); i++ {
		if dst1[i] != expected1[i] {
			t.Errorf("Expected %f but got %f", expected1[i], dst1[i])
		}
	}

	// Test case 2: division of two slices of different lengths (should panic)
	dst2 := []float64{10.0, 20.0, 30.0}
	s2 := []float64{2.0, 4.0}
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("The code did not panic")
		}
	}()
	Div(dst2, s2)
}
func TestFind(t *testing.T) {
	// Test cases
	tests := []struct {
		inds []int
		f    func(float64) bool
		s    []float64
		k    int
		expected []int
	}{
		// Test case 1
		{
			inds: []int{},
			f: func(val float64) bool {
				return val > 0
			},
			s: []float64{1.0, -2.0, 3.0, -4.0, 5.0},
			k: 3,
			expected: []int{0, 2, 4},
		},
		// Test case 2
		{
			inds: []int{},
			f: func(val float64) bool {
				return val < 0
			},
			s: []float64{1.0, -2.0, 3.0, -4.0, 5.0},
			k: -1,
			expected: []int{1, 3},
		},
		// Test case 3
		{
			inds: []int{},
			f: func(val float64) bool {
				return val == 0
			},
			s: []float64{1.0, -2.0, 3.0, -4.0, 5.0},
			k: 2,
			expected: []int{},
		},
	}

	// Run tests
	for _, test := range tests {
		result, err := Find(test.inds, test.f, test.s, test.k)
		if err != nil {
			t.Errorf("Error occurred: %v", err)
		}

		if !equal(result, test.expected) {
			t.Errorf("For input %v, %v, %v, %v, expected %v, but got %v", test.inds, test.f, test.s, test.k, test.expected, result)
		}
	}
}

func equal(a, b []int) bool {
	if len(a) != len(b) {
		return false
	}
	for i := range a {
		if a[i] != b[i] {
			return false
		}
	}
	return true
}
func TestMul(t *testing.T) {
	tests := []struct {
		dst []float64
		s   []float64
		want []float64
	}{
		{[]float64{1.0, 2.0, 3.0}, []float64{2.0, 3.0, 4.0}, []float64{2.0, 6.0, 12.0}},
		{[]float64{1.0, 2.0, 3.0}, []float64{0.5, 0.5, 0.5}, []float64{0.5, 1.0, 1.5}},
		{[]float64{1.0, 2.0, 3.0}, []float64{0.0, 0.0, 0.0}, []float64{0.0, 0.0, 0.0}},
	}

	for _, tt := range tests {
		dst := make([]float64, len(tt.dst))
		copy(dst, tt.dst)
		Mul(dst, tt.s)
		if !reflect.DeepEqual(dst, tt.want) {
			t.Errorf("Mul(%v, %v) = %v, want %v", tt.dst, tt.s, dst, tt.want)
		}
	}
}
func TestSame(t *testing.T) {
	tests := []struct {
		slice1 []float64
		slice2 []float64
		expected bool
	}{
		{[]float64{1.0, 2.0, 3.0}, []float64{1.0, 2.0, 3.0}, true},
		{[]float64{1.0, 2.0, math.NaN()}, []float64{1.0, 2.0, math.NaN()}, true},
		{[]float64{1.0, 2.0, 3.0}, []float64{1.0, 2.0}, false},
		{[]float64{1.0, 2.0, 3.0}, []float64{1.0, 2.0, 4.0}, false},
	}

	for _, test := range tests {
		result := Same(test.slice1, test.slice2)
		if result != test.expected {
			t.Errorf("Expected Same(%v, %v) to be %v, but got %v", test.slice1, test.slice2, test.expected, result)
		}
	}
}
func TestAddTo(t *testing.T) {
	tests := []struct {
		name string
		dst  []float64
		s    []float64
		t    []float64
		want []float64
	}{
		{
			name: "AddTo test case 1",
			dst:  []float64{1.0, 2.0, 3.0},
			s:    []float64{4.0, 5.0, 6.0},
			t:    []float64{7.0, 8.0, 9.0},
			want: []float64{12.0, 15.0, 18.0},
		},
		{
			name: "AddTo test case 2",
			dst:  []float64{1.0, 2.0},
			s:    []float64{4.0, 5.0, 6.0},
			t:    []float64{7.0, 8.0, 9.0},
			want: nil, // Expecting panic due to mismatched lengths
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				if r := recover(); r == nil {
					t.Errorf("AddTo did not panic")
				}
			}()
			got := make([]float64, len(tt.dst))
			AddTo(got, tt.s, tt.t)
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("AddTo = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestEqualLengths(t *testing.T) {
	// Test case with equal lengths
	slice1 := []float64{1.0, 2.0, 3.0}
	slice2 := []float64{4.0, 5.0, 6.0}
	slice3 := []float64{7.0, 8.0, 9.0}

	result := EqualLengths(slice1, slice2, slice3)
	if !result {
		t.Errorf("Expected true, got false")
	}

	// Test case with unequal lengths
	slice4 := []float64{1.0, 2.0, 3.0}
	slice5 := []float64{4.0, 5.0}
	slice6 := []float64{7.0, 8.0, 9.0}

	result = EqualLengths(slice4, slice5, slice6)
	if result {
		t.Errorf("Expected false, got true")
	}

	// Test case with empty slices
	result = EqualLengths([]float64{}, []float64{}, []float64{})
	if !result {
		t.Errorf("Expected true, got false")
	}
}
func TestNearestIdxForSpan(t *testing.T) {
	tests := []struct {
		n        int
		l        float64
		u        float64
		v        float64
		expected int
	}{
		// Add test cases here
	}

	for _, test := range tests {
		result := NearestIdxForSpan(test.n, test.l, test.u, test.v)
		if result != test.expected {
			t.Errorf("For n=%d, l=%f, u=%f, v=%f - Expected: %d, but got: %d", test.n, test.l, test.u, test.v, test.expected, result)
		}
	}
}
