func TestSpan(t *testing.T) {
	tests := []struct {
		dst []float64
		l   float64
		u   float64
	}{
		// Add test cases here
	}

	for _, tt := range tests {
		result := Span(tt.dst, tt.l, tt.u)

		// Add assertions here to validate the result
	}
}
func TestSubTo(t *testing.T) {
	dst := []float64{1.0, 2.0, 3.0}
	s := []float64{4.0, 5.0, 6.0}
	t := []float64{7.0, 8.0, 9.0}

	expected := []float64{3.0, 3.0, 3.0}
	result := SubTo(dst, s, t)

	if !reflect.DeepEqual(result, expected) {
		t.Errorf("SubTo did not return the expected result. Got: %v, Want: %v", result, expected)
	}
}
func TestSum(t *testing.T) {
	tests := []struct {
		name     string
		input    []float64
		expected float64
	}{
		{name: "Empty slice", input: []float64{}, expected: 0},
		{name: "Single element", input: []float64{5.5}, expected: 5.5},
		{name: "Multiple elements", input: []float64{1.1, 2.2, 3.3, 4.4}, expected: 11.0},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := Sum(tt.input)
			if result != tt.expected {
				t.Errorf("Sum(%v) = %f; want %f", tt.input, result, tt.expected)
			}
		})
	}
}
func TestDivTo(t *testing.T) {
	dst := make([]float64, 3)
	s := []float64{1.0, 2.0, 3.0}
	tInput := []float64{2.0, 2.0, 2.0}

	expected := []float64{0.5, 1.0, 1.5}
	result := DivTo(dst, s, tInput)

	if !reflect.DeepEqual(result, expected) {
		t.Errorf("DivTo did not return the expected result. Got: %v, Want: %v", result, expected)
	}
}
func TestEqual(t *testing.T) {
	tests := []struct {
		slice1 []float64
		slice2 []float64
		expected bool
	}{
		{[]float64{1.0, 2.0, 3.0}, []float64{1.0, 2.0, 3.0}, true},
		{[]float64{1.0, 2.0, 3.0}, []float64{1.0, 2.0, 4.0}, false},
		{[]float64{1.0, 2.0}, []float64{1.0, 2.0, 3.0}, false},
		{[]float64{}, []float64{}, true},
	}

	for _, test := range tests {
		result := Equal(test.slice1, test.slice2)
		if result != test.expected {
			t.Errorf("Expected Equal(%v, %v) to be %t, but got %t", test.slice1, test.slice2, test.expected, result)
		}
	}
}
func TestMin(t *testing.T) {
	tests := []struct {
		input    []float64
		expected float64
	}{
		{[]float64{1.0, 2.0, 3.0}, 1.0},
		{[]float64{5.5, 2.3, 8.9, 1.2}, 1.2},
		{[]float64{-1.0, -2.0, -3.0}, -3.0},
	}

	for _, test := range tests {
		result := Min(test.input)
		if result != test.expected {
			t.Errorf("For %v, expected %f but got %f", test.input, test.expected, result)
		}
	}
}
func TestNearestIdxForSpan(t *testing.T) {
	tests := []struct {
		n        int
		l, u, v  float64
		expected int
	}{
		// Add test cases here
	}

	for _, test := range tests {
		result := NearestIdxForSpan(test.n, test.l, test.u, test.v)
		if result != test.expected {
			t.Errorf("For n=%d, l=%f, u=%f, v=%f - Expected: %d, but got %d", test.n, test.l, test.u, test.v, test.expected, result)
		}
	}
}
func TestSumCompensated(t *testing.T) {
	tests := []struct {
		input    []float64
		expected float64
	}{
		{[]float64{1.0, 2.0, 3.0}, 6.0},
		{[]float64{0.1, 0.2, 0.3}, 0.6},
		{[]float64{0.1, -0.1, 0.1}, 0.1},
		{[]float64{0.1, -0.1, 0.2}, 0.2},
	}

	for _, test := range tests {
		result := SumCompensated(test.input)
		if math.Abs(result-test.expected) > 1e-10 {
			t.Errorf("SumCompensated(%v) = %v, want %v", test.input, result, test.expected)
		}
	}
}
func TestLess(t *testing.T) {
	tests := []struct {
		name string
		args argsort
		i    int
		j    int
		want bool
	}{
		// Add test cases here
		{
			name: "Test case 1",
			args: argsort{s: []float64{1.0, 2.0, 3.0, 4.0, 5.0}},
			i:    2,
			j:    4,
			want: true,
		},
		{
			name: "Test case 2",
			args: argsort{s: []float64{5.0, 4.0, 3.0, 2.0, 1.0}},
			i:    0,
			j:    3,
			want: false,
		},
		// Add more test cases as needed
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			a := argsort(tt.args)
			if got := a.Less(tt.i, tt.j); got != tt.want {
				t.Errorf("Less() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestWithin(t *testing.T) {
	tests := []struct {
		name     string
		s        []float64
		v        float64
		expected int
	}{
		{"Test case 1", []float64{1.0, 2.0, 3.0, 4.0, 5.0}, 3.5, 2},
		{"Test case 2", []float64{1.0, 2.0, 3.0, 4.0, 5.0}, 0.5, -1},
		{"Test case 3", []float64{1.0, 2.0, 3.0, 4.0, 5.0}, 5.0, -1},
		{"Test case 4", []float64{1.0, 2.0, 3.0, 4.0, 5.0}, 2.0, 1},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := Within(tt.s, tt.v)
			if !reflect.DeepEqual(result, tt.expected) {
				t.Errorf("Expected %d, but got %d", tt.expected, result)
			}
		})
	}
}
func TestArgsort(t *testing.T) {
	dst := []float64{3.5, 1.2, 4.7, 2.1}
	inds := make([]int, len(dst))

	Argsort(dst, inds)

	expectedInds := []int{1, 3, 0, 2}

	if !reflect.DeepEqual(inds, expectedInds) {
		t.Errorf("Expected inds to be %v, but got %v", expectedInds, inds)
	}
}
func TestMax(t *testing.T) {
	tests := []struct {
		input    []float64
		expected float64
	}{
		{[]float64{1.0, 2.0, 3.0}, 3.0},
		{[]float64{5.5, 2.3, 8.9, 4.2}, 8.9},
		{[]float64{-1.0, -5.0, -3.0}, -1.0},
	}

	for _, test := range tests {
		result := Max(test.input)
		if result != test.expected {
			t.Errorf("For %v, expected %f but got %f", test.input, test.expected, result)
		}
	}
}
func TestMinIdx(t *testing.T) {
	tests := []struct {
		input []float64
		want  int
	}{
		{[]float64{1.0, 2.0, 3.0, 4.0, 5.0}, 0},
		{[]float64{5.0, 4.0, 3.0, 2.0, 1.0}, 4},
		{[]float64{3.0, 1.0, 4.0, 2.0, 5.0}, 1},
		{[]float64{5.0, 4.0, 3.0, 2.0, math.NaN()}, 4},
		{[]float64{math.NaN(), math.NaN(), math.NaN()}, 0},
	}

	for _, test := range tests {
		got := MinIdx(test.input)
		if got != test.want {
			t.Errorf("MinIdx(%v) = %v; want %v", test.input, got, test.want)
		}
	}
}
func TestScale(t *testing.T) {
	dst := []float64{1.0, 2.0, 3.0}
	Scale(2.0, dst)

	expected := []float64{2.0, 4.0, 6.0}

	for i := 0; i < len(dst); i++ {
		if dst[i] != expected[i] {
			t.Errorf("Expected %f but got %f at index %d", expected[i], dst[i], i)
		}
	}
}
func TestSwap(t *testing.T) {
	// create a sample argsort struct
	a := argsort{
		s:    []float64{1.0, 2.0, 3.0, 4.0},
		inds: []int{0, 1, 2, 3},
	}

	// perform the Swap operation
	a.Swap(1, 3)

	// check if the elements have been swapped correctly
	if a.s[1] != 4.0 || a.s[3] != 2.0 || a.inds[1] != 3 || a.inds[3] != 1 {
		t.Errorf("Swap operation did not work as expected")
	}
}
func TestArgsortStable(t *testing.T) {
	dst := []float64{3.5, 1.2, 5.7, 2.1}
	inds := make([]int, len(dst))

	ArgsortStable(dst, inds)

	expectedInds := []int{1, 3, 0, 2}

	if !reflect.DeepEqual(inds, expectedInds) {
		t.Errorf("Expected %v, but got %v", expectedInds, inds)
	}
}
func TestEqualFunc(t *testing.T) {
	slice1 := []float64{1.1, 2.2, 3.3}
	slice2 := []float64{1.1, 2.2, 3.3}

	result := EqualFunc(slice1, slice2, func(a, b float64) bool {
		return a == b
	})

	if !result {
		t.Error("Expected slices to be equal, but they are not")
	}
}

func TestEqualFunc_NotEqual(t *testing.T) {
	slice1 := []float64{1.1, 2.2, 3.3}
	slice2 := []float64{1.1, 2.2, 4.4}

	result := EqualFunc(slice1, slice2, func(a, b float64) bool {
		return a == b
	})

	if result {
		t.Error("Expected slices to be not equal, but they are")
	}
}

func TestEqualFunc_EmptySlices(t *testing.T) {
	slice1 := []float64{}
	slice2 := []float64{}

	result := EqualFunc(slice1, slice2, func(a, b float64) bool {
		return a == b
	})

	if !result {
		t.Error("Expected empty slices to be equal, but they are not")
	}
}
func TestSub(t *testing.T) {
	dst := []float64{1.0, 2.0, 3.0}
	s := []float64{0.5, 1.0, 1.5}

	Sub(dst, s)

	expected := []float64{0.5, 1.0, 1.5}

	for i := 0; i < len(dst); i++ {
		if dst[i] != expected[i] {
			t.Errorf("Subtraction incorrect at index %d, got: %f, want: %f", i, dst[i], expected[i])
		}
	}
}

func TestSubDifferentLengths(t *testing.T) {
	dst := []float64{1.0, 2.0, 3.0}
	s := []float64{0.5, 1.0}

	defer func() {
		if r := recover(); r == nil {
			t.Errorf("Subtraction with different lengths did not panic")
		}
	}()

	Sub(dst, s)
}
func TestLogSumExp(t *testing.T) {
	tests := []struct {
		name string
		s    []float64
		want float64
	}{
		{
			name: "Test case 1",
			s:    []float64{1, 2, 3, 4, 5},
			want: 5.451914395937685,
		},
		{
			name: "Test case 2",
			s:    []float64{0, 0, 0, 0, 0},
			want: 0.6931471805599453,
		},
		{
			name: "Test case 3",
			s:    []float64{-1, -2, -3, -4, -5},
			want: -0.3068528194400547,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := LogSumExp(tt.s); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("LogSumExp() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestSame(t *testing.T) {
	tests := []struct {
		s      []float64
		t      []float64
		result bool
	}{
		{[]float64{1.0, 2.0, 3.0}, []float64{1.0, 2.0, 3.0}, true},
		{[]float64{1.0, 2.0, 3.0}, []float64{1.0, 2.0, 4.0}, false},
		{[]float64{1.0, 2.0, math.NaN()}, []float64{1.0, 2.0, math.NaN()}, true},
		{[]float64{1.0, 2.0, math.NaN()}, []float64{1.0, 2.0, 3.0}, false},
	}

	for _, test := range tests {
		result := Same(test.s, test.t)
		if result != test.result {
			t.Errorf("Expected Same(%v, %v) to be %v, but got %v", test.s, test.t, test.result, result)
		}
	}
}
func TestMulTo(t *testing.T) {
	tests := []struct {
		dst []float64
		s   []float64
		t   []float64
		want []float64
	}{
		{[]float64{0, 0, 0}, []float64{1, 2, 3}, []float64{4, 5, 6}, []float64{4, 10, 18}},
		{[]float64{0, 0, 0}, []float64{0.5, 0.5, 0.5}, []float64{2, 4, 6}, []float64{1, 2, 3}},
		{[]float64{0, 0, 0}, []float64{0, 0, 0}, []float64{1, 2, 3}, []float64{0, 0, 0}},
	}

	for _, tt := range tests {
		t.Run("", func(t *testing.T) {
			if got := MulTo(tt.dst, tt.s, tt.t); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("MulTo() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestNearestIdx(t *testing.T) {
	tests := []struct {
		s      []float64
		v      float64
		expect int
	}{
		// Add test cases here
	}

	for _, test := range tests {
		result := NearestIdx(test.s, test.v)
		if result != test.expect {
			t.Errorf("Expected NearestIdx(%v, %v) to return %d, but got %d", test.s, test.v, test.expect, result)
		}
	}
}
func TestProd(t *testing.T) {
	tests := []struct {
		name     string
		input    []float64
		expected float64
	}{
		{"Test case 1", []float64{1.0, 2.0, 3.0}, 6.0},
		{"Test case 2", []float64{0.5, 0.5, 0.5}, 0.125},
		{"Test case 3", []float64{2.0, 2.0, 2.0}, 8.0},
		{"Test case 4", []float64{1.0, 1.0, 1.0}, 1.0},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := Prod(test.input)
			if result != test.expected {
				t.Errorf("Expected %f, but got %f", test.expected, result)
			}
		})
	}
}
func TestAddTo(t *testing.T) {
	dst := []float64{1.0, 2.0, 3.0}
	s := []float64{4.0, 5.0, 6.0}
	t := []float64{7.0, 8.0, 9.0}

	expected := []float64{11.0, 13.0, 15.0}
	result := AddTo(dst, s, t)

	if !reflect.DeepEqual(result, expected) {
		t.Errorf("AddTo did not return the expected result. Expected: %v, Got: %v", expected, result)
	}
}
func TestArgsort_Len(t *testing.T) {
	s := []float64{1.1, 2.2, 3.3}
	argsort := argsort{s: s}

	expectedLength := len(s)
	result := argsort.Len()

	if result != expectedLength {
		t.Errorf("Expected length: %d, but got: %d", expectedLength, result)
	}
}
func TestEqualLengths(t *testing.T) {
	tests := []struct {
		slices   [][]float64
		expected bool
	}{
		{[][]float64{{1.0, 2.0, 3.0}, {4.0, 5.0, 6.0}}, true},
		{[][]float64{{1.0, 2.0, 3.0}, {4.0, 5.0}}, false},
		{[][]float64{{1.0, 2.0}, {3.0, 4.0}, {5.0, 6.0}}, true},
		{[][]float64{{1.0, 2.0}, {3.0, 4.0}, {5.0}}, false},
		{[][]float64{}, true},
	}

	for _, test := range tests {
		result := EqualLengths(test.slices...)
		if result != test.expected {
			t.Errorf("Expected EqualLengths%v to be %v, but got %v", test.slices, test.expected, result)
		}
	}
}
func TestMaxIdx(t *testing.T) {
	tests := []struct {
		input []float64
		expected int
	}{
		{[]float64{1.0, 2.0, 3.0, 4.0, 5.0}, 4},
		{[]float64{5.0, 4.0, 3.0, 2.0, 1.0}, 0},
		{[]float64{3.0, 1.0, 4.0, 2.0, 5.0}, 4},
		{[]float64{1.0, 1.0, 1.0, 1.0, 1.0}, 0},
		{[]float64{}, 0},
	}

	for _, test := range tests {
		result := MaxIdx(test.input)
		if result != test.expected {
			t.Errorf("For input %v, expected %d but got %d", test.input, test.expected, result)
		}
	}
}
func TestDistance(t *testing.T) {
	s := []float64{1.0, 2.0, 3.0}
	t := []float64{4.0, 5.0, 6.0}
	L := 2.0

	expected := math.Sqrt(27.0)
	result := Distance(s, t, L)

	if result != expected {
		t.Errorf("Distance calculation incorrect, got: %f, want: %f", result, expected)
	}
}
func TestHasNaN(t *testing.T) {
	tests := []struct {
		name     string
		input    []float64
		expected bool
	}{
		{"Has NaN value", []float64{1.0, 2.0, math.NaN(), 4.0}, true},
		{"No NaN value", []float64{1.0, 2.0, 3.0, 4.0}, false},
		{"Empty slice", []float64{}, false},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := HasNaN(tt.input)
			if result != tt.expected {
				t.Errorf("Expected HasNaN(%v) to be %v, but got %v", tt.input, tt.expected, result)
			}
		})
	}
}
func TestReverse(t *testing.T) {
	input := []float64{1.1, 2.2, 3.3, 4.4, 5.5}
	expected := []float64{5.5, 4.4, 3.3, 2.2, 1.1}

	Reverse(input)

	assert.Equal(t, expected, input, "Reverse did not reverse the slice correctly")
}
func TestCumSum(t *testing.T) {
	tests := []struct {
		dst []float64
		s   []float64
		want []float64
	}{
		{[]float64{1.0, 2.0, 3.0}, []float64{4.0, 5.0, 6.0}, []float64{5.0, 7.0, 9.0}},
		{[]float64{0.5, 0.5}, []float64{0.25, 0.75}, []float64{0.75, 1.25}},
		{[]float64{10.0, 20.0, 30.0}, []float64{1.0, 2.0, 3.0}, []float64{11.0, 22.0, 33.0}},
	}

	for _, tt := range tests {
		got := CumSum(tt.dst, tt.s)
		if !reflect.DeepEqual(got, tt.want) {
			t.Errorf("CumSum(%v, %v) = %v, want %v", tt.dst, tt.s, got, tt.want)
		}
	}
}
func TestDiv(t *testing.T) {
	dst := []float64{10.0, 20.0, 30.0}
	s := []float64{2.0, 5.0, 10.0}

	Div(dst, s)

	expected := []float64{5.0, 4.0, 3.0}

	for i := 0; i < len(dst); i++ {
		if dst[i] != expected[i] {
			t.Errorf("Div failed, expected %f but got %f", expected[i], dst[i])
		}
	}
}

func TestDivEmptySlice(t *testing.T) {
	dst := []float64{}
	s := []float64{}

	Div(dst, s)

	if len(dst) != 0 {
		t.Errorf("Div failed, expected empty slice but got %v", dst)
	}
}

func TestDivDifferentLength(t *testing.T) {
	dst := []float64{10.0, 20.0}
	s := []float64{2.0, 5.0, 10.0}

	defer func() {
		if r := recover(); r == nil {
			t.Errorf("Div did not panic with different slice lengths")
		}
	}()

	Div(dst, s)
}
func TestDot(t *testing.T) {
	s1 := []float64{1.0, 2.0, 3.0}
	s2 := []float64{4.0, 5.0, 6.0}

	expected := 32.0
	result := Dot(s1, s2)

	if result != expected {
		t.Errorf("Dot product of %v and %v was incorrect, got: %f, want: %f", s1, s2, result, expected)
	}
}

func TestDot_Panic(t *testing.T) {
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("The code did not panic as expected")
		}
	}()

	s1 := []float64{1.0, 2.0, 3.0}
	s2 := []float64{4.0, 5.0}

	Dot(s1, s2)
}
func TestAddConst(t *testing.T) {
	dst := []float64{1.0, 2.0, 3.0, 4.0}
	c := 5.0

	AddConst(c, dst)

	expected := []float64{6.0, 7.0, 8.0, 9.0}

	for i := 0; i < len(dst); i++ {
		if dst[i] != expected[i] {
			t.Errorf("Expected %f but got %f at index %d", expected[i], dst[i], i)
		}
	}
}
func TestAddScaledTo(t *testing.T) {
	dst := []float64{1.0, 2.0, 3.0}
	y := []float64{4.0, 5.0, 6.0}
	alpha := 2.0
	s := []float64{7.0, 8.0, 9.0}

	expected := []float64{15.0, 18.0, 21.0}
	result := AddScaledTo(dst, y, alpha, s)

	if !reflect.DeepEqual(result, expected) {
		t.Errorf("AddScaledTo did not return the expected result. Expected: %v, Got: %v", expected, result)
	}
}
func TestCount(t *testing.T) {
	tests := []struct {
		name     string
		f        func(float64) bool
		s        []float64
		expected int
	}{
		{
			name:     "count positive numbers",
			f:        func(x float64) bool { return x > 0 },
			s:        []float64{1.5, -2.3, 4.7, -0.8, 3.2},
			expected: 3,
		},
		{
			name:     "count even numbers",
			f:        func(x float64) bool { return int(x)%2 == 0 },
			s:        []float64{2.0, 3.0, 4.0, 5.0, 6.0},
			expected: 3,
		},
		{
			name:     "count numbers greater than 10",
			f:        func(x float64) bool { return x > 10 },
			s:        []float64{5.5, 10.2, 15.7, 8.3, 12.1},
			expected: 2,
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			result := Count(test.f, test.s)
			if result != test.expected {
				t.Errorf("Expected %d, but got %d", test.expected, result)
			}
		})
	}
}
func TestCumProd(t *testing.T) {
	dst := []float64{1, 2, 3, 4}
	s := []float64{2, 3, 4, 5}

	result := CumProd(dst, s)

	expected := []float64{2, 6, 12, 20}

	for i := 0; i < len(result); i++ {
		if result[i] != expected[i] {
			t.Errorf("Expected %f at index %d, but got %f", expected[i], i, result[i])
		}
	}
}

func TestCumProd_Panic(t *testing.T) {
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("The code did not panic as expected")
		}
	}()

	dst := []float64{1, 2, 3}
	s := []float64{2, 3, 4, 5}

	CumProd(dst, s)
}
func TestNorm(t *testing.T) {
	tests := []struct {
		input []float64
		L     float64
		want  float64
	}{
		{[]float64{1, 2, 3}, 2, 3.7416573867739413},
		{[]float64{1, 2, 3}, 1, 6},
		{[]float64{1, 2, 3}, math.Inf(1), 3},
		{[]float64{1, 2, 3}, 3, 3.3019272488946263},
		{[]float64{}, 2, 0},
	}

	for _, test := range tests {
		got := Norm(test.input, test.L)
		if got != test.want {
			t.Errorf("Norm(%v, %v) = %v; want %v", test.input, test.L, got, test.want)
		}
	}
}
func TestScaleTo(t *testing.T) {
	dst := make([]float64, 3)
	c := 2.0
	s := []float64{1.0, 2.0, 3.0}

	expected := []float64{2.0, 4.0, 6.0}
	result := ScaleTo(dst, c, s)

	if !reflect.DeepEqual(result, expected) {
		t.Errorf("ScaleTo did not return the expected result. Got: %v, Want: %v", result, expected)
	}
}
func TestEqualApprox(t *testing.T) {
	tests := []struct {
		s1   []float64
		s2   []float64
		tol  float64
		want bool
	}{
		{[]float64{1.0, 2.0, 3.0}, []float64{1.0, 2.0, 3.0}, 0.1, true},
		{[]float64{1.0, 2.0, 3.0}, []float64{1.1, 2.1, 3.1}, 0.1, true},
		{[]float64{1.0, 2.0, 3.0}, []float64{1.2, 2.2, 3.2}, 0.1, false},
		{[]float64{1.0, 2.0, 3.0}, []float64{1.1, 2.1, 3.1, 4.0}, 0.1, false},
	}

	for _, test := range tests {
		got := EqualApprox(test.s1, test.s2, test.tol)
		if got != test.want {
			t.Errorf("EqualApprox(%v, %v, %f) = %t, want %t", test.s1, test.s2, test.tol, got, test.want)
		}
	}
}
func TestFind(t *testing.T) {
	tests := []struct {
		inds []int
		f    func(float64) bool
		s    []float64
		k    int
		want []int
		err  error
	}{
		// Test cases go here
	}

	for _, tt := range tests {
		got, err := Find(tt.inds, tt.f, tt.s, tt.k)
		if !reflect.DeepEqual(got, tt.want) || err != tt.err {
			t.Errorf("Find(%v, %v, %v, %v) = %v, %v; want %v, %v", tt.inds, tt.f, tt.s, tt.k, got, err, tt.want, tt.err)
		}
	}
}
func TestLogSpan(t *testing.T) {
	tests := []struct {
		dst      []float64
		l        float64
		u        float64
		expected []float64
	}{
		{[]float64{0, 0, 0}, 1, 10, []float64{1, 3.1622776601683795, 10}},
		{[]float64{0, 0, 0, 0}, 2, 8, []float64{2, 4, 8, 8}},
		{[]float64{0, 0, 0, 0, 0}, 5, 15, []float64{5, 7.0710678118654755, 10, 12.24744871391589, 15}},
	}

	for _, test := range tests {
		result := LogSpan(test.dst, test.l, test.u)
		if !reflect.DeepEqual(result, test.expected) {
			t.Errorf("LogSpan(%v, %f, %f) = %v, expected %v", test.dst, test.l, test.u, result, test.expected)
		}
	}
}
func TestMul(t *testing.T) {
	tests := []struct {
		dst []float64
		s   []float64
		want []float64
	}{
		{[]float64{1.0, 2.0, 3.0}, []float64{2.0, 3.0, 4.0}, []float64{2.0, 6.0, 12.0}},
		{[]float64{0.5, 1.5, 2.5}, []float64{2.0, 0.5, 1.0}, []float64{1.0, 0.75, 2.5}},
		{[]float64{0.0, 0.0, 0.0}, []float64{2.0, 3.0, 4.0}, []float64{0.0, 0.0, 0.0}},
	}

	for _, tt := range tests {
		dst := make([]float64, len(tt.dst))
		copy(dst, tt.dst)
		Mul(dst, tt.s)
		if !reflect.DeepEqual(dst, tt.want) {
			t.Errorf("Mul(%v, %v) = %v, want %v", tt.dst, tt.s, dst, tt.want)
		}
	}
}
func TestAdd(t *testing.T) {
	dst := []float64{1.0, 2.0, 3.0}
	s := []float64{4.0, 5.0, 6.0}

	expected := []float64{5.0, 7.0, 9.0}

	Add(dst, s)

	if !reflect.DeepEqual(dst, expected) {
		t.Errorf("Add function did not add the slices correctly. Expected: %v, Got: %v", expected, dst)
	}
}
func TestAddScaled(t *testing.T) {
	dst := []float64{1.0, 2.0, 3.0}
	alpha := 2.0
	s := []float64{0.5, 1.0, 1.5}

	AddScaled(dst, alpha, s)

	expected := []float64{2.0, 4.0, 6.0}
	for i := 0; i < len(dst); i++ {
		if dst[i] != expected[i] {
			t.Errorf("Expected %f but got %f at index %d", expected[i], dst[i], i)
		}
	}
}

func TestAddScaledDifferentLength(t *testing.T) {
	dst := []float64{1.0, 2.0, 3.0}
	alpha := 2.0
	s := []float64{0.5, 1.0}

	defer func() {
		if r := recover(); r == nil {
			t.Errorf("Expected panic due to different lengths but no panic occurred")
		}
	}()

	AddScaled(dst, alpha, s)
}
