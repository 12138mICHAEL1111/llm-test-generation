func TestSub(t *testing.T) {
	dst := []float64{1, 2, 3, 4}
	s := []float64{1, 1, 2, 2}
	expected := []float64{0, 1, 1, 2}
	Sub(dst, s)
	assert.Equal(t, expected, dst)
}
func TestReverse(t *testing.T) {
	tests := []struct {
		name  string
		input []float64
		want  []float64
	}{
		{
			name:  "empty slice",
			input: []float64{},
			want:  []float64{},
		},
		{
			name:  "single element",
			input: []float64{1.0},
			want:  []float64{1.0},
		},
		{
			name:  "multiple elements",
			input: []float64{1.0, 2.0, 3.0, 4.0},
			want:  []float64{4.0, 3.0, 2.0, 1.0},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			Reverse(tt.input)
			if !reflect.DeepEqual(tt.input, tt.want) {
				t.Errorf("Reverse() = %v, want %v", tt.input, tt.want)
			}
		})
	}
}
func TestSum(t *testing.T) {
	tests := []struct {
		name string
		s    []float64
		want float64
	}{
		{
			name: "Empty slice",
			s:    []float64{},
			want: 0,
		},
		{
			name: "Single element",
			s:    []float64{1.23},
			want: 1.23,
		},
		{
			name: "Multiple elements",
			s:    []float64{1.23, 4.56, 7.89},
			want: 13.68,
		},
		{
			name: "Negative elements",
			s:    []float64{-1.23, -4.56, -7.89},
			want: -13.68,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := Sum(tt.s); got != tt.want {
				t.Errorf("Sum() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestAddConst(t *testing.T) {
	for _, test := range []struct {
		c    float64
		dst  []float64
		want []float64
	}{
		{
			c:    1,
			dst:  []float64{2, 3, 4},
			want: []float64{3, 4, 5},
		},
		{
			c:    -1,
			dst:  []float64{2, 3, 4},
			want: []float64{1, 2, 3},
		},
		{
			c:    0,
			dst:  []float64{2, 3, 4},
			want: []float64{2, 3, 4},
		},
	} {
		AddConst(test.c, test.dst)
		if !floats.Equal(test.dst, test.want) {
			t.Errorf("unexpected result for c = %v and dst = %v: got %v, want %v", test.c, test.dst, test.dst, test.want)
		}
	}
}
func TestDot(t *testing.T) {
	s1 := []float64{1, 2, 3}
	s2 := []float64{4, 5, 6}
	expected := 32.0
	result := Dot(s1, s2)
	if result != expected {
		t.Errorf("Dot(%v, %v) = %v, expected %v", s1, s2, result, expected)
	}

	// Test empty slices
	s1 = []float64{}
	s2 = []float64{}
	expected = 0.0
	result = Dot(s1, s2)
	if result != expected {
		t.Errorf("Dot(%v, %v) = %v, expected %v", s1, s2, result, expected)
	}

	// Test slices of different lengths
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("Dot did not panic with slices of different lengths")
		}
	}()
	s1 = []float64{1, 2, 3}
	s2 = []float64{4, 5}
	Dot(s1, s2)
}
func TestScale(t *testing.T) {
	s := []float64{1, 2, 3, 4}
	want := []float64{2, 4, 6, 8}
	Scale(2, s)
	if !floats.Equal(s, want) {
		t.Errorf("got %v, want %v", s, want)
	}
}
func TestArgsort(t *testing.T) {
	dst := []float64{3, 1, 4, 2}
	inds := make([]int, len(dst))
	Argsort(dst, inds)

	expectedInds := []int{1, 3, 0, 2}
	for i := range inds {
		if inds[i] != expectedInds[i] {
			t.Errorf("Index %d mismatch. Expected: %d, Got: %d\n", i, expectedInds[i], inds[i])
		}
	}
}
func TestEqualLengths(t *testing.T) {
	type args struct {
		slices [][]float64
	}
	tests := []struct {
		name string
		args args
		want bool
	}{
		{
			name: "Empty slices",
			args: args{
				slices: [][]float64{},
			},
			want: true,
		},
		{
			name: "Equal length slices",
			args: args{
				slices: [][]float64{
					{1, 2, 3},
					{4, 5, 6},
					{7, 8, 9},
				},
			},
			want: true,
		},
		{
			name: "Unequal length slices",
			args: args{
				slices: [][]float64{
					{1, 2, 3},
					{4, 5},
					{7, 8, 9},
				},
			},
			want: false,
		},
		{
			name: "Single slice",
			args: args{
				slices: [][]float64{
					{1, 2, 3},
				},
			},
			want: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := EqualLengths(tt.args.slices...); got != tt.want {
				t.Errorf("EqualLengths() = %v, want %v", got, tt.want)
			}
		})
	}
}
finish reason:safety
func TestArgsort_Len(t *testing.T) {
	type args struct {
		s []float64
	}
	tests := []struct {
		name string
		a    argsort
		want int
	}{
		{
			name: "EmptySlice",
			a:    argsort{s: []float64{}},
			want: 0,
		},
		{
			name: "NonEmptySlice",
			a:    argsort{s: []float64{1, 2, 3}},
			want: 3,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			a := argsort{
				s: tt.a.s,
			}
			if got := a.Len(); got != tt.want {
				t.Errorf("argsort.Len() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestEqualFunc(t *testing.T) {
	s1 := []float64{1, 2, 3, 4}
	s2 := []float64{1, 2, 3, 4}
	s3 := []float64{1, 2, 3}
	s4 := []float64{1, 2, 3, 5}

	if !EqualFunc(s1, s2, func(a, b float64) bool { return a == b }) {
		t.Errorf("Expected s1 and s2 to be equal")
	}

	if EqualFunc(s1, s3, func(a, b float64) bool { return a == b }) {
		t.Errorf("Expected s1 and s3 to be not equal")
	}

	if EqualFunc(s1, s4, func(a, b float64) bool { return a == b }) {
		t.Errorf("Expected s1 and s4 to be not equal")
	}
}
func TestSubTo(t *testing.T) {
	dst := make([]float64, 3)
	s := []float64{1, 2, 3}
	tt := []float64{4, 5, 6}
	want := []float64{-3, -3, -3}
	got := SubTo(dst, s, tt)
	assert.Equal(t, want, got)
}
func TestDiv(t *testing.T) {
	dst := make([]float64, 3)
	s := []float64{1, 2, 2}
	Div(dst, s)
	assert.Equal(t, []float64{1, 2, 2}, dst)
}
func TestHasNaN(t *testing.T) {
	tests := []struct {
		name string
		s    []float64
		want bool
	}{
		{
			name: "empty slice",
			s:    []float64{},
			want: false,
		},
		{
			name: "no NaN values",
			s:    []float64{1.0, 2.0, 3.0},
			want: false,
		},
		{
			name: "one NaN value",
			s:    []float64{1.0, math.NaN(), 3.0},
			want: true,
		},
		{
			name: "multiple NaN values",
			s:    []float64{math.NaN(), 1.0, math.NaN(), 3.0},
			want: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := HasNaN(tt.s); got != tt.want {
				t.Errorf("HasNaN() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestMax(t *testing.T) {
	tests := []struct {
		input []float64
		want  float64
	}{
		{[]float64{1, 2, 3, 4, 5}, 5},
		{[]float64{5, 4, 3, 2, 1}, 5},
		{[]float64{-1, -2, -3, -4, -5}, -1},
		{[]float64{-5, -4, -3, -2, -1}, -1},
		{[]float64{0, 0, 0, 0, 0}, 0},
		{[]float64{}, 0},
	}
	for i, tt := range tests {
		got := Max(tt.input)
		if got != tt.want {
			t.Errorf("Test %d: Max(%v) = %v, want %v", i, tt.input, got, tt.want)
		}
	}
}
func TestMin(t *testing.T) {
	tests := []struct {
		s        []float64
		expected float64
	}{
		{[]float64{1, 2, 3, 4, 5}, 1},
		{[]float64{5, 4, 3, 2, 1}, 1},
		{[]float64{1, 5, 2, 4, 3}, 1},
		{[]float64{-1, -2, -3, -4, -5}, -5},
		{[]float64{-5, -4, -3, -2, -1}, -5},
		{[]float64{-1, -5, -2, -4, -3}, -5},
		{[]float64{1, math.Inf(1)}, 1},
		{[]float64{math.Inf(1), 1}, 1},
		{[]float64{math.NaN(), 1}, math.NaN()},
	}

	for i, test := range tests {
		actual := Min(test.s)
		if ! (math.IsNaN(actual) && math.IsNaN(test.expected)) && actual != test.expected {
			t.Errorf("Test %d: Expected Min(%v) = %v, actual: %v", i, test.s, test.expected, actual)
		}
	}
}
func TestArgsort_Swap(t *testing.T) {
	type fields struct {
		s    []float64
		inds []int
	}
	type args struct {
		i int
		j int
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want  fields
	}{
		{
			name: "test swap in the middle",
			fields: fields{
				s:    []float64{1, 2, 3, 4, 5},
				inds: []int{0, 1, 2, 3, 4},
			},
			args: args{
				i: 1,
				j: 3,
			},
			want: fields{
				s:    []float64{1, 4, 3, 2, 5},
				inds: []int{0, 3, 2, 1, 4},
			},
		},
		{
			name: "test swap at the edge",
			fields: fields{
				s:    []float64{1, 2, 3, 4, 5},
				inds: []int{0, 1, 2, 3, 4},
			},
			args: args{
				i: 0,
				j: 4,
			},
			want: fields{
				s:    []float64{5, 2, 3, 4, 1},
				inds: []int{4, 1, 2, 3, 0},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			a := &argsort{
				s:    tt.fields.s,
				inds: tt.fields.inds,
			}
			a.Swap(tt.args.i, tt.args.j)
			if !reflect.DeepEqual(a.s, tt.want.s) {
				t.Errorf("Swap() s = %v, want %v", a.s, tt.want.s)
			}
			if !reflect.DeepEqual(a.inds, tt.want.inds) {
				t.Errorf("Swap() inds = %v, want %v", a.inds, tt.want.inds)
			}

		})
	}
}
func TestSumCompensated(t *testing.T) {
	tests := []struct {
		name  string
		input []float64
		want  float64
	}{
		{
			name:  "Empty slice",
			input: []float64{},
			want:  0.0,
		},
		{
			name:  "Single element",
			input: []float64{1.23},
			want:  1.23,
		},
		{
			name:  "Positive numbers",
			input: []float64{1.1, 2.2, 3.3},
			want:  6.6,
		},
		{
			name:  "Negative numbers",
			input: []float64{-1.1, -2.2, -3.3},
			want:  -6.6,
		},
		{
			name:  "Mixed positive and negative numbers",
			input: []float64{1.1, -2.2, 3.3, -4.4},
			want:  -2.2,
		},
		{
			name:  "Large numbers",
			input: []float64{1e10, 1e-10, 1e10, -1e10},
			want:  1e10,
		},
		{
			name:  "Small numbers",
			input: []float64{1e-10, 1e-10, 1e-10, 1e-10},
			want:  4e-10,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := SumCompensated(tt.input)
			if math.Abs(got-tt.want) > 1e-14 {
				t.Errorf("SumCompensated(%v) = %v, want %v", tt.input, got, tt.want)
			}
		})
	}
}
func TestArgsortStable(t *testing.T) {
	type args struct {
		dst  []float64
		inds []int
	}
	tests := []struct {
		name string
		args args
		want []int
	}{
		{"empty", args{[]float64{}, []int{}}, []int{}},
		{"one", args{[]float64{1}, []int{0}}, []int{0}},
		{"sorted", args{[]float64{1, 2, 3}, []int{0, 0, 0}}, []int{0, 1, 2}},
		{"unsorted", args{[]float64{3, 1, 2}, []int{0, 0, 0}}, []int{1, 2, 0}},
		{"duplicates", args{[]float64{1, 3, 2, 1, 3}, []int{0, 0, 0, 0, 0}}, []int{0, 3, 2, 1, 4}},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			ArgsortStable(tt.args.dst, tt.args.inds)
			if !reflect.DeepEqual(tt.args.inds, tt.want) {
				t.Errorf("ArgsortStable() = %v, want %v", tt.args.inds, tt.want)
			}
		})
	}
}
func TestLogSpan(t *testing.T) {
	tests := []struct {
		name string
		dst  []float64
		l    float64
		u    float64
		want []float64
	}{
		{
			name: "BasicTest",
			dst:  make([]float64, 5),
			l:    1.0,
			u:    10.0,
			want: []float64{1.0, 2.718281828459045, 7.38905609893065, 20.085536923187668, 54.598150033144236},
		},
		{
			name: "ZeroLowerBound",
			dst:  make([]float64, 3),
			l:    0.0,
			u:    2.0,
			want: []float64{0.0, 1.0, 7.38905609893065},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			LogSpan(tt.dst, tt.l, tt.u)
			for i := range tt.dst {
				if math.Abs(tt.dst[i]-tt.want[i]) > 1e-6 {
					t.Errorf("LogSpan() mismatch at index %d: got %v, want %v", i, tt.dst[i], tt.want[i])
				}
			}
		})
	}
}
finish reason:safety
func TestLogSumExp(t *testing.T) {
	tests := []struct {
		s        []float64
		expected float64
	}{
		{[]float64{1, 2, 3}, 3.4076059572234355},
		{[]float64{-1, -2, -3}, -0.5923940427765645},
		{[]float64{1, 1, 1}, 1.791759469228055},
		{[]float64{0, 0, 0}, 0.0},
		{[]float64{math.Inf(1), 1, 2}, math.Inf(1)},
		{[]float64{math.Inf(-1), 1, 2}, 2.3132616875182228},
	}

	for _, test := range tests {
		actual := LogSumExp(test.s)
		if math.Abs(actual-test.expected) > 1e-10 {
			t.Errorf("LogSumExp(%v) = %v, expected %v", test.s, actual, test.expected)
		}
	}
}
func TestNearestIdx(t *testing.T) {
	for _, c := range []struct {
		s        []float64
		v        float64
		expected int
	}{
		{[]float64{1, 2, 3, 4, 5}, 2.2, 1},
		{[]float64{1, 2, 3, 4, 5}, 2.7, 2},
		{[]float64{1, 2, 3, 4, 5}, 10, 4},
		{[]float64{1, 2, 3, 4, 5}, -10, 0},
		{[]float64{1, 2, math.NaN(), 4, 5}, 2.2, 1},
		{[]float64{1, 2, math.NaN(), 4, 5}, math.NaN(), 0},
		{[]float64{1, 2, 3, 4, 5}, math.Inf(1), 4},
		{[]float64{1, 2, 3, 4, 5}, math.Inf(-1), 0},
	} {
		actual := NearestIdx(c.s, c.v)
		if actual != c.expected {
			t.Errorf("Expected NearestIdx(%v, %v) to be %v, got %v", c.s, c.v, c.expected, actual)
		}
	}

	defer func() {
		if r := recover(); r == nil {
			t.Errorf("Expected NearestIdx to panic on empty slice, but it didn't")
		}
	}()
	NearestIdx([]float64{}, 0)
}
func TestEqual(t *testing.T) {
	type args struct {
		s1 []float64
		s2 []float64
	}
	tests := []struct {
		name string
		args args
		want bool
	}{
		{
			name: "Equal slices",
			args: args{
				s1: []float64{1.0, 2.0, 3.0},
				s2: []float64{1.0, 2.0, 3.0},
			},
			want: true,
		},
		{
			name: "Different lengths",
			args: args{
				s1: []float64{1.0, 2.0, 3.0},
				s2: []float64{1.0, 2.0},
			},
			want: false,
		},
		{
			name: "Different values",
			args: args{
				s1: []float64{1.0, 2.0, 3.0},
				s2: []float64{1.0, 2.0, 4.0},
			},
			want: false,
		},
		{
			name: "Empty slices",
			args: args{
				s1: []float64{},
				s2: []float64{},
			},
			want: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := Equal(tt.args.s1, tt.args.s2); got != tt.want {
				t.Errorf("Equal() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestSame(t *testing.T) {
	// Test cases for Same function
	type testCase struct {
		s []float64
		t []float64
		want bool
	}
	testCases := []testCase{
		{[]float64{1, 2, 3}, []float64{1, 2, 3}, true},
		{[]float64{1, 2, 3}, []float64{1, 2, 4}, false},
		{[]float64{1, 2, math.NaN()}, []float64{1, 2, math.NaN()}, true},
		{[]float64{1, 2, math.NaN()}, []float64{1, 2, 3}, false},
		{[]float64{}, []float64{}, true},
		{nil, nil, true},
	}

	for i, tc := range testCases {
		got := Same(tc.s, tc.t)
		if got != tc.want {
			t.Errorf("Test case %d: Same(%v, %v) = %v, want %v", i+1, tc.s, tc.t, got, tc.want)
		}
	}
}
func TestMinIdx(t *testing.T) {
	// Test cases for MinIdx function.
	type testCase struct {
		input    []float64
		expected int
	}

	testCases := []testCase{
		{[]float64{1, 2, 3, 4, 5}, 0},
		{[]float64{5, 4, 3, 2, 1}, 4},
		{[]float64{1, 5, 2, 4, 3}, 0},
		{[]float64{1, math.NaN(), 3}, 0},
		{[]float64{math.NaN(), 1, 3}, 1},
		{[]float64{1, 3, math.NaN()}, 0},
		{[]float64{}, 0},
	}

	for i, tc := range testCases {
		// Handle panics gracefully.
		defer func() {
			if r := recover(); r != nil {
				if tc.input == nil || len(tc.input) == 0 {
					// Expected a panic for nil or empty input.
					return
				} else {
					t.Errorf("Test case %d: unexpected panic for input %v", i, tc.input)
				}
			}
		}()

		actual := MinIdx(tc.input)
		if tc.input == nil || len(tc.input) == 0 {
			// Expecting a panic for nil or empty input, continue to the next test case.
			continue
		}

		if actual != tc.expected {
			t.Errorf("Test case %d: expected %d, got %d for input %v", i, tc.expected, actual, tc.input)
		}
	}
}
func TestSpan(t *testing.T) {
	tests := []struct {
		name string
		dst  []float64
		l    float64
		u    float64
		want []float64
	}{
		{
			name: "BasicCase",
			dst:  make([]float64, 5),
			l:    0,
			u:    4,
			want: []float64{0, 1, 2, 3, 4},
		},
		{
			name: "EmptySlice",
			dst:  make([]float64, 0),
			l:    0,
			u:    4,
			want: []float64{},
		},
		{
			name: "SingleElement",
			dst:  make([]float64, 1),
			l:    0,
			u:    4,
			want: []float64{4},
		},
		{
			name: "NegativeRange",
			dst:  make([]float64, 5),
			l:    -4,
			u:    0,
			want: []float64{-4, -3, -2, -1, 0},
		},
		{
			name: "NaNLowerBound",
			dst:  make([]float64, 5),
			l:    math.NaN(),
			u:    4,
			want: []float64{math.NaN(), math.NaN(), math.NaN(), math.NaN(), 4},
		},
		{
			name: "NaNUpperBound",
			dst:  make([]float64, 5),
			l:    0,
			u:    math.NaN(),
			want: []float64{0, math.NaN(), math.NaN(), math.NaN(), math.NaN()},
		},
		{
			name: "BothBoundsNaN",
			dst:  make([]float64, 5),
			l:    math.NaN(),
			u:    math.NaN(),
			want: []float64{math.NaN(), math.NaN(), math.NaN(), math.NaN(), math.NaN()},
		},
		{
			name: "InfiniteLowerBound",
			dst:  make([]float64, 5),
			l:    math.Inf(-1),
			u:    4,
			want: []float64{math.Inf(-1), math.Inf(-1), math.Inf(-1), math.Inf(-1), 4},
		},
		{
			name: "InfiniteUpperBound",
			dst:  make([]float64, 5),
			l:    0,
			u:    math.Inf(1),
			want: []float64{0, math.Inf(1), math.Inf(1), math.Inf(1), math.Inf(1)},
		},
		{
			name: "BothBoundsInfinite",
			dst:  make([]float64, 5),
			l:    math.Inf(-1),
			u:    math.Inf(1),
			want: []float64{math.Inf(-1), math.Inf(-1), 0, math.Inf(1), math.Inf(1)},
		},
		{
			name: "BothBoundsInfiniteEvenLength",
			dst:  make([]float64, 4),
			l:    math.Inf(-1),
			u:    math.Inf(1),
			want: []float64{math.Inf(-1), math.Inf(-1), math.Inf(1), math.Inf(1)},
		},
		{
			name: "BothBoundsInfiniteSame",
			dst:  make([]float64, 5),
			l:    math.Inf(-1),
			u:    math.Inf(-1),
			want: []float64{math.Inf(-1), math.Inf(-1), math.Inf(-1), math.Inf(-1), math.Inf(-1)},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := Span(tt.dst, tt.l, tt.u)
			if len(got) != len(tt.want) {
				t.Errorf("Span() returned slice with length %d, want %d", len(got), len(tt.want))
			}
			for i := range got {
				if !closeEnough(got[i], tt.want[i]) {
					t.Errorf("Span()[%d] = %v, want %v", i, got[i], tt.want[i])
				}
			}
		})
	}
}

func closeEnough(a, b float64) bool {
	if math.IsNaN(a) && math.IsNaN(b) {
		return true
	}
	return math.Abs(a-b) < epsilon
}
func TestNearestIdxForSpan(t *testing.T) {
	// Test cases for various inputs.
	tests := []struct {
		n                int
		l, u             float64
		v                float64
		expectedIdx      int
		expectPanic      bool
		expectOutOfBounds bool
	}{
		// n < 2 should panic
		{1, 0, 1, 0.5, 0, true, false},
		// NaN inputs
		{2, math.NaN(), 1, 0.5, 0, false, true},
		{2, 0, math.NaN(), 0.5, 0, false, true},
		{2, 0, 1, math.NaN(), 0, false, true},
		{2, math.NaN(), math.NaN(), 0.5, 0, false, true},
		// Infinite bounds
		{2, math.Inf(1), math.Inf(1), 0, 0, false, true},
		{2, math.Inf(-1), math.Inf(1), 0, 1, false, true},
		{2, math.Inf(-1), math.Inf(-1), 0, 0, false, true},
		{3, math.Inf(-1), math.Inf(1), 1, 1, false, false},
		{3, math.Inf(-1), math.Inf(1), 0, 0, false, false},
		{3, math.Inf(-1), math.Inf(1), 2, 2, false, false},
		{2, 0, math.Inf(1), 0, 1, false, false},
		{2, math.Inf(-1), 0, 0, 0, false, false},
		// Regular cases
		{2, 0, 1, 0.5, 0, false, false},
		{2, 0, 1, 0, 0, false, false},
		{2, 0, 1, 1, 1, false, false},
		{4, 0, 1, 0.25, 1, false, false},
		{4, 0, 1, 0.5, 2, false, false},
		{4, 0, 1, 0.75, 3, false, false},
		{4, 0, 1, -0.5, 0, false, true},
		{4, 0, 1, 1.5, 3, false, true},
	}

	for i, test := range tests {
		// Create a closure to handle panics.
		func() {
			defer func() {
				if r := recover(); r != nil {
					if !test.expectPanic {
						t.Errorf("Test %d panicked unexpectedly: %v", i, r)
					}
				}
			}()

			// Call NearestIdxForSpan.
			idx := NearestIdxForSpan(test.n, test.l, test.u, test.v)

			// Check if the index is as expected.
			if idx != test.expectedIdx {
				t.Errorf("Test %d: For n = %d, l = %v, u = %v, v = %v, expected index %d, but got %d",
					i, test.n, test.l, test.u, test.v, test.expectedIdx, idx)
			}

			// Check if the index is out of bounds.
			if idx < 0 || idx >= test.n {
				if !test.expectOutOfBounds {
					t.Errorf("Test %d: Index %d is out of bounds for n = %d", i, idx, test.n)
				}
			}
		}()
	}
}
func TestMul(t *testing.T) {
	s := []float64{1, 2, 3, 4}
	dst := make([]float64, len(s))
	copy(dst, s)
	Mul(dst, s)
	expected := []float64{1, 4, 9, 16}
	for i := range dst {
		if dst[i] != expected[i] {
			t.Errorf("Mul() = %v, want %v", dst, expected)
			break
		}
	}

	// Test panicking with different lengths
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("The code did not panic")
		}
	}()
	Mul(dst, []float64{1, 2})
}
func TestAddTo(t *testing.T) {
	s := []float64{1, 2, 3}
	tt := []float64{4, 5, 6}
	dst := make([]float64, len(s))
	want := []float64{5, 7, 9}
	got := AddTo(dst, s, tt)
	if !floats.Equal(got, want) {
		t.Errorf("AddTo failed, got: %v, want: %v", got, want)
	}
}
func TestAdd(t *testing.T) {
	for i, test := range []struct {
		dst []float64
		s   []float64
		want []float64
	}{
		{
			dst: []float64{1, 2, 3},
			s:   []float64{4, 5, 6},
			want: []float64{5, 7, 9},
		},
		{
			dst: []float64{-1, -2, -3},
			s:   []float64{-4, -5, -6},
			want: []float64{-5, -7, -9},
		},
	} {
		Add(test.dst, test.s)
		if !floats.Equal(test.dst, test.want) {
			t.Errorf("Test %v: mismatch. Want %v, got %v", i, test.want, test.dst)
		}
	}
}
func TestFind(t *testing.T) {
	cases := []struct {
		name string
		inds []int
		f    func(float64) bool
		s    []float64
		k    int
		want []int
		err  error
	}{
		{
			name: "k=0",
			inds: []int{1, 2, 3},
			f:    func(f float64) bool { return f > 2 },
			s:    []float64{1, 2, 3, 4, 5},
			k:    0,
			want: []int{},
			err:  nil,
		},
		{
			name: "k<0",
			inds: []int{1, 2, 3},
			f:    func(f float64) bool { return f > 2 },
			s:    []float64{1, 2, 3, 4, 5},
			k:    -1,
			want: []int{2, 3, 4},
			err:  nil,
		},
		{
			name: "k>0, sufficient elements",
			inds: []int{1, 2, 3},
			f:    func(f float64) bool { return f > 2 },
			s:    []float64{1, 2, 3, 4, 5},
			k:    2,
			want: []int{2, 3},
			err:  nil,
		},
		{
			name: "k>0, insufficient elements",
			inds: []int{1, 2, 3},
			f:    func(f float64) bool { return f > 2 },
			s:    []float64{1, 2, 3, 4, 5},
			k:    10,
			want: nil,
			err:  errors.New("floats: insufficient elements found"),
		},
	}

	for _, c := range cases {
		t.Run(c.name, func(t *testing.T) {
			got, err := Find(c.inds, c.f, c.s, c.k)
			if err != nil && c.err == nil {
				t.Fatalf("Find() returned unexpected error: %v", err)
			}
			if err == nil && c.err != nil {
				t.Fatalf("Find() did not return expected error: %v", c.err)
			}
			if err != nil && c.err != nil && err.Error() != c.err.Error() {
				t.Fatalf("Find() returned wrong error: got %v, want %v", err, c.err)
			}
			if !equal(got, c.want) {
				t.Errorf("Find() = %v, want %v", got, c.want)
			}

		})
	}
}

func equal(a, b []int) bool {
	if len(a) != len(b) {
		return false
	}
	for i, v := range a {
		if v != b[i] {
			return false
		}
	}
	return true
}
func TestNorm(t *testing.T) {
	tests := []struct {
		s        []float64
		L        float64
		expected float64
	}{
		{[]float64{1, 2, 3, 4}, 0, 0},
		{[]float64{1, 2, 3, 4}, 1, 10},
		{[]float64{1, 2, 3, 4}, 2, math.Sqrt(30)},
		{[]float64{1, 2, 3, 4}, math.Inf(1), 4},
		{[]float64{1, -2, 3, -4}, 1, 10},
		{[]float64{-1, -2, -3, -4}, 2, math.Sqrt(30)},
		{[]float64{-1, -2, -3, -4}, math.Inf(1), 4},
		{[]float64{}, 2, 0},
	}
	for i, test := range tests {
		actual := Norm(test.s, test.L)
		if math.Abs(actual-test.expected) > 1e-6 {
			t.Errorf("Test %d: Expected %v, got %v", i+1, test.expected, actual)
		}
	}
}
func TestScaleTo(t *testing.T) {
	for i, test := range []struct {
		dst []float64
		c   float64
		s   []float64
		want []float64
	}{
		{
			dst: []float64{2, 4, 6, 8},
			c:   0.5,
			s:   []float64{4, 8, 12, 16},
			want: []float64{2, 4, 6, 8},
		},
		{
			dst: []float64{2, 4, 6, 8},
			c:   2,
			s:   []float64{1, 2, 3, 4},
			want: []float64{2, 4, 6, 8},
		},
		{
			dst: []float64{1, 2, 3},
			c:   3,
			s:   []float64{1, 2, 3},
			want: []float64{3, 6, 9},
		},
		{
			dst: make([]float64, 4),
			c:   -1,
			s:   []float64{1, 2, 3, 4},
			want: []float64{-1, -2, -3, -4},
		},
		{
			dst: []float64{},
			c:   2,
			s:   []float64{},
			want: []float64{},
		},
	} {
		got := ScaleTo(test.dst, test.c, test.s)
        
		if len(got) != len(test.want) {
			t.Errorf("Test %d: got length %d, want %d", i, len(got), len(test.want))
		}
		for j := range got {
			if got[j] != test.want[j] {
				t.Errorf("Test %d: unexpected result for ScaleTo, got = %v, want = %v", i, got, test.want)
                break
			}
		}
	}

	panics := []struct {
		dst []float64
		c   float64
		s   []float64
	}{
		{
			dst: []float64{1, 2},
			c:   2,
			s:   []float64{1},
		},
		{
			dst: []float64{1},
			c:   2,
			s:   []float64{1, 2},
		},
	}
	for i, test := range panics {
		func() {
			defer func() {
				r := recover()
				if r == nil {
					t.Errorf("Test %d: ScaleTo did not panic with mismatched lengths", i)
				}
			}()
			ScaleTo(test.dst, test.c, test.s)
		}()
	}
}
func TestAddScaledTo(t *testing.T) {
	for i := 0; i < 10; i++ {
		n := i*10 + 1
		dst := make([]float64, n)
		y := make([]float64, n)
		s := make([]float64, n)
		for j := range dst {
			dst[j] = rand.Float64()
			y[j] = rand.Float64()
			s[j] = rand.Float64()
		}
		alpha := rand.Float64()
		want := make([]float64, n)
		copy(want, dst)

		blas64.Axpy(alpha, blas64.Vector{N: n, Inc: 1, Data: s}, blas64.Vector{N: n, Inc: 1, Data: y})
		blas64.Axpy(1, blas64.Vector{N: n, Inc: 1, Data: y}, blas64.Vector{N: n, Inc: 1, Data: want})

		got := AddScaledTo(dst, y, alpha, s)
		if !Equal(want, got) {
			t.Errorf("Case %d mismatch. Want %v, got %v", i, want, got)
		}
	}
}
func TestArgsort_Less(t *testing.T) {
	type fields struct {
		s []float64
	}
	type args struct {
		i int
		j int
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   bool
	}{
		{
			name: "i less than j",
			fields: fields{
				s: []float64{1.2, 2.4, 0.5, 3.8},
			},
			args: args{
				i: 0,
				j: 1,
			},
			want: true,
		},
		{
			name: "i greater than j",
			fields: fields{
				s: []float64{1.2, 2.4, 0.5, 3.8},
			},
			args: args{
				i: 1,
				j: 0,
			},
			want: false,
		},
		{
			name: "i equal to j",
			fields: fields{
				s: []float64{1.2, 2.4, 0.5, 3.8},
			},
			args: args{
				i: 1,
				j: 1,
			},
			want: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			a := &argsort{
				s: tt.fields.s,
			}
			if got := a.Less(tt.args.i, tt.args.j); got != tt.want {
				t.Errorf("argsort.Less() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestProd(t *testing.T) {
	type args struct {
		s []float64
	}
	tests := []struct {
		name string
		args args
		want float64
	}{
		{"empty", args{[]float64{}}, 1.0},
		{"one", args{[]float64{2.0}}, 2.0},
		{"many", args{[]float64{2.0, 3.0, 4.0}}, 24.0},
		{"zero", args{[]float64{2.0, 0.0, 4.0}}, 0.0},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := Prod(tt.args.s); got != tt.want {
				t.Errorf("Prod() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestMulTo(t *testing.T) {
	s := []float64{1, 2, 3, 4}
	tt := []float64{2, 3, 4, 5} // Changed variable name to avoid conflict
	dst := make([]float64, len(s))
	got := MulTo(dst, s, tt)
	want := []float64{2, 6, 12, 20}
	if !Equal(got, want) {
		t.Errorf("MulTo error: got %v, want %v", got, want)
	}

	// test panic for different lengths
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("MulTo should panic if len(s) != len(t)")
		}
	}()
	MulTo(dst, s, []float64{1, 2, 3})

	defer func() {
		if r := recover(); r == nil {
			t.Errorf("MulTo should panic if len(dst) != len(s)")
		}
	}()
	MulTo([]float64{1, 2, 3}, s, tt) 
}
func TestDivTo(t *testing.T) {
	dst := make([]float64, 3)
	s := []float64{1, 2, 3}
	tt := []float64{2, 2, 2}
	expected := []float64{0.5, 1, 1.5}
	got := DivTo(dst, s, tt)
	assert.Equal(t, expected, got)
}

func TestDivTo_Panic(t *testing.T) {
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("The code did not panic")
		}
	}()
	dst := make([]float64, 2)
	s := []float64{1, 2, 3}
	tt := []float64{2, 2, 2}
	DivTo(dst, s, tt)
}

func TestDivTo_Panic2(t *testing.T) {
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("The code did not panic")
		}
	}()
	dst := make([]float64, 3)
	s := []float64{1, 2, 3}
	tt := []float64{2, 2}
	DivTo(dst, s, tt)
}
func TestCount(t *testing.T) {
	type args struct {
		f func(float64) bool
		s []float64
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		{
			name: "All true",
			args: args{
				f: func(f float64) bool { return f > 0 },
				s: []float64{1, 2, 3, 4, 5},
			},
			want: 5,
		},
		{
			name: "Some true",
			args: args{
				f: func(f float64) bool { return f > 2 },
				s: []float64{1, 2, 3, 4, 5},
			},
			want: 3,
		},
		{
			name: "None true",
			args: args{
				f: func(f float64) bool { return f > 10 },
				s: []float64{1, 2, 3, 4, 5},
			},
			want: 0,
		},
		{
			name: "Empty slice",
			args: args{
				f: func(f float64) bool { return f > 0 },
				s: []float64{},
			},
			want: 0,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := Count(tt.args.f, tt.args.s); got != tt.want {
				t.Errorf("Count() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestDistance(t *testing.T) {
	type args struct {
		s []float64
		t []float64
		L float64
	}
	tests := []struct {
		name string
		args args
		want float64
	}{
		{"empty", args{[]float64{}, []float64{}, 2}, 0},
		{"equal", args{[]float64{1, 2, 3}, []float64{1, 2, 3}, 2}, 0},
		{"L1", args{[]float64{1, 2, 3}, []float64{4, 5, 6}, 1}, 9},
		{"L2", args{[]float64{1, 2, 3}, []float64{4, 5, 6}, 2}, math.Sqrt(27)},
		{"L3", args{[]float64{1, 2, 3}, []float64{4, 5, 6}, 3}, math.Pow(36, 1.0/3.0)},
		{"Linf", args{[]float64{1, 2, 3}, []float64{4, 5, 6}, math.Inf(1)}, 3},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := Distance(tt.args.s, tt.args.t, tt.args.L); !closeEnough(got, tt.want) {
				t.Errorf("Distance() = %v, want %v", got, tt.want)
			}
		})
	}
}

func closeEnough(a, b float64) bool {
	return math.Abs(a-b) < epsilon
}
func TestWithin(t *testing.T) {
	type args struct {
		s []float64
		v float64
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		{
			name: "empty",
			args: args{
				s: []float64{},
				v: 0,
			},
			want: -1,
		},
		{
			name: "single element",
			args: args{
				s: []float64{1},
				v: 0,
			},
			want: -1,
		},
		{
			name: "out of bounds low",
			args: args{
				s: []float64{1, 2},
				v: 0,
			},
			want: -1,
		},
		{
			name: "out of bounds high",
			args: args{
				s: []float64{1, 2},
				v: 3,
			},
			want: -1,
		},
		{
			name: "NaN",
			args: args{
				s: []float64{1, 2},
				v: math.NaN(),
			},
			want: -1,
		},
		{
			name: "within",
			args: args{
				s: []float64{1, 2, 3},
				v: 1.5,
			},
			want: 1,
		},
		{
			name: "boundary",
			args: args{
				s: []float64{1, 2, 3},
				v: 2,
			},
			want: 1,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				if r := recover(); r != nil {
					if tt.want != -1 {
						t.Errorf("Within() panicked, but want = %v", tt.want)
					}
				}
			}()
			if got := Within(tt.args.s, tt.args.v); got != tt.want {
				t.Errorf("Within() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestMaxIdx(t *testing.T) {
	// Test cases for MaxIdx function
	type testCase struct {
		input    []float64
		expected int
	}
	testCases := []testCase{
		{[]float64{1, 2, 3, 4, 5}, 4},
		{[]float64{5, 4, 3, 2, 1}, 0},
		{[]float64{1, 5, 3, 2, 4}, 1},
		{[]float64{-1, -2, -3, -4, -5}, 0},
		{[]float64{-5, -4, -3, -2, -1}, 4},
		{[]float64{0, 0, 0, 0, 0}, 0},
		{[]float64{}, 0},
		{[]float64{1, math.NaN(), 3}, 2},
		{[]float64{math.NaN(), 1, 3}, 2},
		{[]float64{1, 3, math.NaN()}, 1},
	}

	for _, tc := range testCases {
		// If the input slice is empty, we expect a panic
		if len(tc.input) == 0 {
			defer func() {
				if r := recover(); r == nil {
					t.Errorf("The code did not panic when the input slice was empty.")
				}
			}()
		}
		// Call the MaxIdx function
		actual := MaxIdx(tc.input)
		// Check the result
		if actual != tc.expected {
			t.Errorf("MaxIdx(%v) = %v, expected %v", tc.input, actual, tc.expected)
		}
	}
}
func TestAddScaled(t *testing.T) {
	for i, test := range []struct {
		dst    []float64
		alpha  float64
		s      []float64
		expect []float64
	}{
		{
			[]float64{1, 2, 3},
			2,
			[]float64{1, 2, 3},
			[]float64{3, 6, 9},
		},
		{
			[]float64{1, 2, 3},
			-2,
			[]float64{1, 2, 3},
			[]float64{-1, -2, -3},
		},
		{
			[]float64{1, 2, 3},
			2.5,
			[]float64{1, 2, 3},
			[]float64{3.5, 7, 10.5},
		},
	} {
		AddScaled(test.dst, test.alpha, test.s)
		if !floats.Equal(test.dst, test.expect) {
			t.Errorf("Test %d: different result, expected %v but received %v", i, test.expect, test.dst)
		}
	}

	// Test that the function panics when the lengths of the slices are different
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("The code did not panic")
		}
	}()
	AddScaled([]float64{1, 2, 3}, 2, []float64{1, 2})
}
func TestEqualApprox(t *testing.T) {
	for _, test := range []struct {
		s1, s2 []float64
		tol    float64
		want   bool
	}{
		{
			s1:   nil,
			s2:   nil,
			tol:  1e-5,
			want: true,
		},
		{
			s1:   []float64{},
			s2:   []float64{},
			tol:  1e-5,
			want: true,
		},
		{
			s1:   nil,
			s2:   []float64{1, 2, 3},
			tol:  1e-5,
			want: false,
		},
		{
			s1:   []float64{1, 2, 3},
			s2:   nil,
			tol:  1e-5,
			want: false,
		},
		{
			s1:   []float64{1, 2, 3},
			s2:   []float64{1, 2},
			tol:  1e-5,
			want: false,
		},
		{
			s1:   []float64{1, 2},
			s2:   []float64{1, 2, 3},
			tol:  1e-5,
			want: false,
		},
		{
			s1:   []float64{1, 2, 3},
			s2:   []float64{1, 2, 3},
			tol:  1e-5,
			want: true,
		},
		{
			s1:   []float64{1, 2, 3},
			s2:   []float64{1, 2, 4},
			tol:  1e-5,
			want: false,
		},
		{
			s1:   []float64{1, 2, 3},
			s2:   []float64{1, 2, 3.00000001},
			tol:  1e-5,
			want: true,
		},
		{
			s1:   []float64{1, 2, 3},
			s2:   []float64{1, 2, 3.1},
			tol:  1,
			want: true,
		},
		{
			s1:   []float64{1, 2, math.NaN()},
			s2:   []float64{1, 2, 3.1},
			tol:  1e-5,
			want: false,
		},
		{
			s1:   []float64{1, 2, 3.1},
			s2:   []float64{1, 2, math.NaN()},
			tol:  1e-5,
			want: false,
		},
		{
			s1:   []float64{1, 2, math.NaN()},
			s2:   []float64{1, 2, math.NaN()},
			tol:  1e-5,
			want: true,
		},
	} {
		got := EqualApprox(test.s1, test.s2, test.tol)
		if got != test.want {
			t.Errorf("mismatch for s1=%v, s2=%v, tol=%v: got=%v, want=%v", test.s1, test.s2, test.tol, got, test.want)
		}
	}
}
