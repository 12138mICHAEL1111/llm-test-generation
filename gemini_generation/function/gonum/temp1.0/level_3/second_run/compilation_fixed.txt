func TestMax(t *testing.T) {
	t.Parallel()
	for _, test := range []struct {
		s []float64
		x float64
	}{
		{[]float64{1, 2, 3, 4}, 4},
		{[]float64{-1, -2, -3, -4}, -1},
		{[]float64{1.1, 2.2, 3.3, 4.4}, 4.4},
		{[]float64{math.Inf(1), 1, 2, 3, 4}, math.Inf(1)},
		{[]float64{-1, -2, math.Inf(1), 3, 4}, math.Inf(1)},
	} {
		y := Max(test.s)
		if y != test.x {
			t.Errorf("Max(%v) = %v, want %v", test.s, y, test.x)
		}
	}
}
func TestCount(t *testing.T) {
	type args struct {
		f func(float64) bool
		s []float64
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		{"empty", args{func(v float64) bool { return v > 0 }, []float64{}}, 0},
		{"all true", args{func(v float64) bool { return v > 0 }, []float64{1, 2, 3}}, 3},
		{"some true", args{func(v float64) bool { return v > 0 }, []float64{-1, 2, -3}}, 1},
		{"none true", args{func(v float64) bool { return v > 0 }, []float64{-1, -2, -3}}, 0},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := Count(tt.args.f, tt.args.s); got != tt.want {
				t.Errorf("Count() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestMulTo(t *testing.T) {
	testCases := []struct {
		name string
		dst  []float64
		s    []float64
		t    []float64
		want []float64
	}{
		{
			name: "Equal length slices",
			dst:  make([]float64, 3),
			s:    []float64{1, 2, 3},
			t:    []float64{4, 5, 6},
			want: []float64{4, 10, 18},
		},
		{
			name: "Zero length slices",
			dst:  make([]float64, 0),
			s:    []float64{},
			t:    []float64{},
			want: []float64{},
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			got := MulTo(tc.dst, tc.s, tc.t)
			if !reflect.DeepEqual(got, tc.want) {
				t.Errorf("MulTo() = %v, want %v", got, tc.want)
			}
		})
	}
}
func TestNearestIdx(t *testing.T) {
	s := []float64{1, 2, 3, 4, 5, 4, 3, 2, 1}
	testCases := []struct {
		v      float64
		wantIdx int
	}{
		{-1, 0},
		{0, 0},
		{1, 0},
		{1.1, 0},
		{1.9, 1},
		{2, 1},
		{2.1, 1},
		{2.9, 2},
		{3, 2},
		{3.1, 2},
		{3.9, 3},
		{4, 3},
		{4.1, 3},
		{4.9, 4},
		{5, 4},
		{6, 8},
		{math.NaN(), 0},
		{math.Inf(1), 4},
		{math.Inf(-1), 0},
	}
	for i, tc := range testCases {
		haveIdx := NearestIdx(s, tc.v)
		if haveIdx != tc.wantIdx {
			t.Errorf("case %v: input %v, want %v, have %v", i, tc.v, tc.wantIdx, haveIdx)
		}
	}
}
func TestDivTo(t *testing.T) {
	t.Parallel()
	dst := make([]float64, 3)
	s := []float64{1, 2, 3}
	t1 := []float64{2, 2, 2}
	got := DivTo(dst, s, t1)
	want := []float64{0.5, 1, 1.5}
	assert.Equal(t, want, got)
}
func TestReverse(t *testing.T) {
	tests := []struct {
		s    []float64
		want []float64
	}{
		{[]float64{1, 2, 3}, []float64{3, 2, 1}},
		{[]float64{1, 2}, []float64{2, 1}},
		{[]float64{1}, []float64{1}},
		{[]float64{}, []float64{}},
	}
	for _, tt := range tests {
		Reverse(tt.s)
		if !reflect.DeepEqual(tt.s, tt.want) {
			t.Errorf("Reverse() = %v, want %v", tt.s, tt.want)
		}
	}
}
///warning///
```go
package floats

import (
	"math"
	"testing"
)

func TestDistance(t *testing.T) {
	for _, test := range []struct {
		s []float64
		t []float64
		L float64
		want float64
	}{
		{[]float64{2, 3, 4}, []float64{3, 2, 1}, 2, math.Sqrt(14)},
		{[]float64{2, 3, 4}, []float64{3, 2, 1}, 1, 6},
		{[]float64{2, 3, 4}, []float64{3, 2, 1}, math.Inf(1), 3},
		{[]float64{-2, -3, -4}, []float64{-3, -2, -1}, 2, math.Sqrt(14)},
		{[]float64{-2, -3, -4}, []float64{-3, -2, -1}, 1, 6},
		{[]float64{-2, -3, -4}, []float64{-3, -2, -1}, math.Inf(1), 3},
		{[]float64{2, 3, 4}, []float64{2, 3, 4}, 2, 0},
		{[]float64{2, 3, 4}, []float64{2, 3, 4}, 1, 0},
		{[]float64{2, 3, 4}, []float64{2, 3, 4}, math.Inf(1), 0},
		{[]float64{1, 2, 3, 4, 5}, []float64{6, 7, 8, 9, 10}, 3, math.Pow(math.Pow(5, 3)+math.Pow(5, 3)+math.Pow(5, 3)+math.Pow(5, 3)+math.Pow(5, 3), 1.0/3)},
	} {
		got := Distance(test.s, test.t, test.L)
		if !EqualWithinAbsOrRel(got, test.want, 1e-14, 1e-14) {
			t.Errorf("Distance(%v, %v, %v) = %v, want %v", test.s, test.t, test.L, got, test.want)
		}
	}
}

func TestDistancePanic(t *testing.T) {
	defer func() {
		if r := recover();
		if r == nil {
			t.Errorf("The code did not panic")
		}
	}()
	Distance([]float64{2, 3, 4}, []float64{3, 2}, 2)
}
```
func TestMaxIdx(t *testing.T) {
	// Test cases for MaxIdx
	testCases := []struct {
		input    []float64
		expected int
	}{
		{[]float64{1, 2, 3, 4, 5}, 4},
		{[]float64{5, 4, 3, 2, 1}, 0},
		{[]float64{1, 2, 5, 3, 4}, 2},
		{[]float64{-1, -2, -3, -4, -5}, 0},
		{[]float64{-5, -4, -3, -2, -1}, 4},
		{[]float64{1, 2, math.NaN(), 3, 4}, 4},
		{[]float64{1, 2, 3, math.NaN(), 4}, 3},
		{[]float64{math.NaN(), 1, 2, 3, 4}, 4},
	}

	// Iterate over the test cases
	for i, tc := range testCases {
		// Execute MaxIdx
		actual := MaxIdx(tc.input)

		// Check if the result is as expected
		if actual != tc.expected {
			t.Errorf("Test case %d failed: input=%v, expected=%v, actual=%v", i+1, tc.input, tc.expected, actual)
		}
	}

	// Test case for panic when input slice is empty
	defer func() {
		if r := recover(); r == nil {
			t.Error("The code did not panic with an empty slice")
		}
	}()

	MaxIdx([]float64{})
}
func TestEqual(t *testing.T) {
	s1 := []float64{1, 2, 3, 4}
	s2 := []float64{1, 2, 3, 4}
	s3 := []float64{1, 2, 3}
	s4 := []float64{1, 2, 3, 5}

	if !Equal(s1, s2) {
		t.Errorf("Expected Equal(%v, %v) to be true", s1, s2)
	}

	if Equal(s1, s3) {
		t.Errorf("Expected Equal(%v, %v) to be false", s1, s3)
	}

	if Equal(s1, s4) {
		t.Errorf("Expected Equal(%v, %v) to be false", s1, s4)
	}
}
func TestMinIdx(t *testing.T) {
	type args struct {
		s []float64
	}
	tests := []struct {
		name string
		args args
		want int
	}{
		{"empty", args{[]float64{}}, -1},
		{"one", args{[]float64{1}}, 0},
		{"min first", args{[]float64{0, 1, 2}}, 0},
		{"min last", args{[]float64{2, 1, 0}}, 2},
		{"min middle", args{[]float64{2, 0, 1}}, 1},
		{"min repeats", args{[]float64{2, 0, 1, 0, 3}}, 1},
		{"NaN", args{[]float64{2, math.NaN(), 1, 0, 3}}, 3},
		{"NaN first", args{[]float64{math.NaN(), 2, 1, 0, 3}}, 3},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			defer func() {
				if r := recover(); r == nil {
					if tt.want == -1 {
						t.Errorf("MinIdx() did not panic")
					}
				} else {
					if tt.want != -1 {
						t.Errorf("MinIdx() recovered: %v, want %v", r, tt.want)
					}
				}
			}()
			if got := MinIdx(tt.args.s); got != tt.want {
				t.Errorf("MinIdx() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestEqualApprox(t *testing.T) {
	s1 := []float64{1, 2, 3, 4}
	s2 := []float64{1.001, 2.001, 3.001, 4.001}
	if !EqualApprox(s1, s2, 0.01) {
		t.Errorf("Expected EqualApprox(%v, %v, 0.01) to be true", s1, s2)
	}
	if EqualApprox(s1, s2, 0.0001) {
		t.Errorf("Expected EqualApprox(%v, %v, 0.0001) to be false", s1, s2)
	}

	s1 = []float64{1, 2, 3, 4}
	s2 = []float64{1, 2, 3}
	if EqualApprox(s1, s2, 0.01) {
		t.Errorf("Expected EqualApprox(%v, %v, 0.01) to be false", s1, s2)
	}
}
func TestSumCompensated(t *testing.T) {
	// Test cases: empty slice, single element, multiple elements.
	testCases := []struct {
		s []float64
		want float64
	}{
		{[]float64{}, 0.0},
		{[]float64{1.0}, 1.0},
		{[]float64{1.0, 2.0, 3.0}, 6.0},
		{[]float64{1e-16, 1.0, 1e-16}, 1.0}, // Test for improved accuracy
	}

	for _, tc := range testCases {
		got := SumCompensated(tc.s)
		if math.Abs(got - tc.want) > 1e-14 {
			t.Errorf("SumCompensated(%v) = %v, want %v", tc.s, got, tc.want)
		}
	}
}
func TestLogSumExp(t *testing.T) {
	tolerance := 1e-14
	for i, test := range []struct {
		s        []float64
		expected float64
	}{
		{[]float64{1, 2, 3, 4}, 4 + math.Log(math.Exp(1-4)+math.Exp(2-4)+math.Exp(3-4)+1)},
		{[]float64{100, 100, 100}, 100 + math.Log(3)},
		{[]float64{-100, -100, -100}, -100 + math.Log(3)},
		{[]float64{1, 100}, 100 + math.Log(1+math.Exp(1-100))},
		{[]float64{-1e10, -1e10 + 1, -1e10 + 2}, -1e10 + 2 + math.Log(1+math.Exp(1-2)+math.Exp(0-2))},
	} {
		actual := LogSumExp(test.s)
		if math.Abs(actual-test.expected) > tolerance {
			t.Errorf("Test %d: Expected %f, got %f", i, test.expected, actual)
		}
	}
}
func TestSame(t *testing.T) {
	// Test cases where the slices are the same
	testCases := []struct {
		s []float64
		t []float64
	}{
		{[]float64{1, 2, 3}, []float64{1, 2, 3}},
		{[]float64{math.NaN(), 2, 3}, []float64{math.NaN(), 2, 3}},
		{[]float64{1, math.NaN(), 3}, []float64{1, math.NaN(), 3}},
		{[]float64{1, 2, math.NaN()}, []float64{1, 2, math.NaN()}},
		{[]float64{math.NaN(), math.NaN(), math.NaN()}, []float64{math.NaN(), math.NaN(), math.NaN()}},
	}
	for i, tc := range testCases {
		if !Same(tc.s, tc.t) {
			t.Errorf("Test case %d: Expected true, got false", i)
		}
	}

	// Test cases where the slices are different
	testCases = []struct {
		s []float64
		t []float64
	}{
		{[]float64{1, 2, 3}, []float64{1, 2, 4}},
		{[]float64{1, 2, 3}, []float64{1, 2, math.NaN()}},
		{[]float64{1, math.NaN(), 3}, []float64{1, 2, 3}},
		{[]float64{1, 2, 3}, []float64{1, 2}},
		{[]float64{1, 2}, []float64{1, 2, 3}},
		{[]float64{}, []float64{1, 2, 3}},
		{[]float64{1, 2, 3}, []float64{}},
	}
	for i, tc := range testCases {
		if Same(tc.s, tc.t) {
			t.Errorf("Test case %d: Expected false, got true", i)
		}
	}
}
func TestMul(t *testing.T) {
	// Test cases
	tests := []struct {
		name string
		dst  []float64
		s    []float64
		want []float64
	}{
		{
			name: "Equal length slices",
			dst:  []float64{1, 2, 3},
			s:    []float64{2, 3, 4},
			want: []float64{2, 6, 12},
		},
		{
			name: "Zero slice",
			dst:  []float64{0, 0, 0},
			s:    []float64{1, 2, 3},
			want: []float64{0, 0, 0},
		},
		{
			name: "Empty slices",
			dst:  []float64{},
			s:    []float64{},
			want: []float64{},
		},
	}

	// Run test cases
	for _, tc := range tests {
		t.Run(tc.name, func(t *testing.T) {
			Mul(tc.dst, tc.s)
			assert.Equal(t, tc.want, tc.dst)
		})
	}

	// Test panic case
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("The code did not panic")
		}
	}()
	Mul([]float64{1, 2, 3}, []float64{1, 2})
}
func TestSub(t *testing.T) {
	dst := []float64{1, 2, 3, 4}
	s := []float64{1, 1, 2, 2}
	want := []float64{0, 1, 1, 2}
	Sub(dst, s)
	assert.Equal(t, want, dst)

	assert.Panics(t, func() { Sub([]float64{1, 2}, []float64{1}) })
}
func TestSum(t *testing.T) {
	type args struct {
		s []float64
	}
	tests := []struct {
		name string
		args args
		want float64
	}{
		{
			name: "Empty slice",
			args: args{s: []float64{}},
			want: 0,
		},
		{
			name: "Single element",
			args: args{s: []float64{1.23}},
			want: 1.23,
		},
		{
			name: "Multiple elements",
			args: args{s: []float64{1.23, 4.56, 7.89}},
			want: 13.68,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := Sum(tt.args.s); got != tt.want {
				t.Errorf("Sum() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestAddTo(t *testing.T) {
	for i, test := range []struct {
		s []float64
		t []float64
		want []float64
	}{
		{
			[]float64{1,2,3},
			[]float64{4,5,6},
			[]float64{5,7,9},
		},
		{
			[]float64{1,-2,3},
			[]float64{4,-5,6},
			[]float64{5,-7,9},
		},
		{
			[]float64{0,0,0},
			[]float64{4,5,6},
			[]float64{4,5,6},
		},
	} {
		dst := make([]float64, len(test.s))
		for j := range dst {
			dst[j] = rand.Float64()
		}
		AddTo(dst, test.s, test.t)
		for j := range dst {
			if !EqualApprox(dst[j], test.want[j], 1e-14) {
				t.Errorf("Test %d: dst[%d] = %v, want %v", i, j, dst[j], test.want[j])
				break
			}
		}
	}
	panics := []struct {
		s []float64
		t []float64
	}{
		{
			[]float64{1,2,3},
			[]float64{1,2},
		},
		{
			[]float64{1,2},
			[]float64{1,2,3},
		},
	}
	for i, test := range panics {
		func() {
			defer func() {
				r := recover()
				if r == nil {
					t.Errorf("Test %d did not panic", i)
				}
			}()
			dst := make([]float64, len(test.s))
			AddTo(dst, test.s, test.t)
		}()
	}
}
func TestMin(t *testing.T) {
	t.Parallel()
	for _, test := range []struct {
		name string
		s    []float64
		want float64
	}{
		{
			name: "empty",
			s:    []float64{},
			want: math.NaN(),
		},
		{
			name: "one_element",
			s:    []float64{1},
			want: 1,
		},
		{
			name: "two_elements_first_min",
			s:    []float64{1, 2},
			want: 1,
		},
		{
			name: "two_elements_second_min",
			s:    []float64{2, 1},
			want: 1,
		},
		{
			name: "many_elements_first_min",
			s:    []float64{1, 2, 3, 4, 5},
			want: 1,
		},
		{
			name: "many_elements_middle_min",
			s:    []float64{5, 4, 1, 3, 2},
			want: 1,
		},
		{
			name: "many_elements_last_min",
			s:    []float64{5, 4, 3, 2, 1},
			want: 1,
		},
		{
			name: "negative_elements",
			s:    []float64{-1, -2, -3},
			want: -3,
		},
		{
			name: "mixed_positive_and_negative_elements",
			s:    []float64{-1, 2, -3, 4},
			want: -3,
		},
	} {
		t.Run(test.name, func(t *testing.T) {
			defer func() {
				if recover() != nil && len(test.s) != 0 {
					t.Errorf("Min panicked for non-empty slice")
				}
			}()

			got := Min(test.s)
			if len(test.s) == 0 && !math.IsNaN(got) {
				t.Errorf("Min() on empty slice did not return NaN")
			}
			if len(test.s) != 0 && got != test.want {
				t.Errorf("Min() = %v, want %v", got, test.want)
			}
		})
	}
}
func TestAddConst(t *testing.T) {
	dst := make([]float64, 5)
	c := 2.0
	want := []float64{2.0, 2.0, 2.0, 2.0, 2.0}
	AddConst(c, dst)
	assert.Equal(t, want, dst)
}
func TestAddScaled(t *testing.T) {
	// Test case 1: Basic test with positive alpha
	dst1 := []float64{1, 2, 3, 4}
	s1 := []float64{5, 6, 7, 8}
	alpha1 := 2.0
	expected1 := []float64{11, 14, 17, 20}
	AddScaled(dst1, alpha1, s1)
	assert.Equal(t, expected1, dst1, "Test case 1 failed: dst1 is not modified correctly")

	// Test case 2: Basic test with negative alpha
	dst2 := []float64{1, 2, 3, 4}
	s2 := []float64{5, 6, 7, 8}
	alpha2 := -2.0
	expected2 := []float64{-9, -10, -11, -12}
	AddScaled(dst2, alpha2, s2)
	assert.Equal(t, expected2, dst2, "Test case 2 failed: dst2 is not modified correctly")

	// Test case 3: Test with zero alpha
	dst3 := []float64{1, 2, 3, 4}
	s3 := []float64{5, 6, 7, 8}
	alpha3 := 0.0
	expected3 := []float64{1, 2, 3, 4}
	AddScaled(dst3, alpha3, s3)
	assert.Equal(t, expected3, dst3, "Test case 3 failed: dst3 is not modified correctly")

	// Test case 4: Test with different slice lengths
	dst4 := []float64{1, 2, 3}
	s4 := []float64{5, 6, 7, 8}
	alpha4 := 2.0
	assert.Panics(t, func() { AddScaled(dst4, alpha4, s4) }, "Test case 4 failed: AddScaled should panic with different slice lengths")
}
func TestNorm(t *testing.T) {
	s := []float64{1, 2, 3, 4, 5}
	tol := 1e-14
	if got, want := Norm(s, 1), 15.0; math.Abs(got-want) > tol {
		t.Errorf("Norm(s, 1) = %v, want %v", got, want)
	}
	if got, want := Norm(s, 2), 7.416198487095663; math.Abs(got-want) > tol {
		t.Errorf("Norm(s, 2) = %v, want %v", got, want)
	}
	if got, want := Norm(s, math.Inf(1)), 5.0; math.Abs(got-want) > tol {
		t.Errorf("Norm(s, math.Inf(1)) = %v, want %v", got, want)
	}
	if got, want := Norm(s, 4), 5.477225575051661; math.Abs(got-want) > tol {
		t.Errorf("Norm(s, 4) = %v, want %v", got, want)
	}

	// Test case for empty slice
	s = []float64{}
	if got, want := Norm(s, 2), 0.0; got != want {
		t.Errorf("Norm(s, 2) = %v, want %v", got, want)
	}
}
func TestNearestIdxForSpan(t *testing.T) {
	// n < 2 should panic
	assert.Panics(t, func() { NearestIdxForSpan(1, 0, 1, 0.5) })

	// NaN values
	assert.Equal(t, 0, NearestIdxForSpan(2, 0, 1, math.NaN()))
	assert.Equal(t, 1, NearestIdxForSpan(2, 0, math.NaN(), 0.5))
	assert.Equal(t, 0, NearestIdxForSpan(2, math.NaN(), 0, 0.5))
	assert.Equal(t, 0, NearestIdxForSpan(2, math.NaN(), math.NaN(), 0.5))

	// Inf values
	assert.Equal(t, 0, NearestIdxForSpan(2, math.Inf(-1), math.Inf(1), 0.5))
	assert.Equal(t, 1, NearestIdxForSpan(2, math.Inf(1), math.Inf(-1), 0.5))
	assert.Equal(t, 0, NearestIdxForSpan(3, math.Inf(-1), math.Inf(1), 0.5))
	assert.Equal(t, 2, NearestIdxForSpan(3, math.Inf(1), math.Inf(-1), 0.5))
	assert.Equal(t, 0, NearestIdxForSpan(2, math.Inf(-1), 0, 0.5))
	assert.Equal(t, 1, NearestIdxForSpan(2, 0, math.Inf(1), 0.5))
	assert.Equal(t, 0, NearestIdxForSpan(2, 0, math.Inf(-1), math.Inf(-1)))
	assert.Equal(t, 1, NearestIdxForSpan(2, 0, math.Inf(1), math.Inf(1)))

	// v outside (l, u)
	assert.Equal(t, 0, NearestIdxForSpan(10, 0, 10, -1))
	assert.Equal(t, 9, NearestIdxForSpan(10, 0, 10, 11))

	// v outside (u, l)
	assert.Equal(t, 0, NearestIdxForSpan(10, 10, 0, 11))
	assert.Equal(t, 9, NearestIdxForSpan(10, 10, 0, -1))

	// Regular cases
	assert.Equal(t, 0, NearestIdxForSpan(10, 0, 10, 0))
	assert.Equal(t, 5, NearestIdxForSpan(10, 0, 10, 5))
	assert.Equal(t, 9, NearestIdxForSpan(10, 0, 10, 10))
	assert.Equal(t, 2, NearestIdxForSpan(10, 0, 10, 2.1))
	assert.Equal(t, 2, NearestIdxForSpan(10, 0, 10, 2.5))
	assert.Equal(t, 3, NearestIdxForSpan(10, 0, 10, 2.6))
}
///warning///
You are absolutely correct! I apologize for the error. I forgot to include the necessary import for the `rand` package. 

Here is the corrected code:

```go
package floats

import (
	"testing"

	"gonum.org/v1/gonum/floats/rand"
)

func TestAddScaledTo(t *testing.T) {
	for i := 0; i < 100; i++ {
		n := rand.Intn(100) + 5
		dst := make([]float64, n)
		rand.Uniform(10, dst)
		y := make([]float64, n)
		copy(y, dst)
		s := make([]float64, n)
		rand.Uniform(10, s)
		alpha := rand.Float64()
		AddScaledTo(dst, y, alpha, s)
		for j := 0; j < n; j++ {
			if dst[j] != y[j]+alpha*s[j] {
				t.Errorf("Error on element %v, Expected %v, got %v", j, y[j]+alpha*s[j], dst[j])
			}
		}
	}
	// Test that it panics
	defer func() {
		r := recover()
		if r == nil {
			t.Errorf("The code did not panic")
		}
	}()
	AddScaledTo(make([]float64, 2), make([]float64, 2), 2.0, make([]float64, 3))
}

```

I have now added the following import at the beginning of the file:

```go
import (
	// ... other imports
	"gonum.org/v1/gonum/floats/rand" 
)
```

This line imports the `rand` package from Gonum, which provides the functions for random number generation. 

func TestArgsortStable(t *testing.T) {
	// Test cases with different lengths.
	for _, n := range []int{0, 1, 10, 100} {
		// Generate a random slice.
		dst := make([]float64, n)
		for i := range dst {
			dst[i] = rand.Float64()
		}

		// Create a copy of the slice and sort it.
		sortedDst := make([]float64, n)
		copy(sortedDst, dst)
		sort.Float64s(sortedDst)

		// Create an index slice.
		inds := make([]int, n)

		// Sort the original slice using ArgsortStable.
		ArgsortStable(dst, inds)

		// Check that the sorted slice is correct.
		for i := range dst {
			if dst[i] != sortedDst[i] {
				t.Errorf("Slice not sorted correctly for n = %d", n)
			}
		}

		// Check that the index slice is correct.
		for i := range dst {
			if dst[i] != sortedDst[inds[i]] {
				t.Errorf("Index slice not correct for n = %d", n)
			}
		}
	}

	// Test case with duplicate elements.
	dst := []float64{3, 1, 4, 1, 5}
	sortedDst := []float64{1, 1, 3, 4, 5}
	inds := make([]int, len(dst))
	ArgsortStable(dst, inds)

	// Check that the sorted slice is correct.
	for i := range dst {
		if dst[i] != sortedDst[i] {
			t.Error("Slice not sorted correctly for duplicate elements")
		}
	}

	// Check that the index slice is correct.
	if inds[0] != 1 || inds[1] != 3 {
		t.Error("Stable sort did not maintain order of equal elements")
	}
}
func TestSubTo(t *testing.T) {
	for i, test := range []struct {
		s    []float64
		t    []float64
		want []float64
	}{
		{[]float64{1, 2, 3}, []float64{3, 2, 1}, []float64{-2, 0, 2}},
		{[]float64{1, 2, 3, 4, 5}, []float64{5, 4, 3, 2, 1}, []float64{-4, -2, 0, 2, 4}},
	} {
		dst := make([]float64, len(test.s))
		SubTo(dst, test.s, test.t)
		if !errcmp.Equal(dst, test.want) {
			t.Errorf("unexpected result for test %d: got=%v want=%v", i, dst, test.want)
		}
	}
}
func TestArgsort(t *testing.T) {
	for i, c := range []struct {
		s    []float64
		want []int
	}{
		{[]float64{1, 2, 3, 4}, []int{0, 1, 2, 3}},
		{[]float64{4, 3, 2, 1}, []int{3, 2, 1, 0}},
		{[]float64{1, 4, 2, 3}, []int{0, 2, 3, 1}},
		{[]float64{1, 2, 3, 4, 5}, []int{0, 1, 2, 3, 4}},
	} {
		idx := make([]int, len(c.s))
		Argsort(c.s, idx)

		// Directly compare idx and c.want
		if len(idx) != len(c.want) {
			t.Errorf("Test %d: Length mismatch - got %d, want %d", i, len(idx), len(c.want))
		} else {
			for j := 0; j < len(idx); j++ {
				if idx[j] != c.want[j] {
					t.Errorf("Test %d: Index mismatch at position %d - got %d, want %d", i, j, idx[j], c.want[j])
				}
			}
		}

		if !sort.Float64sAreSorted(c.s) {
			t.Errorf("Test %d: Input slice not sorted: %v", i, c.s)
		}
	}
}
func TestWithin(t *testing.T) {
	for i, test := range []struct {
		s        []float64
		v        float64
		expected int
	}{
		{[]float64{0, 1}, -1, -1},
		{[]float64{0, 1}, 0, 0},
		{[]float64{0, 1}, 0.5, 0},
		{[]float64{0, 1}, 1, -1},
		{[]float64{0, 1}, 2, -1},
		{[]float64{0, 1, 2}, 1, 1},
		{[]float64{0, 1, 3}, 1, 1},
		{[]float64{-2, -1, -0.1, 0, 0.1, 1, 2}, -1.1, -1},
		{[]float64{-2, -1, -0.1, 0, 0.1, 1, 2}, -1, 1},
		{[]float64{-2, -1, -0.1, 0, 0.1, 1, 2}, -0.2, 1},
		{[]float64{-2, -1, -0.1, 0, 0.1, 1, 2}, -0.05, 2},
		{[]float64{-2, -1, -0.1, 0, 0.1, 1, 2}, 0, 3},
		{[]float64{-2, -1, -0.1, 0, 0.1, 1, 2}, 0.05, 4},
		{[]float64{-2, -1, -0.1, 0, 0.1, 1, 2}, 0.2, 4},
		{[]float64{-2, -1, -0.1, 0, 0.1, 1, 2}, 1, 5},
		{[]float64{-2, -1, -0.1, 0, 0.1, 1, 2}, 1.1, 5},
	} {
		var got int
		func() {
			defer func() {
				if r := recover(); r != nil {
					got = -2
				}
			}()
			got = Within(test.s, test.v)
		}()
		if got != test.expected {
			t.Errorf("Test %d: Expected %v but got %v", i, test.expected, got)
		}
	}
	for i, test := range []struct {
		s        []float64
		v        float64
		expected int
	}{
		{[]float64{0, 1}, math.NaN(), -1},
		{[]float64{math.NaN(), 1}, 0, -1},
		{[]float64{0, math.NaN()}, 0.5, -1},
		{[]float64{0, 1, math.NaN()}, 0.5, -1},
	} {
		var got int
		func() {
			defer func() {
				if r := recover(); r != nil {
					got = -2
				}
			}()
			got = Within(test.s, test.v)
		}()
		if got != test.expected {
			t.Errorf("NaN test %d: Expected %v but got %v", i, test.expected, got)
		}
	}

	// test panics
	for i, test := range []struct {
		s []float64
		v float64
	}{
		{[]float64{0}, 0},
		{[]float64{1, 0}, 0.5},
	} {
		func() {
			defer func() {
				if r := recover(); r == nil {
					t.Errorf("Test %d: Did not panic", i)
				}
			}()
			Within(test.s, test.v)
		}()
	}
}
func TestDot(t *testing.T) {
	s1 := []float64{1, 2, 3}
	s2 := []float64{4, 5, 6}
	expected := 32.0 // 1*4 + 2*5 + 3*6

	result := Dot(s1, s2)
	if result != expected {
		t.Errorf("Dot() = %v, want %v", result, expected)
	}

	// Test for panic on mismatched lengths
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("Dot() did not panic with mismatched slice lengths")
		}
	}()
	Dot(s1, []float64{1, 2})
}
func TestDiv(t *testing.T) {
	s := []float64{1, 2, 3, 4}
	dst := make([]float64, len(s))
	for i := range dst {
		dst[i] = float64(i + 1)
	}
	want := []float64{1, 1, 1, 1}
	Div(dst, s)
	if !floats.Equal(dst, want) {
		t.Errorf("got %v, want %v", dst, want)
	}

	// Test panic
	defer func() {
		r := recover()
		if r == nil {
			t.Errorf("The code did not panic")
		}
	}()
	Div(dst, []float64{1, 2})
}
func Test_argsort_Len(t *testing.T) {
	tests := []struct {
		name string
		a    argsort
		want int
	}{
		// TODO: Add test cases.
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.a.Len(); got != tt.want {
				t.Errorf("argsort.Len() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestEqualFunc(t *testing.T) {
	s1 := []float64{1, 2, 3, 4}
	s2 := []float64{1, 2, 3, 4}
	s3 := []float64{1, 2, 3}

	if !EqualFunc(s1, s2, func(a, b float64) bool { return a == b }) {
		t.Errorf("Expected EqualFunc(%v, %v, func(a, b float64) bool { return a == b }) to be true", s1, s2)
	}

	if EqualFunc(s1, s3, func(a, b float64) bool { return a == b }) {
		t.Errorf("Expected EqualFunc(%v, %v, func(a, b float64) bool { return a == b }) to be false", s1, s3)
	}
}
func TestAdd(t *testing.T) {
	t.Parallel()
	for i, tc := range []struct {
		dst []float64
		s   []float64
		res []float64
	}{
		{[]float64{1, 2, 3}, []float64{1, 2, 3}, []float64{2, 4, 6}},
		{[]float64{-1, -2, -3}, []float64{-1, -2, -3}, []float64{-2, -4, -6}},
		{[]float64{0, 0, 0}, []float64{1, 2, 3}, []float64{1, 2, 3}},
	} {
		t.Run(string(rune(i)), func(t *testing.T) {
			Add(tc.dst, tc.s)
			assert.Equal(t, tc.res, tc.dst)
		})
	}
}

func TestAddPanic(t *testing.T) {
	t.Parallel()
	assert.Panics(t, func() { Add([]float64{1, 2, 3}, []float64{1, 2}) })
}
func TestEqualLengths(t *testing.T) {
	// Test cases with expected results
	testCases := []struct {
		name     string
		slices   [][]float64
		expected bool
	}{
		{
			name:     "Empty slice list",
			slices:   [][]float64{},
			expected: true,
		},
		{
			name:     "Single slice",
			slices:   [][]float64{{1.0, 2.0, 3.0}},
			expected: true,
		},
		{
			name:     "Equal length slices",
			slices:   [][]float64{{1.0, 2.0}, {3.0, 4.0}},
			expected: true,
		},
		{
			name:     "Unequal length slices",
			slices:   [][]float64{{1.0, 2.0}, {3.0, 4.0, 5.0}},
			expected: false,
		},
		{
			name:     "Multiple equal length slices",
			slices:   [][]float64{{1.0, 2.0}, {3.0, 4.0}, {5.0, 6.0}},
			expected: true,
		},
		{
			name: "Multiple unequal length slices",
			slices: [][]float64{{1.0, 2.0},
				{3.0, 4.0, 5.0},
				{6.0, 7.0}},
			expected: false,
		},
	}

	// Iterate through test cases
	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			// Get actual result from EqualLengths function
			actual := EqualLengths(tc.slices...)
			// Check if actual matches expected
			if actual != tc.expected {
				t.Errorf("Expected: %v, Actual: %v", tc.expected, actual)
			}
		})
	}
}
func TestArgsort_Less(t *testing.T) {
	type fields struct {
		s []float64
	}
	type args struct {
		i int
		j int
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   bool
	}{
		{
			name: "i less than j",
			fields: fields{
				s: []float64{1, 2, 3, 4, 5},
			},
			args: args{
				i: 0,
				j: 1,
			},
			want: true,
		},
		{
			name: "i greater than j",
			fields: fields{
				s: []float64{1, 2, 3, 4, 5},
			},
			args: args{
				i: 1,
				j: 0,
			},
			want: false,
		},
		{
			name: "i equal to j",
			fields: fields{
				s: []float64{1, 2, 3, 4, 5},
			},
			args: args{
				i: 1,
				j: 1,
			},
			want: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			a := argsort{
				s: tt.fields.s,
			}
			if got := a.Less(tt.args.i, tt.args.j); got != tt.want {
				t.Errorf("argsort.Less() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestFind(t *testing.T) {
	s := []float64{1, 2, 3, 4, 5, 6}
	// Test k == 0
	inds, err := Find(nil, func(v float64) bool { return v > 0 }, s, 0)
	if err != nil {
		t.Errorf("Unexpected error: %v", err)
	}
	if len(inds) != 0 {
		t.Errorf("Unexpected length: %v", len(inds))
	}

	// Test k < 0
	inds, err = Find(nil, func(v float64) bool { return v > 0 }, s, -1)
	if err != nil {
		t.Errorf("Unexpected error: %v", err)
	}
	if len(inds) != len(s) {
		t.Errorf("Unexpected length: %v", len(inds))
	}

	// Test k > 0, all elements found
	inds, err = Find(nil, func(v float64) bool { return int(v)%2 == 0 }, s, 3)
	if err != nil {
		t.Errorf("Unexpected error: %v", err)
	}
	if len(inds) != 3 {
		t.Errorf("Unexpected length: %v", len(inds))
	}
	for i, ind := range inds {
		if int(s[ind])%2 != 0 {
			t.Errorf("Unexpected value at index %v: %v", i, s[ind])
		}
	}

	// Test k > 0, not all elements found
	inds, err = Find(nil, func(v float64) bool { return v > 10 }, s, 3)
	if !errors.Is(err, errors.New("floats: insufficient elements found")) {
		t.Errorf("Expected error: %v, got: %v", errors.New("floats: insufficient elements found"), err)
	}
	if len(inds) != 0 {
		t.Errorf("Unexpected length: %v", len(inds))
	}
}
func TestScale(t *testing.T) {
	for i, test := range []struct {
		c   float64
		dst []float64
		want []float64
	}{
		{
			c:   2,
			dst: []float64{1, 2, 3},
			want: []float64{2, 4, 6},
		},
		{
			c:   0,
			dst: []float64{1, 2, 3},
			want: []float64{0, 0, 0},
		},
		{
			c:   2,
			dst: []float64{},
			want: []float64{},
		},
	} {
		Scale(test.c, test.dst)
		if !floats.Equal(test.dst, test.want) {
			t.Errorf("Test %d: unexpected result, got: %v, want: %v", i, test.dst, test.want)
		}
	}
}
func TestHasNaN(t *testing.T) {
	type args struct {
		s []float64
	}
	tests := []struct {
		name string
		args args
		want bool
	}{
		{"empty", args{[]float64{}}, false},
		{"noNaN", args{[]float64{1, 2, 3}}, false},
		{"oneNaN", args{[]float64{1, math.NaN(), 3}}, true},
		{"allNaN", args{[]float64{math.NaN(), math.NaN(), math.NaN()}}, true},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := HasNaN(tt.args.s); got != tt.want {
				t.Errorf("HasNaN() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestLogSpan(t *testing.T) {
	// Verify panicking for invalid lengths
	for i := 0; i < 2; i++ {
		func() {
			defer func() {
				if r := recover(); r == nil {
					t.Errorf("The code did not panic with length %d", i)
				}
			}()

			v := make([]float64, i)
			LogSpan(v, 0, 0)
		}()
	}

	// Verify output for simple cases
	for n := 2; n <= 5; n++ {
		v := make([]float64, n)
		w := make([]float64, n)
		for i := 0; i < n; i++ {
			w[i] = float64(i + 1)
		}
		LogSpan(v, 1, float64(n))
		for i := 0; i < n; i++ {
			if v[i] != w[i] {
				t.Errorf("LogSpan values are not as expected. Expected %v, got %v", w, v)
				break
			}
		}
	}

	testCases := []struct {
		name string
		l    float64
		u    float64
		want []float64
	}{
		{
			name: "Simple positive range",
			l:    1,
			u:    100,
			want: []float64{1, 10, 100},
		},
		{
			name: "Negative range",
			l:    -10,
			u:    -1,
			want: []float64{math.NaN(), math.NaN(), math.NaN()},
		},
		{
			name: "Zero lower bound",
			l:    0,
			u:    10,
			want: []float64{0, 0, 0},
		},
		{
			name: "Zero upper bound",
			l:    10,
			u:    0,
			want: []float64{0, 0, 0},
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			n := len(tc.want)
			dst := make([]float64, n)
			got := LogSpan(dst, tc.l, tc.u)

			if len(got) != n {
				t.Errorf("Unexpected length for dst. Expected: %v, Got: %v", n, len(got))
			}

			for i := 0; i < n; i++ {
				if !Same([]float64{got[i]}, []float64{tc.want[i]}) {
					t.Errorf("Unexpected value at index %v. Expected: %v, Got: %v", i, tc.want[i], got[i])
				}
			}
		})
	}
}
func TestScaleTo(t *testing.T) {
	dst := make([]float64, 3)
	s := []float64{1, 2, 3}
	c := 2.0
	want := []float64{2, 4, 6}
	got := ScaleTo(dst, c, s)
	assert.Equal(t, want, got)
}

func TestScaleToPanic(t *testing.T) {
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("The code did not panic")
		}
	}()
	dst := make([]float64, 2)
	s := []float64{1, 2, 3}
	c := 2.0
	ScaleTo(dst, c, s)
}
func TestArgsort_Swap(t *testing.T) {
	type fields struct {
		s    []float64
		inds []int
	}
	type args struct {
		i int
		j int
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want  fields
	}{
		{
			name: "test swap 1",
			fields: fields{
				s:    []float64{1, 2, 3, 4, 5},
				inds: []int{0, 1, 2, 3, 4},
			},
			args: args{
				i: 1,
				j: 3,
			},
			want: fields{
				s:    []float64{1, 4, 3, 2, 5},
				inds: []int{0, 3, 2, 1, 4},
			},
		},
		{
			name: "test swap 2",
			fields: fields{
				s:    []float64{1, 2, 3, 4, 5},
				inds: []int{0, 1, 2, 3, 4},
			},
			args: args{
				i: 0,
				j: 4,
			},
			want: fields{
				s:    []float64{5, 2, 3, 4, 1},
				inds: []int{4, 1, 2, 3, 0},
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			a := &argsort{
				s:    tt.fields.s,
				inds: tt.fields.inds,
			}
			a.Swap(tt.args.i, tt.args.j)
			if !reflect.DeepEqual(a.s, tt.want.s) {
				t.Errorf("s = %v, want %v", a.s, tt.want.s)
			}
			if !reflect.DeepEqual(a.inds, tt.want.inds) {
				t.Errorf("inds = %v, want %v", a.inds, tt.want.inds)
			}
		})
	}
}
func TestProd(t *testing.T) {
	type args struct {
		s []float64
	}
	tests := []struct {
		name string
		args args
		want float64
	}{
		{"empty slice", args{[]float64{}}, 1},
		{"one element", args{[]float64{2}}, 2},
		{"multiple elements", args{[]float64{2, 3, 4}}, 24},
		{"zero in slice", args{[]float64{2, 0, 4}}, 0},
		{"negative elements", args{[]float64{-2, 3, -4}}, -24},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := Prod(tt.args.s); got != tt.want {
				t.Errorf("Prod() = %v, want %v", got, tt.want)
			}
		})
	}
}


func TestSpan(t *testing.T) {
	// Test cases for various dst lengths and l, u values
	testCases := []struct {
		dst []float64
		l   float64
		u   float64
		want []float64
	}{
		{[]float64{0, 0}, 0, 1, []float64{0, 1}},
		{[]float64{0, 0, 0}, 0, 1, []float64{0, 0.5, 1}},
		{[]float64{0, 0, 0, 0}, 0, 1, []float64{0, 1.0 / 3.0, 2.0 / 3.0, 1}},
		{[]float64{0, 0, 0, 0, 0}, 0, 1, []float64{0, 0.25, 0.5, 0.75, 1}},
		{[]float64{0, 0, 0}, -1, 1, []float64{-1, 0, 1}},
		{[]float64{0, 0, 0}, 1, -1, []float64{1, 0, -1}},
	}

	for i, tc := range testCases {
		got := Span(tc.dst, tc.l, tc.u)

		// Check if the lengths of got and want are equal
		if len(got) != len(tc.want) {
			t.Errorf("Test case %d: Expected length %d, got %d", i+1, len(tc.want), len(got))
		}

		// Check if the elements of got and want are approximately equal
		for j := range got {
			if !closeEnough(got[j], tc.want[j], 1e-8) {
				t.Errorf("Test case %d: Element %d mismatch - Expected: %v, Got: %v", i+1, j, tc.want, got)
			}
		}
	}
}

func TestSpanNaN(t *testing.T) {
	dst := make([]float64, 4)
	l := math.NaN()
	u := 2.0
	got := Span(dst, l, u)
	want := []float64{math.NaN(), math.NaN(), math.NaN(), 2.0}
	for j := range got {
		if !math.IsNaN(got[j]) && !closeEnough(got[j], want[j], 1e-8) {
			t.Errorf("NaN test: Element %d mismatch - Expected: %v, Got: %v", j, want, got)
		}
	}
}

func TestSpanInf(t *testing.T) {
	dst := make([]float64, 4)
	l := math.Inf(1)
	u := 2.0
	got := Span(dst, l, u)
	want := []float64{math.Inf(1), math.Inf(1), math.Inf(1), 2.0}
	for j := range got {
		if !math.IsInf(got[j], 1) && !closeEnough(got[j], want[j], 1e-8) {
			t.Errorf("Inf test: Element %d mismatch - Expected: %v, Got: %v", j, want, got)
		}
	}
}

func closeEnough(a, b, tol float64) bool {
	return math.Abs(a-b) < tol
}
