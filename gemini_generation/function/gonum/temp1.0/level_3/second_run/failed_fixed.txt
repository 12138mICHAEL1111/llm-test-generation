func TestAddScaled(t *testing.T) {
	dst := []float64{1, 2, 3}
	alpha := 2.0
	s := []float64{4, 5, 6}

	// Test for panic when slice lengths do not match
	assert.PanicsWithError(t, badLength, func() {
		AddScaled(dst, alpha, []float64{1, 2})
	})

	// Test for successful addition with scaling
	expected := []float64{9, 12, 15}
	AddScaled(dst, alpha, s)

	for i := range dst {
		if dst[i] != expected[i] {
			t.Errorf("Expected %v but got %v", expected, dst)
			break
		}
	}
}
func TestAddScaledTo(t *testing.T) {
	dst := make([]float64, 3)
	y := []float64{1.0, 2.0, 3.0}
	alpha := 2.0
	s := []float64{0.5, 1.5, 2.5}

	result := AddScaledTo(dst, y, alpha, s)

	expected := []float64{2.0, 5.0, 8.0}

	assert.Equal(t, expected, result, "Expected result to be the sum of y and alpha*s")
}

func TestAddScaledTo_Panic(t *testing.T) {
	dst := make([]float64, 2)
	y := []float64{1.0, 2.0}
	alpha := 2.0
	s := []float64{0.5, 1.5}

	assert.Panics(t, func() { AddScaledTo(dst, y, alpha, s) }, "Expected panic due to mismatched lengths of y and s slices")
}
func TestLogSpan(t *testing.T) {
	dst := make([]float64, 5)
	l := 1.0
	u := 100.0

	result := LogSpan(dst, l, u)

	if len(result) != len(dst) {
		t.Errorf("Expected result length to be %d, but got %d", len(dst), len(result))
	}

	if result[0] != l {
		t.Errorf("First element of result should be %f, but got %f", l, result[0])
	}

	if result[len(result)-1] != u {
		t.Errorf("Last element of result should be %f, but got %f", u, result[len(result)-1])
	}

	for i := range result {
		if math.IsNaN(result[i]) {
			t.Errorf("Result contains NaN at index %d", i)
		}
		if l == 0 || u == 0 {
			if result[i] != 0 {
				t.Errorf("Result should be zero when l or u is zero")
			}
		}
	}
}
func TestWithin(t *testing.T) {
	tests := []struct {
		name     string
		input    []float64
		value    float64
		expected int
	}{
		{
			name:     "Value within slice range",
			input:    []float64{1, 2, 3, 4},
			value:    2.5,
			expected: 2,
		},
		{
			name:     "Value at beginning of slice",
			input:    []float64{1, 2, 3, 4},
			value:    1,
			expected: 0,
		},
		{
			name:     "Value at end of slice",
			input:    []float64{1, 2, 3, 4},
			value:    4,
			expected: 3,
		},
		{
			name:     "Value outside of slice range",
			input:    []float64{1, 2, 3, 4},
			value:    5,
			expected: -1,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := Within(tt.input, tt.value)
			if result != tt.expected {
				t.Errorf("Expected index %d, but got %d", tt.expected, result)
			}
		})
	}
}
func TestDistance(t *testing.T) {
	// test cases
	testCases := []struct {
		desc     string
		s        []float64
		t        []float64
		L        float64
		expected float64
	}{
		{
			desc:     "L2 norm with equal length slices",
			s:        []float64{1.0, 2.0, 3.0},
			t:        []float64{4.0, 5.0, 6.0},
			L:        2.0,
			expected: 5.196152422706632,
		},
		{
			desc:     "L1 norm with equal length slices",
			s:        []float64{1.0, 2.0, 3.0},
			t:        []float64{4.0, 5.0, 6.0},
			L:        1.0,
			expected: 9.0,
		},
		{
			desc:     "L-infinity norm with equal length slices",
			s:        []float64{1.0, 2.0, 3.0},
			t:        []float64{4.0, 5.0, 6.0},
			L:        float64('+'),
			expected: 3.0,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.desc, func(t *testing.T) {
			result := Distance(tc.s, tc.t, tc.L)
			if result != tc.expected {
				t.Errorf("Unexpected result for %s. Got: %f, Expected: %f", tc.desc, result, tc.expected)
			}
		})
	}
}
func TestNearestIdx(t *testing.T) {
	tests := []struct {
		name     string
		s        []float64
		v        float64
		expected int
	}{
		{name: "Test 1", s: []float64{1.0, 2.0, 3.0, 4.0, 5.0}, v: 3.5, expected: 2},
		{name: "Test 2", s: []float64{1.0, 2.0, 3.0, 4.0, 5.0}, v: 0.5, expected: 0},
		{name: "Test 3", s: []float64{1.0, 2.0, 3.0, 4.0, 5.0}, v: 5.5, expected: 4},
		{name: "Test 4", s: []float64{5.0, 4.0, 3.0, 2.0, 1.0}, v: 3.5, expected: 2},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			result := NearestIdx(tt.s, tt.v)
			if result != tt.expected {
				t.Errorf("Expected index %d, but got %d", tt.expected, result)
			}
		})
	}
}
func TestArgsortStable(t *testing.T) {
	dst := []float64{4.3, 2.7, 5.1, 3.9, 2.7}
	inds := make([]int, len(dst))
	for i := range inds {
		inds[i] = i
	}
	origDst := make([]float64, len(dst))
	copy(origDst, dst)

	ArgsortStable(dst, inds)

	// Check if the original and sorted slices have the same elements
	for i := range dst {
		if dst[i] != origDst[inds[i]] {
			t.Errorf("Expected %f at index %d, got %f", origDst[inds[i]], i, dst[i])
		}
	}

	// Check if inds slice contains the original position of the elements
	sortedIndices := make([]int, len(inds))
	copy(sortedIndices, inds)
	sort.Ints(sortedIndices)
	for i := range sortedIndices {
		if inds[i] != sortedIndices[i] {
			t.Errorf("Expected index %d at index %d, got %d", sortedIndices[i], i, inds[i])
		}
	}
}
func TestLogSumExp(t *testing.T) {
	testCases := []struct {
		input  []float64
		output float64
	}{
		{[]float64{1, 2, 3}, 3.40760596444438},
		{[]float64{0, 0, 0}, 0.6931471805599453},
		{[]float64{-1, -2, -3}, -0.3068528194400547},
	}

	for _, tc := range testCases {
		result := LogSumExp(tc.input)

		// we want to check for equality up to 1e-14
		if !approxEqual(result, tc.output, 1e-14) {
			t.Errorf("Expected LogSumExp(%v) to be %v, but got %v", tc.input, tc.output, result)
		}
	}
}

func approxEqual(a, b, epsilon float64) bool {
	return math.Abs(a-b) < epsilon
}
func TestMax(t *testing.T) {
	tests := []struct {
		input  []float64
		output float64
	}{
		{[]float64{1.0, 2.0, 3.0}, 3.0},
		{[]float64{-1.0, -2.5, -0.5}, -0.5},
		{[]float64{0.0}, 0.0},
		{[]float64{}, 0.0},
	}

	for _, test := range tests {
		var result float64
		func() {
			defer func() {
				if r := recover(); r != nil {
					result = 0.0
				}
			}()
			result = Max(test.input)
		}()

		if result != test.output {
			t.Errorf("Expected Max(%v) to be %f, but got %f", test.input, test.output, result)
		}
	}
}
func TestCumProd(t *testing.T) {
	tests := []struct {
		dst      []float64
		s        []float64
		expected []float64
	}{
		{[]float64{1, 2, 3, 4}, []float64{1, 2, 3, 4}, []float64{1, 2, 6, 24}},
		{[]float64{1, 2, 3, 4}, []float64{4, 3, 2, 1}, []float64{4, 12, 24, 24}},
		{[]float64{1, 2, 3, 4}, []float64{1, 2, 3}, nil}, // Panic expected
	}

	for _, test := range tests {
		defer func() {
			if r := recover(); r == nil && test.expected == nil {
				t.Errorf("Test failed: expected panic, but no panic occurred")
			}
		}()

		CumProd(test.dst, test.s)

		if test.expected != nil {
			if len(test.dst) != len(test.expected) {
				t.Errorf("Test failed: expected length %d, got length %d", len(test.expected), len(test.dst))
			}

			for i, val := range test.dst {
				if val != test.expected[i] {
					t.Errorf("Test failed: expected %v at index %d, got %v", test.expected[i], i, val)
				}
			}
		}
	}
}
