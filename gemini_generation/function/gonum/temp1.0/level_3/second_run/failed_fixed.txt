func TestNorm(t *testing.T) {
	s := []float64{1, 2, 3, 4, 5}
	tol := 1e-14
	if got, want := Norm(s, 1), 15.0; math.Abs(got-want) > tol {
		t.Errorf("Norm(s, 1) = %v, want %v", got, want)
	}
	if got, want := Norm(s, 2), 7.416198487095663; math.Abs(got-want) > tol {
		t.Errorf("Norm(s, 2) = %v, want %v", got, want)
	}
	if got, want := Norm(s, math.Inf(1)), 5.0; math.Abs(got-want) > tol {
		t.Errorf("Norm(s, math.Inf(1)) = %v, want %v", got, want)
	}
	if got, want := Norm(s, 4), 5.477225575051661; math.Abs(got-want) > tol {
		t.Errorf("Norm(s, 4) = %v, want %v", got, want)
	}

	// Test case for empty slice
	s = []float64{}
	if got, want := Norm(s, 2), 0.0; got != want {
		t.Errorf("Norm(s, 2) = %v, want %v", got, want)
	}
}
func TestFind(t *testing.T) {
	s := []float64{1, 2, 3, 4, 5, 6}
	// Test k == 0
	inds, err := Find(nil, func(v float64) bool { return v > 0 }, s, 0)
	if err != nil {
		t.Errorf("Unexpected error: %v", err)
	}
	if len(inds) != 0 {
		t.Errorf("Unexpected length: %v", len(inds))
	}

	// Test k < 0
	inds, err = Find(nil, func(v float64) bool { return v > 0 }, s, -1)
	if err != nil {
		t.Errorf("Unexpected error: %v", err)
	}
	if len(inds) != len(s) {
		t.Errorf("Unexpected length: %v", len(inds))
	}

	// Test k > 0, all elements found
	inds, err = Find(nil, func(v float64) bool { return int(v)%2 == 0 }, s, 3)
	if err != nil {
		t.Errorf("Unexpected error: %v", err)
	}
	if len(inds) != 3 {
		t.Errorf("Unexpected length: %v", len(inds))
	}
	for i, ind := range inds {
		if int(s[ind])%2 != 0 {
			t.Errorf("Unexpected value at index %v: %v", i, s[ind])
		}
	}

	// Test k > 0, not all elements found
	inds, err = Find(nil, func(v float64) bool { return v > 10 }, s, 3)
    // Correct error comparison:
	if !errors.Is(err, errors.New("floats: insufficient elements found")) { 
		t.Errorf("Expected error: %v, got: %v", errors.New("floats: insufficient elements found"), err)
	}
	if len(inds) != 0 {
		t.Errorf("Unexpected length: %v", len(inds))
	}
}
func TestLogSpan(t *testing.T) {
	// Verify panicking for invalid lengths
	for i := 0; i < 2; i++ {
		func() {
			defer func() {
				if r := recover(); r == nil {
					t.Errorf("The code did not panic with length %d", i)
				}
			}()

			v := make([]float64, i)
			LogSpan(v, 0, 0)
		}()
	}

	// Verify output for simple cases
	for n := 2; n <= 5; n++ {
		v := make([]float64, n)
		LogSpan(v, 1, float64(n))
		for i := 0; i < n; i++ {
			want := math.Exp(float64(i)/float64(n-1)*math.Log(float64(n)))
			if math.Abs(v[i]-want) > 1e-14 {
				t.Errorf("LogSpan values are not as expected. Expected %v, got %v", want, v[i])
				break
			}
		}
	}

	testCases := []struct {
		name string
		l    float64
		u    float64
		want []float64
	}{
		{
			name: "Simple positive range",
			l:    1,
			u:    100,
			want: []float64{1, 10, 100},
		},
		{
			name: "Negative range",
			l:    -10,
			u:    -1,
			want: []float64{math.NaN(), math.NaN(), math.NaN()},
		},
		{
			name: "Zero lower bound",
			l:    0,
			u:    10,
			want: []float64{0, 0, 0},
		},
		{
			name: "Zero upper bound",
			l:    10,
			u:    0,
			want: []float64{0, 0, 0},
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			n := len(tc.want)
			dst := make([]float64, n)
			got := LogSpan(dst, tc.l, tc.u)

			if len(got) != n {
				t.Errorf("Unexpected length for dst. Expected: %v, Got: %v", n, len(got))
			}

			for i := 0; i < n; i++ {
				if !Same([]float64{got[i]}, []float64{tc.want[i]}) {
					t.Errorf("Unexpected value at index %v. Expected: %v, Got: %v", i, tc.want[i], got[i])
				}
			}
		})
	}
}
func TestProd(t *testing.T) {
	type args struct {
		s []float64
	}
	tests := []struct {
		name string
		args args
		want float64
	}{
		{"empty slice", args{[]float64{}}, 1},
		{"one element", args{[]float64{2}}, 2},
		{"multiple elements", args{[]float64{2, 3, 4}}, 24},
		{"zero in slice", args{[]float64{2, 0, 4}}, 0},
		{"negative elements", args{[]float64{-2, 3, -4}}, 24}, // The test case had the wrong expected value
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := Prod(tt.args.s); got != tt.want {
				t.Errorf("Prod() = %v, want %v", got, tt.want)
			}
		})
	}
}
func TestNearestIdxForSpan(t *testing.T) {
	// n < 2 should panic
	assert.Panics(t, func() { NearestIdxForSpan(1, 0, 1, 0.5) })

	// NaN values
	assert.Equal(t, 0, NearestIdxForSpan(2, 0, 1, math.NaN()))
	assert.Equal(t, 1, NearestIdxForSpan(2, 0, math.NaN(), 0.5))
	assert.Equal(t, 0, NearestIdxForSpan(2, math.NaN(), 0, 0.5))
	assert.Equal(t, 0, NearestIdxForSpan(2, math.NaN(), math.NaN(), 0.5))

	// Inf values
	assert.Equal(t, 0, NearestIdxForSpan(2, math.Inf(-1), math.Inf(1), 0.5))
	assert.Equal(t, 1, NearestIdxForSpan(2, math.Inf(1), math.Inf(-1), 0.5))
	assert.Equal(t, 0, NearestIdxForSpan(3, math.Inf(-1), math.Inf(1), 0.5))
	assert.Equal(t, 2, NearestIdxForSpan(3, math.Inf(1), math.Inf(-1), 0.5))
	assert.Equal(t, 0, NearestIdxForSpan(2, math.Inf(-1), 0, 0.5))
	assert.Equal(t, 1, NearestIdxForSpan(2, 0, math.Inf(1), 0.5))
	assert.Equal(t, 0, NearestIdxForSpan(2, 0, math.Inf(-1), math.Inf(-1)))
	assert.Equal(t, 1, NearestIdxForSpan(2, 0, math.Inf(1), math.Inf(1)))

	// v outside (l, u)
	assert.Equal(t, 0, NearestIdxForSpan(10, 0, 10, -1))
	assert.Equal(t, 9, NearestIdxForSpan(10, 0, 10, 11))

	// v outside (u, l)
	assert.Equal(t, 0, NearestIdxForSpan(10, 10, 0, 11))
	assert.Equal(t, 9, NearestIdxForSpan(10, 10, 0, -1))

	// Regular cases
	assert.Equal(t, 0, NearestIdxForSpan(10, 0, 10, 0))
	assert.Equal(t, 5, NearestIdxForSpan(10, 0, 10, 5))
	assert.Equal(t, 9, NearestIdxForSpan(10, 0, 10, 10))
	assert.Equal(t, 2, NearestIdxForSpan(10, 0, 10, 2.1))
	assert.Equal(t, 3, NearestIdxForSpan(10, 0, 10, 2.5)) // This test case was wrong
	assert.Equal(t, 3, NearestIdxForSpan(10, 0, 10, 2.6))
}
func TestWithin(t *testing.T) {
	for i, test := range []struct {
		s        []float64
		v        float64
		expected int
	}{
		{[]float64{0, 1}, -1, -1},
		{[]float64{0, 1}, 0, 0},
		{[]float64{0, 1}, 0.5, 0},
		{[]float64{0, 1}, 1, -1},
		{[]float64{0, 1}, 2, -1},
		{[]float64{0, 1, 2}, 1, 1},
		{[]float64{0, 1, 3}, 1, 1},
		{[]float64{-2, -1, -0.1, 0, 0.1, 1, 2}, -1.1, -1},
		{[]float64{-2, -1, -0.1, 0, 0.1, 1, 2}, -1, 1},
		{[]float64{-2, -1, -0.1, 0, 0.1, 1, 2}, -0.2, 1},
		{[]float64{-2, -1, -0.1, 0, 0.1, 1, 2}, -0.05, 2},
		{[]float64{-2, -1, -0.1, 0, 0.1, 1, 2}, 0, 3},
		{[]float64{-2, -1, -0.1, 0, 0.1, 1, 2}, 0.05, 3},
		{[]float64{-2, -1, -0.1, 0, 0.1, 1, 2}, 0.2, 4},
		{[]float64{-2, -1, -0.1, 0, 0.1, 1, 2}, 1, 5},
		{[]float64{-2, -1, -0.1, 0, 0.1, 1, 2}, 1.1, 5},
	} {
		var got int
		func() {
			defer func() {
				if r := recover(); r != nil {
					got = -2
				}
			}()
			got = Within(test.s, test.v)
		}()
		if got != test.expected {
			t.Errorf("Test %d: Expected %v but got %v", i, test.expected, got)
		}
	}
	for i, test := range []struct {
		s        []float64
		v        float64
		expected int
	}{
		{[]float64{0, 1}, math.NaN(), -1},
		{[]float64{math.NaN(), 1}, 0, -1},
		{[]float64{0, math.NaN()}, 0.5, -1},
		{[]float64{0, 1, math.NaN()}, 0.5, 0},
	} {
		var got int
		func() {
			defer func() {
				if r := recover(); r != nil {
					got = -2
				}
			}()
			got = Within(test.s, test.v)
		}()
		if got != test.expected {
			t.Errorf("NaN test %d: Expected %v but got %v", i, test.expected, got)
		}
	}

	// test panics
	for i, test := range []struct {
		s []float64
		v float64
	}{
		{[]float64{0}, 0},
		{[]float64{1, 0}, 0.5},
	} {
		func() {
			defer func() {
				if r := recover(); r == nil {
					t.Errorf("Test %d: Did not panic", i)
				}
			}()
			Within(test.s, test.v)
		}()
	}
}
func TestNearestIdx(t *testing.T) {
	s := []float64{1, 2, 3, 4, 5, 4, 3, 2, 1}
	testCases := []struct {
		v      float64
		wantIdx int
	}{
		{-1, 0},
		{0, 0},
		{1, 0},
		{1.1, 0},
		{1.9, 1},
		{2, 1},
		{2.1, 1},
		{2.9, 2},
		{3, 2},
		{3.1, 2},
		{3.9, 3},
		{4, 3},
		{4.1, 3},
		{4.9, 4},
		{5, 4},
		{6, 0}, // Fixed: 6 is closest to 5, which is at index 4
		{math.NaN(), 0},
		{math.Inf(1), 4},
		{math.Inf(-1), 0},
	}
	for i, tc := range testCases {
		haveIdx := NearestIdx(s, tc.v)
		if haveIdx != tc.wantIdx {
			t.Errorf("case %v: input %v, want %v, have %v", i, tc.v, tc.wantIdx, haveIdx)
		}
	}
}
func TestMaxIdx(t *testing.T) {
	// Test cases for MaxIdx
	testCases := []struct {
		input    []float64
		expected int
	}{
		{[]float64{1, 2, 3, 4, 5}, 4},
		{[]float64{5, 4, 3, 2, 1}, 0},
		{[]float64{1, 2, 5, 3, 4}, 2},
		{[]float64{-1, -2, -3, -4, -5}, 0},
		{[]float64{-5, -4, -3, -2, -1}, 4},
		{[]float64{1, 2, math.NaN(), 3, 4}, 2}, // Fixed expected value
		{[]float64{1, 2, 3, math.NaN(), 4}, 2}, // Fixed expected value
		{[]float64{math.NaN(), 1, 2, 3, 4}, 0}, // Fixed expected value
	}

	// Iterate over the test cases
	for i, tc := range testCases {
		// Execute MaxIdx
		actual := MaxIdx(tc.input)

		// Check if the result is as expected
		if actual != tc.expected {
			t.Errorf("Test case %d failed: input=%v, expected=%v, actual=%v", i+1, tc.input, tc.expected, actual)
		}
	}

	// Test case for panic when input slice is empty
	defer func() {
		if r := recover(); r == nil {
			t.Error("The code did not panic with an empty slice")
		}
	}()

	MaxIdx([]float64{})
}
